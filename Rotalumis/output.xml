<ns0:poosl_specification xmlns:ns0="uri:poosl"><ns0:data_classes><ns0:data_class name="Object" native="true"><ns0:data_method name="deepCopy" native="true"><ns0:return_type>Object</ns0:return_type></ns0:data_method><ns0:data_method name="error" native="true"><ns0:return_type>Object</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="assert" native="true"><ns0:return_type>Object</ns0:return_type><ns0:argument name="b" type="Boolean" /><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="marshal" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="printString" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="shallowCopy" native="true"><ns0:return_type>Object</ns0:return_type></ns0:data_method><ns0:data_method name="isOfType" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="!=" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="o" type="Object" /></ns0:data_method><ns0:data_method name="!==" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="o" type="Object" /></ns0:data_method><ns0:data_method name="=" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="o" type="Object" /></ns0:data_method><ns0:data_method name="==" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="o" type="Object" /></ns0:data_method></ns0:data_class><ns0:data_class name="Array" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="deepCopy" native="true"><ns0:return_type>Object</ns0:return_type></ns0:data_method><ns0:data_method name="shallowCopy" native="true"><ns0:return_type>Object</ns0:return_type></ns0:data_method><ns0:data_method name="printString" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="at" native="true"><ns0:return_type>Object</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="size" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method><ns0:data_method name="putAt" native="true"><ns0:return_type>Array</ns0:return_type><ns0:argument name="i" type="Integer" /><ns0:argument name="o" type="Object" /></ns0:data_method><ns0:data_method name="putAll" native="true"><ns0:return_type>Array</ns0:return_type><ns0:argument name="o" type="Object" /></ns0:data_method><ns0:data_method name="resize" native="true"><ns0:return_type>Array</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="concat" native="true"><ns0:return_type>Array</ns0:return_type><ns0:argument name="a" type="Array" /></ns0:data_method><ns0:data_method name="find" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /><ns0:argument name="o" type="Object" /></ns0:data_method><ns0:data_method name="subArray" native="true"><ns0:return_type>Array</ns0:return_type><ns0:argument name="i" type="Integer" /><ns0:argument name="l" type="Integer" /></ns0:data_method><ns0:data_method name="=" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="o" type="Object" /></ns0:data_method><ns0:data_method name="+" native="true"><ns0:return_type>Array</ns0:return_type><ns0:argument name="a" type="Array" /></ns0:data_method></ns0:data_class><ns0:data_class name="String" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="deepCopy" native="true"><ns0:return_type>Object</ns0:return_type></ns0:data_method><ns0:data_method name="shallowCopy" native="true"><ns0:return_type>Object</ns0:return_type></ns0:data_method><ns0:data_method name="concat" native="true"><ns0:return_type>String</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="cr" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="lf" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="tab" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="find" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="at" native="true"><ns0:return_type>Char</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="size" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method><ns0:data_method name="putAt" native="true"><ns0:return_type>String</ns0:return_type><ns0:argument name="i" type="Integer" /><ns0:argument name="c" type="Char" /></ns0:data_method><ns0:data_method name="subString" native="true"><ns0:return_type>String</ns0:return_type><ns0:argument name="i" type="Integer" /><ns0:argument name="l" type="Integer" /></ns0:data_method><ns0:data_method name="unmarshal" native="true"><ns0:return_type>Object</ns0:return_type></ns0:data_method><ns0:data_method name="splitOn" native="true"><ns0:return_type>Array</ns0:return_type><ns0:argument name="c" type="Char" /></ns0:data_method><ns0:data_method name="splitOnWhiteSpace" native="true"><ns0:return_type>Array</ns0:return_type></ns0:data_method><ns0:data_method name="splitOnString" native="true"><ns0:return_type>Array</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="splitOnAny" native="true"><ns0:return_type>Array</ns0:return_type><ns0:argument name="c" type="String" /></ns0:data_method><ns0:data_method name="trim" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="isBoolean" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="isChar" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="isNumber" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="isInteger" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="isReal" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="parseAsInteger" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method><ns0:data_method name="parseAsReal" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="toBoolean" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="toChar" native="true"><ns0:return_type>Char</ns0:return_type></ns0:data_method><ns0:data_method name="toReal" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="toInteger" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method><ns0:data_method name="=" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="o" type="Object" /></ns0:data_method><ns0:data_method name="+" native="true"><ns0:return_type>String</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method></ns0:data_class><ns0:data_class name="Nil" native="true"><ns0:super_class>Object</ns0:super_class></ns0:data_class><ns0:data_class name="Boolean" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="not" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="xor" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="b" type="Boolean" /></ns0:data_method><ns0:data_method name="&amp;" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="b" type="Boolean" /></ns0:data_method><ns0:data_method name="|" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="b" type="Boolean" /></ns0:data_method><ns0:data_method name="!" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method></ns0:data_class><ns0:data_class name="Char" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="asciiIndex" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method><ns0:data_method name="asString" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method></ns0:data_class><ns0:data_class name="Integer" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="abs" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method><ns0:data_method name="asAsciiChar" native="true"><ns0:return_type>Char</ns0:return_type></ns0:data_method><ns0:data_method name="asInteger" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method><ns0:data_method name="asReal" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="div" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="fac" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method><ns0:data_method name="modulo" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="monus" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="power" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="sqr" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method><ns0:data_method name="max" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="not" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method><ns0:data_method name="min" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="xor" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="-" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="*" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="/" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="&amp;" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="+" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="&lt;" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="&lt;=" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="&gt;" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="&gt;=" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="|" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="-" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method></ns0:data_class><ns0:data_class name="Real" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="abs" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="acos" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="asin" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="asInteger" native="true"><ns0:return_type>Integer</ns0:return_type></ns0:data_method><ns0:data_method name="asReal" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="atan" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="atan2" native="true"><ns0:return_type>Real</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="ceiling" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="cos" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="exp" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="floor" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="ln" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="log" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="monus" native="true"><ns0:return_type>Real</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="power" native="true"><ns0:return_type>Real</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="round" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="sin" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="sqr" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="sqrt" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="tan" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="max" native="true"><ns0:return_type>Real</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="min" native="true"><ns0:return_type>Real</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="-" native="true"><ns0:return_type>Real</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="*" native="true"><ns0:return_type>Real</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="/" native="true"><ns0:return_type>Real</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="+" native="true"><ns0:return_type>Real</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="&lt;" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="&lt;=" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="&gt;" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="&gt;=" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="r" type="Real" /></ns0:data_method><ns0:data_method name="-" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method></ns0:data_class><ns0:data_class name="RandomGenerator" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="random" native="true"><ns0:return_type>Real</ns0:return_type></ns0:data_method><ns0:data_method name="randomInt" native="true"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="randomiseSeed" native="true"><ns0:return_type>RandomGenerator</ns0:return_type></ns0:data_method><ns0:data_method name="seed" native="true"><ns0:return_type>RandomGenerator</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method></ns0:data_class><ns0:data_class name="Console" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="write" native="true"><ns0:return_type>FileOut</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="writeLine" native="true"><ns0:return_type>FileOut</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="writeError" native="true"><ns0:return_type>FileOut</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="writeLineError" native="true"><ns0:return_type>FileOut</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method></ns0:data_class><ns0:data_class name="FileIn" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="source" native="true"><ns0:return_type>FileIn</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="open" native="true"><ns0:return_type>FileIn</ns0:return_type></ns0:data_method><ns0:data_method name="atEndOfFile" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="close" native="true"><ns0:return_type>FileIn</ns0:return_type></ns0:data_method><ns0:data_method name="read" native="true"><ns0:return_type>String</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="readUntil" native="true"><ns0:return_type>String</ns0:return_type><ns0:argument name="c" type="Char" /></ns0:data_method><ns0:data_method name="readWord" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="readLine" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="readString" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method></ns0:data_class><ns0:data_class name="FileOut" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="destination" native="true"><ns0:return_type>FileOut</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="open" native="true"><ns0:return_type>FileOut</ns0:return_type></ns0:data_method><ns0:data_method name="append" native="true"><ns0:return_type>FileOut</ns0:return_type></ns0:data_method><ns0:data_method name="flush" native="true"><ns0:return_type>FileOut</ns0:return_type></ns0:data_method><ns0:data_method name="close" native="true"><ns0:return_type>FileOut</ns0:return_type></ns0:data_method><ns0:data_method name="write" native="true"><ns0:return_type>FileOut</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="writeLine" native="true"><ns0:return_type>FileOut</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="writeString" native="true"><ns0:return_type>FileOut</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method></ns0:data_class><ns0:data_class name="Socket" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="acceptFrom" native="true"><ns0:return_type>Socket</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="connectTo" native="true"><ns0:return_type>Socket</ns0:return_type><ns0:argument name="s" type="String" /><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="isConnected" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="isDisconnected" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="close" native="true"><ns0:return_type>Socket</ns0:return_type></ns0:data_method><ns0:data_method name="hasCharacters" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="read" native="true"><ns0:return_type>String</ns0:return_type><ns0:argument name="i" type="Integer" /></ns0:data_method><ns0:data_method name="hasCharacter" native="true"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="c" type="Char" /></ns0:data_method><ns0:data_method name="readUntil" native="true"><ns0:return_type>String</ns0:return_type><ns0:argument name="c" type="Char" /></ns0:data_method><ns0:data_method name="hasWord" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="readWord" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="hasLine" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="readLine" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="hasString" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method><ns0:data_method name="readString" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="write" native="true"><ns0:return_type>Socket</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="writeLine" native="true"><ns0:return_type>Socket</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="writeString" native="true"><ns0:return_type>Socket</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method></ns0:data_class><ns0:data_class name="Observer" native="true"><ns0:super_class>Object</ns0:super_class><ns0:data_method name="identifyWith" native="true"><ns0:return_type>Observer</ns0:return_type><ns0:argument name="s" type="String" /></ns0:data_method><ns0:data_method name="identity" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="result" native="true"><ns0:return_type>String</ns0:return_type></ns0:data_method><ns0:data_method name="register" native="true"><ns0:return_type>Observer</ns0:return_type></ns0:data_method><ns0:data_method name="deregister" native="true"><ns0:return_type>Observer</ns0:return_type></ns0:data_method><ns0:data_method name="complete" native="true"><ns0:return_type>Observer</ns0:return_type></ns0:data_method><ns0:data_method name="halt" native="true"><ns0:return_type>Observer</ns0:return_type></ns0:data_method><ns0:data_method name="isLast" native="true"><ns0:return_type>Boolean</ns0:return_type></ns0:data_method></ns0:data_class><ns0:data_class name="Distribution" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="Random" type="RandomGenerator" /><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:constant type="string">"Unspecified Distribution"</ns0:constant></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="initialise" native="false"><ns0:return_type>Distribution</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Random"><ns0:data_method_call method_name="randomiseSeed" stmt_handle="88" super="false"><ns0:receiver><ns0:new data_class="RandomGenerator" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Bernoulli" native="false"><ns0:super_class>Distribution</ns0:super_class><ns0:instance_variable name="SuccessProbability" type="Real" /><ns0:data_method name="withParameter" native="false"><ns0:return_type>Bernoulli</ns0:return_type><ns0:argument name="S" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="89" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="90"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="91"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="92"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="93" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="94" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="95" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="96" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="97" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter of Bernoulli distribution must be an Integer or Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="98" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="S"><ns0:data_method_call method_name="asReal" stmt_handle="99" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="100"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="101"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="102"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="103" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for Bernoulli distribution must be within the interval [0, 1]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="SuccessProbability"><ns0:variable name="S" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="104"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="&lt;" stmt_handle="105"><ns0:left_operand><ns0:data_method_call method_name="random" stmt_handle="106" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="SuccessProbability" /></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:nil /></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="yieldsSuccess" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="sample" stmt_handle="107" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="108"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="109"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="110"><ns0:left_operand><ns0:constant type="string">"Bernoulli("</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="111" super="false"><ns0:receiver><ns0:variable name="SuccessProbability" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">")"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:constant type="string">"Uninitialized Bernoulli"</ns0:constant></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Beta" native="false"><ns0:super_class>Distribution</ns0:super_class><ns0:instance_variable name="GammaA" type="Gamma" /><ns0:instance_variable name="GammaB" type="Gamma" /><ns0:instance_variable name="Alpha" type="Real" /><ns0:instance_variable name="Beta" type="Real" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>Beta</ns0:return_type><ns0:argument name="A" type="Object" /><ns0:argument name="B" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="112" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="113"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="114"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="115"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="116"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="117"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="118" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="119" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="120" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="121" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="122"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="123"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="124" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="125" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="126" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="127" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="128" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Shape parameters of Beta distribution must be Integers or Reals"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="129" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="A"><ns0:data_method_call method_name="asReal" stmt_handle="130" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="131" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="B"><ns0:data_method_call method_name="asReal" stmt_handle="132" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="133"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="134"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="135"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="136" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Shape parameters of Beta distribution should be larger than 0.0"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Alpha"><ns0:variable name="A" /></ns0:assignment><ns0:assignment variable_name="Beta"><ns0:variable name="B" /></ns0:assignment><ns0:assignment variable_name="GammaA"><ns0:data_method_call method_name="withParameters" stmt_handle="137" super="false"><ns0:receiver><ns0:new data_class="Gamma" /></ns0:receiver><ns0:argument><ns0:variable name="Alpha" /></ns0:argument><ns0:argument><ns0:constant type="real">1.0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="GammaB"><ns0:data_method_call method_name="withParameters" stmt_handle="138" super="false"><ns0:receiver><ns0:new data_class="Gamma" /></ns0:receiver><ns0:argument><ns0:variable name="Beta" /></ns0:argument><ns0:argument><ns0:constant type="real">1.0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Real</ns0:return_type><ns0:local_variable name="Sample" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="139"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Sample"><ns0:data_method_call method_name="sample" stmt_handle="140" super="false"><ns0:receiver><ns0:variable name="GammaA" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:return><ns0:binary_operation operator="/" stmt_handle="141"><ns0:left_operand><ns0:variable name="Sample" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="142"><ns0:left_operand><ns0:variable name="Sample" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="sample" stmt_handle="143" super="false"><ns0:receiver><ns0:variable name="GammaB" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="144"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="145"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="146"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="147"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="148"><ns0:left_operand><ns0:constant type="string">"Beta("</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="149" super="false"><ns0:receiver><ns0:variable name="Alpha" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="150" super="false"><ns0:receiver><ns0:variable name="Beta" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">")"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:constant type="string">"Uninitialized Beta"</ns0:constant></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Beta4" native="false"><ns0:super_class>Distribution</ns0:super_class><ns0:instance_variable name="GammaA" type="Gamma" /><ns0:instance_variable name="GammaB" type="Gamma" /><ns0:instance_variable name="Alpha" type="Real" /><ns0:instance_variable name="Beta" type="Real" /><ns0:instance_variable name="LowerBound" type="Real" /><ns0:instance_variable name="UpperBound" type="Real" /><ns0:instance_variable name="Fixed" type="Boolean" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>Beta4</ns0:return_type><ns0:argument name="A" type="Object" /><ns0:argument name="B" type="Object" /><ns0:argument name="L" type="Object" /><ns0:argument name="U" type="Object" /><ns0:local_variable name="Temp" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="151" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="152"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="153"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="154"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="155"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="156"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="157" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="158" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="159" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="160" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="161"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="162"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="163" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="164" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="165" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="166" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="167" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Shape parameters of Beta4 distribution must be Integers or Reals"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="168"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="169"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="170"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="171" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="172" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="173" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="174" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="175" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Lower Bound for Beta4 distribution must be an Integer or Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="176"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="177"><ns0:left_operand><ns0:variable name="U" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="178"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="179" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="180" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="181" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="182" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="183" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Upper Bound for Beta4 distribution must be an Integer or Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Alpha"><ns0:variable name="A" /></ns0:assignment><ns0:assignment variable_name="Beta"><ns0:variable name="B" /></ns0:assignment><ns0:assignment variable_name="LowerBound"><ns0:variable name="L" /></ns0:assignment><ns0:assignment variable_name="UpperBound"><ns0:variable name="U" /></ns0:assignment><ns0:assignment variable_name="Fixed"><ns0:binary_operation operator="=" stmt_handle="184"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:data_method_call method_name="not" stmt_handle="185" super="false"><ns0:receiver><ns0:variable name="Fixed" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;=" stmt_handle="186"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Temp"><ns0:variable name="LowerBound" /></ns0:assignment><ns0:assignment variable_name="LowerBound"><ns0:variable name="UpperBound" /></ns0:assignment><ns0:assignment variable_name="UpperBound"><ns0:variable name="Temp" /></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="187"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="188"><ns0:left_operand><ns0:variable name="Alpha" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="189"><ns0:left_operand><ns0:variable name="Beta" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="190" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Shape parameters of Beta4 distribution should be larger than 0.0"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="GammaA"><ns0:data_method_call method_name="withParameters" stmt_handle="191" super="false"><ns0:receiver><ns0:new data_class="Gamma" /></ns0:receiver><ns0:argument><ns0:variable name="Alpha" /></ns0:argument><ns0:argument><ns0:constant type="real">1.0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="GammaB"><ns0:data_method_call method_name="withParameters" stmt_handle="192" super="false"><ns0:receiver><ns0:new data_class="Gamma" /></ns0:receiver><ns0:argument><ns0:variable name="Beta" /></ns0:argument><ns0:argument><ns0:constant type="real">1.0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Real</ns0:return_type><ns0:local_variable name="Sample" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="193"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:if><ns0:condition><ns0:variable name="Fixed" /></ns0:condition><ns0:then><ns0:return><ns0:variable name="LowerBound" /></ns0:return></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="Sample"><ns0:data_method_call method_name="sample" stmt_handle="194" super="false"><ns0:receiver><ns0:variable name="GammaA" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="195"><ns0:left_operand><ns0:variable name="Sample" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:variable name="LowerBound" /></ns0:return></ns0:then><ns0:else><ns0:return><ns0:binary_operation operator="+" stmt_handle="196"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="197"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="198"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="199"><ns0:left_operand><ns0:variable name="Sample" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="200"><ns0:left_operand><ns0:variable name="Sample" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="sample" stmt_handle="201" super="false"><ns0:receiver><ns0:variable name="GammaB" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:else></ns0:if></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="202"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="203"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="204"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="205"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="206"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="207"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="208"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="209"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="210"><ns0:left_operand><ns0:constant type="string">"Beta4("</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="211" super="false"><ns0:receiver><ns0:variable name="Alpha" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="212" super="false"><ns0:receiver><ns0:variable name="Beta" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="213" super="false"><ns0:receiver><ns0:variable name="LowerBound" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="214" super="false"><ns0:receiver><ns0:variable name="UpperBound" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">")"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:constant type="string">"Uninitialized Beta4"</ns0:constant></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="DiscreteUniform" native="false"><ns0:super_class>Distribution</ns0:super_class><ns0:instance_variable name="LowerBound" type="Integer" /><ns0:instance_variable name="IntervalLength" type="Integer" /><ns0:instance_variable name="Fixed" type="Boolean" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>DiscreteUniform</ns0:return_type><ns0:argument name="L" type="Object" /><ns0:argument name="U" type="Object" /><ns0:local_variable name="Temp" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="215" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:assignment variable_name="Fixed"><ns0:binary_operation operator="=" stmt_handle="216"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:variable name="U" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="217"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="218"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="219"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="220"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="221" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="222" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="223"><ns0:left_operand><ns0:variable name="U" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="224" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="225" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="226" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameters of Discrete Uniform distribution must be Integers"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="227"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:variable name="U" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Temp"><ns0:variable name="L" /></ns0:assignment><ns0:assignment variable_name="L"><ns0:variable name="U" /></ns0:assignment><ns0:assignment variable_name="U"><ns0:variable name="Temp" /></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="LowerBound"><ns0:variable name="L" /></ns0:assignment><ns0:assignment variable_name="IntervalLength"><ns0:binary_operation operator="+" stmt_handle="228"><ns0:left_operand><ns0:binary_operation operator="-" stmt_handle="229"><ns0:left_operand><ns0:variable name="U" /></ns0:left_operand><ns0:right_operand><ns0:variable name="L" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="230"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:if><ns0:condition><ns0:variable name="Fixed" /></ns0:condition><ns0:then><ns0:variable name="LowerBound" /></ns0:then><ns0:else><ns0:binary_operation operator="+" stmt_handle="231"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asInteger" stmt_handle="232" super="false"><ns0:receiver><ns0:data_method_call method_name="floor" stmt_handle="233" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="234"><ns0:left_operand><ns0:data_method_call method_name="random" stmt_handle="235" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="asReal" stmt_handle="236" super="false"><ns0:receiver><ns0:variable name="IntervalLength" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:else></ns0:if></ns0:return></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="237"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="238"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="239"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="240"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="241"><ns0:left_operand><ns0:constant type="string">"DiscreteUniform("</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="242" super="false"><ns0:receiver><ns0:variable name="LowerBound" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="243" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="244"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="245"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="IntervalLength" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">")"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:constant type="string">"Uninitialized Discrete Uniform"</ns0:constant></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Exponential" native="false"><ns0:super_class>Distribution</ns0:super_class><ns0:instance_variable name="Lambda" type="Real" /><ns0:data_method name="withParameter" native="false"><ns0:return_type>Exponential</ns0:return_type><ns0:argument name="L" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="246" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="247"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="248"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="249"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="250" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="251" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="252" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="253" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="254" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for Exponential distribution must be an Integer or Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="255" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="L"><ns0:data_method_call method_name="asReal" stmt_handle="256" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="257"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="258" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for Exponential distribution must be positive"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Lambda"><ns0:variable name="L" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Real</ns0:return_type><ns0:local_variable name="Sample" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="259"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Sample"><ns0:binary_operation operator="/" stmt_handle="260"><ns0:left_operand><ns0:unary_operation operator="-" stmt_handle="261"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="ln" stmt_handle="262" super="false"><ns0:receiver><ns0:data_method_call method_name="random" stmt_handle="263" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="Lambda" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="264"><ns0:left_operand><ns0:variable name="Sample" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:variable name="Sample" /></ns0:then><ns0:else><ns0:data_method_call method_name="sample" stmt_handle="265" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:else></ns0:if></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="266"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="267"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="268"><ns0:left_operand><ns0:constant type="string">"Exponential("</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="269" super="false"><ns0:receiver><ns0:variable name="Lambda" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">")"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:constant type="string">"Uninitialized Exponential Distribution"</ns0:constant></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Gamma" native="false"><ns0:super_class>Distribution</ns0:super_class><ns0:instance_variable name="Alpha" type="Real" /><ns0:instance_variable name="Beta" type="Real" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>Gamma</ns0:return_type><ns0:argument name="A" type="Object" /><ns0:argument name="B" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="270" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="271"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="272"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="273"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="274" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="275" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="276" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="277" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="278" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Shape parameter of Gamma distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="279"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="280"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="281"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="282" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="283" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="284" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="285" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="286" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Scale parameter of Gamma distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="287" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="A"><ns0:data_method_call method_name="asReal" stmt_handle="288" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="289" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="B"><ns0:data_method_call method_name="asReal" stmt_handle="290" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="291"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="292" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Shape parameter of Gamma distribution should be larger than 0.0"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="293"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="294" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Scale parameter of Gamma distribution should be larger than 0.0"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Alpha"><ns0:variable name="A" /></ns0:assignment><ns0:assignment variable_name="Beta"><ns0:variable name="B" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Real</ns0:return_type><ns0:local_variable name="T" type="Real" /><ns0:local_variable name="ainv" type="Real" /><ns0:local_variable name="e" type="Real" /><ns0:local_variable name="b" type="Real" /><ns0:local_variable name="p" type="Real" /><ns0:local_variable name="bbb" type="Real" /><ns0:local_variable name="ccc" type="Real" /><ns0:local_variable name="u" type="Real" /><ns0:local_variable name="u1" type="Real" /><ns0:local_variable name="u2" type="Real" /><ns0:local_variable name="v" type="Real" /><ns0:local_variable name="x" type="Real" /><ns0:local_variable name="z" type="Real" /><ns0:local_variable name="r" type="Real" /><ns0:local_variable name="MAGICCONST" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="295"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="MAGICCONST"><ns0:binary_operation operator="+" stmt_handle="296"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="ln" stmt_handle="297" super="false"><ns0:receiver><ns0:constant type="real">4.5</ns0:constant></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="T"><ns0:constant type="real">-1.0</ns0:constant></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="298"><ns0:left_operand><ns0:variable name="Alpha" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="ainv"><ns0:data_method_call method_name="sqrt" stmt_handle="299" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="300"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="301"><ns0:left_operand><ns0:constant type="real">2.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="Alpha" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="bbb"><ns0:binary_operation operator="-" stmt_handle="302"><ns0:left_operand><ns0:variable name="Alpha" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="log" stmt_handle="303" super="false"><ns0:receiver><ns0:constant type="real">4.0</ns0:constant></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="ccc"><ns0:binary_operation operator="+" stmt_handle="304"><ns0:left_operand><ns0:variable name="Alpha" /></ns0:left_operand><ns0:right_operand><ns0:variable name="ainv" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="305"><ns0:left_operand><ns0:variable name="T" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="u1"><ns0:data_method_call method_name="random" stmt_handle="306" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="307"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="308"><ns0:left_operand><ns0:constant type="real">1.0e-7</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="u1" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="309"><ns0:left_operand><ns0:variable name="u1" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.9999999</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="u2"><ns0:binary_operation operator="-" stmt_handle="310"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="random" stmt_handle="311" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="v"><ns0:binary_operation operator="/" stmt_handle="312"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="ln" stmt_handle="313" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="314"><ns0:left_operand><ns0:variable name="u1" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="315"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="u1" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="ainv" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="x"><ns0:binary_operation operator="*" stmt_handle="316"><ns0:left_operand><ns0:variable name="Alpha" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="exp" stmt_handle="317" super="false"><ns0:receiver><ns0:variable name="v" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="z"><ns0:binary_operation operator="*" stmt_handle="318"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="319"><ns0:left_operand><ns0:variable name="u1" /></ns0:left_operand><ns0:right_operand><ns0:variable name="u1" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="u2" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="r"><ns0:binary_operation operator="-" stmt_handle="320"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="321"><ns0:left_operand><ns0:variable name="bbb" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="322"><ns0:left_operand><ns0:variable name="ccc" /></ns0:left_operand><ns0:right_operand><ns0:variable name="v" /></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="x" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="323"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="324"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="325"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="326"><ns0:left_operand><ns0:variable name="r" /></ns0:left_operand><ns0:right_operand><ns0:variable name="MAGICCONST" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="327"><ns0:left_operand><ns0:constant type="real">4.5</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="z" /></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="328"><ns0:left_operand><ns0:variable name="r" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="ln" stmt_handle="329" super="false"><ns0:receiver><ns0:variable name="z" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="T"><ns0:binary_operation operator="*" stmt_handle="330"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Beta" /></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:then></ns0:if></ns0:sequence_of_expressions></ns0:then></ns0:if></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="331"><ns0:left_operand><ns0:variable name="Alpha" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="u"><ns0:data_method_call method_name="random" stmt_handle="332" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="333"><ns0:left_operand><ns0:variable name="u" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0e-7</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:assignment variable_name="u"><ns0:data_method_call method_name="random" stmt_handle="334" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:body></ns0:while><ns0:assignment variable_name="T"><ns0:binary_operation operator="*" stmt_handle="335"><ns0:left_operand><ns0:unary_operation operator="-" stmt_handle="336"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="ln" stmt_handle="337" super="false"><ns0:receiver><ns0:variable name="u" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="Beta" /></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="338"><ns0:left_operand><ns0:variable name="Alpha" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="339"><ns0:left_operand><ns0:variable name="T" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="u"><ns0:data_method_call method_name="random" stmt_handle="340" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="e"><ns0:data_method_call method_name="exp" stmt_handle="341" super="false"><ns0:receiver><ns0:constant type="real">1.0</ns0:constant></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="b"><ns0:binary_operation operator="/" stmt_handle="342"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="343"><ns0:left_operand><ns0:variable name="e" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Alpha" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="e" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="p"><ns0:binary_operation operator="*" stmt_handle="344"><ns0:left_operand><ns0:variable name="b" /></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="345"><ns0:left_operand><ns0:variable name="p" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="x"><ns0:data_method_call method_name="power" stmt_handle="350" super="false"><ns0:receiver><ns0:variable name="p" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="/" stmt_handle="351"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="Alpha" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:then><ns0:else><ns0:assignment variable_name="x"><ns0:unary_operation operator="-" stmt_handle="346"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="ln" stmt_handle="347" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="348"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="349"><ns0:left_operand><ns0:variable name="b" /></ns0:left_operand><ns0:right_operand><ns0:variable name="p" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="Alpha" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:assignment></ns0:else></ns0:if><ns0:assignment variable_name="u1"><ns0:data_method_call method_name="random" stmt_handle="352" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="353"><ns0:left_operand><ns0:variable name="p" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="358"><ns0:left_operand><ns0:variable name="u1" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="power" stmt_handle="359" super="false"><ns0:receiver><ns0:variable name="x" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="360"><ns0:left_operand><ns0:variable name="Alpha" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="T"><ns0:binary_operation operator="*" stmt_handle="361"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Beta" /></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:then></ns0:if></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="354"><ns0:left_operand><ns0:variable name="u1" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="exp" stmt_handle="355" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:unary_operation operator="-" stmt_handle="356"><ns0:operand><ns0:variable name="x" /></ns0:operand></ns0:unary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="T"><ns0:binary_operation operator="*" stmt_handle="357"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Beta" /></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:then></ns0:if></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:then></ns0:if><ns0:return><ns0:variable name="T" /></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="362"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="363"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="364"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="365"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="366"><ns0:left_operand><ns0:constant type="string">"Gamma("</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="367" super="false"><ns0:receiver><ns0:variable name="Alpha" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="368" super="false"><ns0:receiver><ns0:variable name="Beta" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">")"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:constant type="string">"Uninitialized Gamma Distribution"</ns0:constant></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Discrete" native="false"><ns0:super_class>Distribution</ns0:super_class><ns0:instance_variable name="Samples" type="Array" /><ns0:instance_variable name="LowerBounds" type="Array" /><ns0:instance_variable name="UpperBounds" type="Array" /><ns0:instance_variable name="Weights" type="Array" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>Discrete</ns0:return_type><ns0:argument name="Value" type="Object" /><ns0:argument name="Weight" type="Object" /><ns0:local_variable name="Index" type="Integer" /><ns0:local_variable name="Size" type="Integer" /><ns0:local_variable name="CumulativeWeight" type="Real" /><ns0:local_variable name="Total" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="369"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="370" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:assignment variable_name="Samples"><ns0:new data_class="Array" /></ns0:assignment><ns0:assignment variable_name="Weights"><ns0:new data_class="Array" /></ns0:assignment><ns0:assignment variable_name="LowerBounds"><ns0:new data_class="Array" /></ns0:assignment><ns0:assignment variable_name="UpperBounds"><ns0:new data_class="Array" /></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="371"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="372"><ns0:left_operand><ns0:variable name="Weight" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="373"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="374" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="375" super="false"><ns0:receiver><ns0:variable name="Weight" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="376" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="377" super="false"><ns0:receiver><ns0:variable name="Weight" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="378" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Weight parameter of Discrete distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="379" super="false"><ns0:receiver><ns0:variable name="Weight" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="Weight"><ns0:data_method_call method_name="asReal" stmt_handle="380" super="false"><ns0:receiver><ns0:variable name="Weight" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="381"><ns0:left_operand><ns0:data_method_call method_name="size" stmt_handle="382" super="false"><ns0:receiver><ns0:variable name="Samples" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="resize" stmt_handle="383" super="false"><ns0:receiver><ns0:variable name="Samples" /></ns0:receiver><ns0:argument><ns0:variable name="Size" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="resize" stmt_handle="384" super="false"><ns0:receiver><ns0:variable name="Weights" /></ns0:receiver><ns0:argument><ns0:variable name="Size" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="putAt" stmt_handle="385" super="false"><ns0:receiver><ns0:variable name="Samples" /></ns0:receiver><ns0:argument><ns0:variable name="Size" /></ns0:argument><ns0:argument><ns0:variable name="Value" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="putAt" stmt_handle="386" super="false"><ns0:receiver><ns0:variable name="Weights" /></ns0:receiver><ns0:argument><ns0:variable name="Size" /></ns0:argument><ns0:argument><ns0:variable name="Weight" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="resize" stmt_handle="387" super="false"><ns0:receiver><ns0:variable name="LowerBounds" /></ns0:receiver><ns0:argument><ns0:variable name="Size" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="resize" stmt_handle="388" super="false"><ns0:receiver><ns0:variable name="UpperBounds" /></ns0:receiver><ns0:argument><ns0:variable name="Size" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Index"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:assignment variable_name="Total"><ns0:constant type="real">0.0</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="389"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="Total"><ns0:binary_operation operator="+" stmt_handle="390"><ns0:left_operand><ns0:variable name="Total" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="at" stmt_handle="391" super="false"><ns0:receiver><ns0:variable name="Weights" /></ns0:receiver><ns0:argument><ns0:variable name="Index" /></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="Index"><ns0:binary_operation operator="+" stmt_handle="392"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:assignment variable_name="Index"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:assignment variable_name="CumulativeWeight"><ns0:constant type="real">0.0</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="393"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="putAt" stmt_handle="394" super="false"><ns0:receiver><ns0:variable name="LowerBounds" /></ns0:receiver><ns0:argument><ns0:variable name="Index" /></ns0:argument><ns0:argument><ns0:binary_operation operator="/" stmt_handle="395"><ns0:left_operand><ns0:variable name="CumulativeWeight" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Total" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="CumulativeWeight"><ns0:binary_operation operator="+" stmt_handle="396"><ns0:left_operand><ns0:variable name="CumulativeWeight" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="at" stmt_handle="397" super="false"><ns0:receiver><ns0:variable name="Weights" /></ns0:receiver><ns0:argument><ns0:variable name="Index" /></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="putAt" stmt_handle="398" super="false"><ns0:receiver><ns0:variable name="UpperBounds" /></ns0:receiver><ns0:argument><ns0:variable name="Index" /></ns0:argument><ns0:argument><ns0:binary_operation operator="/" stmt_handle="399"><ns0:left_operand><ns0:variable name="CumulativeWeight" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Total" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Index"><ns0:binary_operation operator="+" stmt_handle="400"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Object</ns0:return_type><ns0:local_variable name="Sample" type="Real" /><ns0:local_variable name="Result" type="Object" /><ns0:local_variable name="Index" type="Integer" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="401"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Sample"><ns0:data_method_call method_name="random" stmt_handle="402" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Index"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="403"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="404"><ns0:left_operand><ns0:variable name="Result" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="405"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="size" stmt_handle="406" super="false"><ns0:receiver><ns0:variable name="Samples" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="407"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="408"><ns0:left_operand><ns0:data_method_call method_name="at" stmt_handle="409" super="false"><ns0:receiver><ns0:variable name="LowerBounds" /></ns0:receiver><ns0:argument><ns0:variable name="Index" /></ns0:argument></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Sample" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="410"><ns0:left_operand><ns0:variable name="Sample" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="at" stmt_handle="411" super="false"><ns0:receiver><ns0:variable name="UpperBounds" /></ns0:receiver><ns0:argument><ns0:variable name="Index" /></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="Result"><ns0:data_method_call method_name="at" stmt_handle="413" super="false"><ns0:receiver><ns0:variable name="Samples" /></ns0:receiver><ns0:argument><ns0:variable name="Index" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:then><ns0:else><ns0:assignment variable_name="Index"><ns0:binary_operation operator="+" stmt_handle="412"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:else></ns0:if></ns0:body></ns0:while><ns0:return><ns0:variable name="Result" /></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="PrintOut" type="String" /><ns0:local_variable name="Index" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="414"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Discrete Distribution\n"</ns0:constant></ns0:assignment><ns0:assignment variable_name="Index"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="415"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="size" stmt_handle="416" super="false"><ns0:receiver><ns0:variable name="Samples" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="PrintOut"><ns0:binary_operation operator="+" stmt_handle="417"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="418"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="419"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="420"><ns0:left_operand><ns0:variable name="PrintOut" /></ns0:left_operand><ns0:right_operand><ns0:constant type="string">"Value: "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="421" super="false"><ns0:receiver><ns0:data_method_call method_name="at" stmt_handle="422" super="false"><ns0:receiver><ns0:variable name="Samples" /></ns0:receiver><ns0:argument><ns0:variable name="Index" /></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">" Probability: "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="cr" stmt_handle="423" super="false"><ns0:receiver><ns0:data_method_call method_name="printString" stmt_handle="424" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="425"><ns0:left_operand><ns0:data_method_call method_name="at" stmt_handle="426" super="false"><ns0:receiver><ns0:variable name="UpperBounds" /></ns0:receiver><ns0:argument><ns0:variable name="Index" /></ns0:argument></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="at" stmt_handle="427" super="false"><ns0:receiver><ns0:variable name="LowerBounds" /></ns0:receiver><ns0:argument><ns0:variable name="Index" /></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="Index"><ns0:binary_operation operator="+" stmt_handle="428"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Uninitialized Discrete Distribution"</ns0:constant></ns0:assignment></ns0:else></ns0:if><ns0:return><ns0:variable name="PrintOut" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Normal" native="false"><ns0:super_class>Distribution</ns0:super_class><ns0:instance_variable name="Mean" type="Real" /><ns0:instance_variable name="StandardDeviation" type="Real" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>Normal</ns0:return_type><ns0:argument name="M" type="Object" /><ns0:argument name="V" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="429" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="430"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="431"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="432"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="433" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="434" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="435" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="436" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="437" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Mean parameter of Normal distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="438"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="439"><ns0:left_operand><ns0:variable name="V" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="440"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="441" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="442" super="false"><ns0:receiver><ns0:variable name="V" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="443" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="444" super="false"><ns0:receiver><ns0:variable name="V" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="445" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Variance parameter of Normal distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="446" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="M"><ns0:data_method_call method_name="asReal" stmt_handle="447" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="448" super="false"><ns0:receiver><ns0:variable name="V" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="V"><ns0:data_method_call method_name="asReal" stmt_handle="449" super="false"><ns0:receiver><ns0:variable name="V" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="Mean"><ns0:variable name="M" /></ns0:assignment><ns0:assignment variable_name="StandardDeviation"><ns0:data_method_call method_name="sqrt" stmt_handle="450" super="false"><ns0:receiver><ns0:variable name="V" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Real</ns0:return_type><ns0:local_variable name="S" type="Real" /><ns0:local_variable name="U" type="Real" /><ns0:local_variable name="X" type="Real" /><ns0:local_variable name="Y" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="451"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="S"><ns0:constant type="real">1.0</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&gt;=" stmt_handle="452"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="X"><ns0:binary_operation operator="-" stmt_handle="453"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="454"><ns0:left_operand><ns0:constant type="real">2.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="random" stmt_handle="455" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="Y"><ns0:binary_operation operator="-" stmt_handle="456"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="457"><ns0:left_operand><ns0:constant type="real">2.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="random" stmt_handle="458" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="S"><ns0:binary_operation operator="+" stmt_handle="459"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="460"><ns0:left_operand><ns0:variable name="X" /></ns0:left_operand><ns0:right_operand><ns0:variable name="X" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="461"><ns0:left_operand><ns0:variable name="Y" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Y" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:assignment variable_name="U"><ns0:data_method_call method_name="sqrt" stmt_handle="462" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="463"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="464"><ns0:left_operand><ns0:constant type="real">-2.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="ln" stmt_handle="465" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="S" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:return><ns0:binary_operation operator="+" stmt_handle="466"><ns0:left_operand><ns0:variable name="Mean" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="467"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="468"><ns0:left_operand><ns0:variable name="X" /></ns0:left_operand><ns0:right_operand><ns0:variable name="U" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="StandardDeviation" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="469"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="470"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="471"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="472"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="473"><ns0:left_operand><ns0:constant type="string">"Normal("</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="474" super="false"><ns0:receiver><ns0:variable name="Mean" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="475" super="false"><ns0:receiver><ns0:data_method_call method_name="sqr" stmt_handle="476" super="false"><ns0:receiver><ns0:variable name="StandardDeviation" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">")"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:constant type="string">"Uninitialized Normal Distribution"</ns0:constant></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="PERT" native="false"><ns0:super_class>Beta4</ns0:super_class><ns0:instance_variable name="Mode" type="Real" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>PERT</ns0:return_type><ns0:argument name="L" type="Object" /><ns0:argument name="M" type="Object" /><ns0:argument name="U" type="Object" /><ns0:local_variable name="Mean" type="Real" /><ns0:local_variable name="Std" type="Real" /><ns0:local_variable name="Temp" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="477" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="478"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="479"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="480"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="481" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="482" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="483" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="484" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="485" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Lower Bound for PERT distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="486"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="487"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="488"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="489" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="490" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="491" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="492" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="493" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Mode Bound for PERT distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="494"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="495"><ns0:left_operand><ns0:variable name="U" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="496"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="497" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="498" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="499" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="500" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="501" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Upper Bound for PERT distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="502" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="L"><ns0:data_method_call method_name="asReal" stmt_handle="503" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="504" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="M"><ns0:data_method_call method_name="asReal" stmt_handle="505" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="506" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="U"><ns0:data_method_call method_name="asReal" stmt_handle="507" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="LowerBound"><ns0:variable name="L" /></ns0:assignment><ns0:assignment variable_name="UpperBound"><ns0:variable name="U" /></ns0:assignment><ns0:assignment variable_name="Mode"><ns0:variable name="M" /></ns0:assignment><ns0:assignment variable_name="Fixed"><ns0:binary_operation operator="=" stmt_handle="508"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:data_method_call method_name="not" stmt_handle="509" super="false"><ns0:receiver><ns0:variable name="Fixed" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="510"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Temp"><ns0:variable name="LowerBound" /></ns0:assignment><ns0:assignment variable_name="LowerBound"><ns0:variable name="UpperBound" /></ns0:assignment><ns0:assignment variable_name="UpperBound"><ns0:variable name="Temp" /></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="511"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="512"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Mode" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="513"><ns0:left_operand><ns0:variable name="Mode" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="514" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameters of PERT distribution do not satisfy LowerBound &lt; Mode &lt; UpperBound or LowerBound = UpperBound"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Mean"><ns0:binary_operation operator="/" stmt_handle="515"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="516"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="517"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="518"><ns0:left_operand><ns0:constant type="real">4.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="Mode" /></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">6.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="Std"><ns0:binary_operation operator="/" stmt_handle="519"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="520"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">6.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="Alpha"><ns0:binary_operation operator="*" stmt_handle="521"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="522"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="523"><ns0:left_operand><ns0:variable name="Mean" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="524"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="525"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="526"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="527"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="528"><ns0:left_operand><ns0:variable name="Mean" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="529"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Mean" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="sqr" stmt_handle="530" super="false"><ns0:receiver><ns0:variable name="Std" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="Beta"><ns0:binary_operation operator="*" stmt_handle="531"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="532"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="533"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Mean" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="534"><ns0:left_operand><ns0:variable name="Mean" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="Alpha" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="GammaA"><ns0:data_method_call method_name="withParameters" stmt_handle="535" super="false"><ns0:receiver><ns0:new data_class="Gamma" /></ns0:receiver><ns0:argument><ns0:variable name="Alpha" /></ns0:argument><ns0:argument><ns0:constant type="real">1.0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="GammaB"><ns0:data_method_call method_name="withParameters" stmt_handle="536" super="false"><ns0:receiver><ns0:new data_class="Gamma" /></ns0:receiver><ns0:argument><ns0:variable name="Beta" /></ns0:argument><ns0:argument><ns0:constant type="real">1.0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="537"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="538"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="539"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="540"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="541"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="542"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="543"><ns0:left_operand><ns0:constant type="string">"PERT("</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="544" super="false"><ns0:receiver><ns0:variable name="LowerBound" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="545" super="false"><ns0:receiver><ns0:variable name="Mode" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="546" super="false"><ns0:receiver><ns0:variable name="UpperBound" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">")"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:constant type="string">"Uninitialized PERT Distribution"</ns0:constant></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Triangle" native="false"><ns0:super_class>Distribution</ns0:super_class><ns0:instance_variable name="LowerBound" type="Real" /><ns0:instance_variable name="Mode" type="Real" /><ns0:instance_variable name="UpperBound" type="Real" /><ns0:instance_variable name="Fixed" type="Boolean" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>Triangle</ns0:return_type><ns0:argument name="L" type="Object" /><ns0:argument name="M" type="Object" /><ns0:argument name="U" type="Object" /><ns0:local_variable name="Temp" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="547" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="548"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="549"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="550"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="551" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="552" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="553" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="554" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="555" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Lower Bound for Triangle distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="556"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="557"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="558"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="559" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="560" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="561" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="562" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="563" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Mode Bound for Triangle distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="564"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="565"><ns0:left_operand><ns0:variable name="U" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="566"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="567" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="568" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="569" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="570" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="571" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Upper Bound for Triangle distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="572" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="L"><ns0:data_method_call method_name="asReal" stmt_handle="573" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="574" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="M"><ns0:data_method_call method_name="asReal" stmt_handle="575" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="576" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="U"><ns0:data_method_call method_name="asReal" stmt_handle="577" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="LowerBound"><ns0:variable name="L" /></ns0:assignment><ns0:assignment variable_name="UpperBound"><ns0:variable name="U" /></ns0:assignment><ns0:assignment variable_name="Mode"><ns0:variable name="M" /></ns0:assignment><ns0:assignment variable_name="Fixed"><ns0:binary_operation operator="=" stmt_handle="578"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:data_method_call method_name="not" stmt_handle="579" super="false"><ns0:receiver><ns0:variable name="Fixed" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="580"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Temp"><ns0:variable name="LowerBound" /></ns0:assignment><ns0:assignment variable_name="LowerBound"><ns0:variable name="UpperBound" /></ns0:assignment><ns0:assignment variable_name="UpperBound"><ns0:variable name="Temp" /></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="581"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="582"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Mode" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="583"><ns0:left_operand><ns0:variable name="Mode" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="584" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameters of Triangle distribution do not satisfy LowerBound &lt; Mode &lt; UpperBound or LowerBound = UpperBound"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Real</ns0:return_type><ns0:local_variable name="Sample" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="585"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:if><ns0:condition><ns0:variable name="Fixed" /></ns0:condition><ns0:then><ns0:return><ns0:variable name="LowerBound" /></ns0:return></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="Sample"><ns0:data_method_call method_name="random" stmt_handle="586" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="587"><ns0:left_operand><ns0:variable name="Sample" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="/" stmt_handle="588"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="589"><ns0:left_operand><ns0:variable name="Mode" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="590"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:binary_operation operator="+" stmt_handle="598"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="sqrt" stmt_handle="599" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="600"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="601"><ns0:left_operand><ns0:variable name="Sample" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="602"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="603"><ns0:left_operand><ns0:variable name="Mode" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:then><ns0:else><ns0:return><ns0:binary_operation operator="-" stmt_handle="591"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="sqrt" stmt_handle="592" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="593"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="594"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="595"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="Sample" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="596"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="597"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Mode" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:else></ns0:if></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="604"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="605"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="606"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="607"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="608"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="609"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="610"><ns0:left_operand><ns0:constant type="string">"Triangle("</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="611" super="false"><ns0:receiver><ns0:variable name="LowerBound" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="612" super="false"><ns0:receiver><ns0:variable name="Mode" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="613" super="false"><ns0:receiver><ns0:variable name="UpperBound" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">")"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:constant type="string">"Uninitialized Trangle Distribution"</ns0:constant></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Uniform" native="false"><ns0:super_class>Distribution</ns0:super_class><ns0:instance_variable name="LowerBound" type="Real" /><ns0:instance_variable name="IntervalLength" type="Real" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>Uniform</ns0:return_type><ns0:argument name="L" type="Object" /><ns0:argument name="U" type="Object" /><ns0:local_variable name="Temp" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="614" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="615"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="616"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="617"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="618" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="619" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="620" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="621" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="622" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Lower Bound for Uniform distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="623"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="624"><ns0:left_operand><ns0:variable name="U" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="625"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="626" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="627" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="628" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="629" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="630" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Upper Bound for Uniform distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="631" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="L"><ns0:data_method_call method_name="asReal" stmt_handle="632" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="633" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="U"><ns0:data_method_call method_name="asReal" stmt_handle="634" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="635"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:variable name="U" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Temp"><ns0:variable name="L" /></ns0:assignment><ns0:assignment variable_name="L"><ns0:variable name="U" /></ns0:assignment><ns0:assignment variable_name="U"><ns0:variable name="Temp" /></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="LowerBound"><ns0:variable name="L" /></ns0:assignment><ns0:assignment variable_name="IntervalLength"><ns0:binary_operation operator="-" stmt_handle="636"><ns0:left_operand><ns0:variable name="U" /></ns0:left_operand><ns0:right_operand><ns0:variable name="L" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Real</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="637"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="638"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="639"><ns0:left_operand><ns0:data_method_call method_name="random" stmt_handle="640" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="IntervalLength" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:nil /></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="641"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="642"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="643"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="644"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="645"><ns0:left_operand><ns0:constant type="string">"Uniform("</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="646" super="false"><ns0:receiver><ns0:variable name="LowerBound" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="647" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="648"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="IntervalLength" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">")"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:constant type="string">"Uninitialized Uniform Distribution"</ns0:constant></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Weibull" native="false"><ns0:super_class>Distribution</ns0:super_class><ns0:instance_variable name="Shape" type="Real" /><ns0:instance_variable name="Scale" type="Real" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>Weibull</ns0:return_type><ns0:argument name="K" type="Object" /><ns0:argument name="L" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="initialise" stmt_handle="649" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="650"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="651"><ns0:left_operand><ns0:variable name="K" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="652"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="653" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="654" super="false"><ns0:receiver><ns0:variable name="K" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="655" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="656" super="false"><ns0:receiver><ns0:variable name="K" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="657" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Scale parameter for Weibull distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="658"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="659"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="660"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="661" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="662" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="663" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="664" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="665" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Shape parameter for Weibull distribution must be an Integer or a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="666" super="false"><ns0:receiver><ns0:variable name="K" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="K"><ns0:data_method_call method_name="asReal" stmt_handle="667" super="false"><ns0:receiver><ns0:variable name="K" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="668" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="L"><ns0:data_method_call method_name="asReal" stmt_handle="669" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="670"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="671"><ns0:left_operand><ns0:variable name="K" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="672"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="673" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameters for Weibull distribution must be larger than 0.0"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Scale"><ns0:binary_operation operator="/" stmt_handle="674"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="gamma" stmt_handle="675" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="676"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="/" stmt_handle="677"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="K" /></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="Shape"><ns0:variable name="K" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Real</ns0:return_type><ns0:local_variable name="Sample" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="678"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Sample"><ns0:binary_operation operator="*" stmt_handle="679"><ns0:left_operand><ns0:data_method_call method_name="exp" stmt_handle="680" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="681"><ns0:left_operand><ns0:data_method_call method_name="ln" stmt_handle="682" super="false"><ns0:receiver><ns0:unary_operation operator="-" stmt_handle="683"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="ln" stmt_handle="684" super="false"><ns0:receiver><ns0:data_method_call method_name="random" stmt_handle="685" super="false"><ns0:receiver><ns0:variable name="Random" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Shape" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Scale" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="686"><ns0:left_operand><ns0:variable name="Sample" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:variable name="Sample" /></ns0:return></ns0:then><ns0:else><ns0:return><ns0:data_method_call method_name="sample" stmt_handle="687" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="688"><ns0:left_operand><ns0:variable name="Random" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:binary_operation operator="+" stmt_handle="689"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="690"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="691"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="692"><ns0:left_operand><ns0:constant type="string">"Weibull("</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="693" super="false"><ns0:receiver><ns0:variable name="Shape" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="694" super="false"><ns0:receiver><ns0:variable name="Scale" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">")"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:then><ns0:else><ns0:constant type="string">"Uninitialized Weibull Distribution"</ns0:constant></ns0:else></ns0:if></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="gamma" native="false"><ns0:return_type>Real</ns0:return_type><ns0:argument name="z" type="Real" /><ns0:local_variable name="pi" type="Real" /><ns0:local_variable name="t" type="Real" /><ns0:local_variable name="x" type="Real" /><ns0:local_variable name="g" type="Integer" /><ns0:local_variable name="i" type="Integer" /><ns0:local_variable name="lanczos_coef" type="Array" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="g"><ns0:constant type="integer">7</ns0:constant></ns0:assignment><ns0:assignment variable_name="lanczos_coef"><ns0:data_method_call method_name="putAt" stmt_handle="695" super="false"><ns0:receiver><ns0:data_method_call method_name="putAt" stmt_handle="696" super="false"><ns0:receiver><ns0:data_method_call method_name="putAt" stmt_handle="697" super="false"><ns0:receiver><ns0:data_method_call method_name="putAt" stmt_handle="698" super="false"><ns0:receiver><ns0:data_method_call method_name="putAt" stmt_handle="699" super="false"><ns0:receiver><ns0:data_method_call method_name="putAt" stmt_handle="700" super="false"><ns0:receiver><ns0:data_method_call method_name="putAt" stmt_handle="701" super="false"><ns0:receiver><ns0:data_method_call method_name="putAt" stmt_handle="702" super="false"><ns0:receiver><ns0:data_method_call method_name="putAt" stmt_handle="703" super="false"><ns0:receiver><ns0:data_method_call method_name="resize" stmt_handle="704" super="false"><ns0:receiver><ns0:new data_class="Array" /></ns0:receiver><ns0:argument><ns0:constant type="integer">9</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">1</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="real">0.99999999999980993</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">2</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="real">676.5203681218851</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">3</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="real">-1259.1392167224028</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">4</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="real">771.32342877765313</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">5</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="real">-176.61502916214059</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">6</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="real">12.507343278686905</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">7</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="real">-0.13857109526572012</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">8</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="real">9.9843695780195716e-6</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">9</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="real">1.5056327351493116e-7</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="pi"><ns0:constant type="real">3.14159265358979323846264338327950288419716939937510</ns0:constant></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="705"><ns0:left_operand><ns0:variable name="z" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.5</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:binary_operation operator="*" stmt_handle="729"><ns0:left_operand><ns0:binary_operation operator="/" stmt_handle="730"><ns0:left_operand><ns0:variable name="pi" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="sin" stmt_handle="731" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="732"><ns0:left_operand><ns0:variable name="pi" /></ns0:left_operand><ns0:right_operand><ns0:variable name="z" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="gamma" stmt_handle="733" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="734"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="z" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="z"><ns0:binary_operation operator="-" stmt_handle="706"><ns0:left_operand><ns0:variable name="z" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="i"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:assignment variable_name="x"><ns0:data_method_call method_name="at" stmt_handle="707" super="false"><ns0:receiver><ns0:variable name="lanczos_coef" /></ns0:receiver><ns0:argument><ns0:constant type="integer">1</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="708"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="+" stmt_handle="709"><ns0:left_operand><ns0:variable name="g" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">2</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="x"><ns0:binary_operation operator="+" stmt_handle="710"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="/" stmt_handle="711"><ns0:left_operand><ns0:data_method_call method_name="at" stmt_handle="712" super="false"><ns0:receiver><ns0:variable name="lanczos_coef" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="713"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="714"><ns0:left_operand><ns0:variable name="z" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asReal" stmt_handle="715" super="false"><ns0:receiver><ns0:variable name="i" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="i"><ns0:binary_operation operator="+" stmt_handle="716"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:assignment variable_name="t"><ns0:binary_operation operator="+" stmt_handle="717"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="718"><ns0:left_operand><ns0:variable name="z" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asReal" stmt_handle="719" super="false"><ns0:receiver><ns0:variable name="g" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.5</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:binary_operation operator="*" stmt_handle="720"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="721"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="722"><ns0:left_operand><ns0:data_method_call method_name="sqrt" stmt_handle="723" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="724"><ns0:left_operand><ns0:constant type="real">2.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="pi" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="power" stmt_handle="725" super="false"><ns0:receiver><ns0:variable name="t" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="726"><ns0:left_operand><ns0:variable name="z" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.5</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="exp" stmt_handle="727" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:unary_operation operator="-" stmt_handle="728"><ns0:operand><ns0:variable name="t" /></ns0:operand></ns0:unary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="x" /></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:sequence_of_expressions></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Histogram" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="NumberOfSamples" type="Integer" /><ns0:instance_variable name="NumberOfBins" type="Integer" /><ns0:instance_variable name="Histogram" type="Array" /><ns0:instance_variable name="Minimum" type="Real" /><ns0:instance_variable name="Maximum" type="Real" /><ns0:instance_variable name="IntervalSize" type="Real" /><ns0:instance_variable name="Start" type="Real" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>Histogram</ns0:return_type><ns0:argument name="L" type="Object" /><ns0:argument name="U" type="Object" /><ns0:argument name="N" type="Integer" /><ns0:local_variable name="Temp" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="735"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="736"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="737"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="738"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="739"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="740" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="741" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="742" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="743" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="744"><ns0:left_operand><ns0:variable name="U" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="745"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="746" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="747" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="748" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="749" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="750" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bounds for Histogram must be Integers or Reals"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="751" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="L"><ns0:data_method_call method_name="asReal" stmt_handle="752" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="753" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="U"><ns0:data_method_call method_name="asReal" stmt_handle="754" super="false"><ns0:receiver><ns0:variable name="U" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="755"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="756"><ns0:left_operand><ns0:variable name="N" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="757" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="758" super="false"><ns0:receiver><ns0:variable name="N" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="759" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Number of bins for Histogram must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Minimum"><ns0:variable name="L" /></ns0:assignment><ns0:assignment variable_name="Maximum"><ns0:variable name="U" /></ns0:assignment><ns0:assignment variable_name="NumberOfBins"><ns0:variable name="N" /></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;=" stmt_handle="760"><ns0:left_operand><ns0:variable name="Minimum" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Maximum" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Temp"><ns0:variable name="Minimum" /></ns0:assignment><ns0:assignment variable_name="Minimum"><ns0:variable name="Maximum" /></ns0:assignment><ns0:assignment variable_name="Maximum"><ns0:variable name="Temp" /></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="761"><ns0:left_operand><ns0:variable name="NumberOfBins" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">2</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="762" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Number Of Slots for Histogram must be larger than 2"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Histogram"><ns0:data_method_call method_name="putAll" stmt_handle="763" super="false"><ns0:receiver><ns0:data_method_call method_name="resize" stmt_handle="764" super="false"><ns0:receiver><ns0:new data_class="Array" /></ns0:receiver><ns0:argument><ns0:variable name="NumberOfBins" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="NumberOfSamples"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:assignment variable_name="IntervalSize"><ns0:binary_operation operator="/" stmt_handle="765"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="766"><ns0:left_operand><ns0:variable name="Maximum" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Minimum" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asReal" stmt_handle="767" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="768"><ns0:left_operand><ns0:variable name="NumberOfBins" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="Start"><ns0:binary_operation operator="-" stmt_handle="769"><ns0:left_operand><ns0:variable name="Minimum" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="770"><ns0:left_operand><ns0:constant type="real">0.5</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="IntervalSize" /></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sample" native="false"><ns0:return_type>Histogram</ns0:return_type><ns0:argument name="Value" type="Real" /><ns0:local_variable name="i" type="Integer" /><ns0:local_variable name="b" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="NumberOfSamples"><ns0:binary_operation operator="+" stmt_handle="771"><ns0:left_operand><ns0:variable name="NumberOfSamples" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="772"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="773"><ns0:left_operand><ns0:variable name="Value" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Minimum" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="774"><ns0:left_operand><ns0:variable name="Value" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Maximum" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="b"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="i"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="775"><ns0:left_operand><ns0:variable name="b" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="776"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:variable name="NumberOfBins" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="777"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="778"><ns0:left_operand><ns0:variable name="Value" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="+" stmt_handle="779"><ns0:left_operand><ns0:variable name="Start" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="780"><ns0:left_operand><ns0:data_method_call method_name="asReal" stmt_handle="781" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="782"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="IntervalSize" /></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="783"><ns0:left_operand><ns0:variable name="Value" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="+" stmt_handle="784"><ns0:left_operand><ns0:variable name="Start" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="785"><ns0:left_operand><ns0:data_method_call method_name="asReal" stmt_handle="786" super="false"><ns0:receiver><ns0:variable name="i" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="IntervalSize" /></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="putAt" stmt_handle="787" super="false"><ns0:receiver><ns0:variable name="Histogram" /></ns0:receiver><ns0:argument><ns0:variable name="i" /></ns0:argument><ns0:argument><ns0:binary_operation operator="+" stmt_handle="788"><ns0:left_operand><ns0:data_method_call method_name="at" stmt_handle="789" super="false"><ns0:receiver><ns0:variable name="Histogram" /></ns0:receiver><ns0:argument><ns0:variable name="i" /></ns0:argument></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="b"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="i"><ns0:binary_operation operator="+" stmt_handle="790"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="i" type="Integer" /><ns0:local_variable name="Result" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Result"><ns0:constant type="string">"Probability\t\tSample Value Range\n"</ns0:constant></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="791"><ns0:left_operand><ns0:variable name="NumberOfSamples" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="i"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="792"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:variable name="NumberOfBins" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="Result"><ns0:binary_operation operator="+" stmt_handle="793"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="794"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="795"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="796"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="797"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="798"><ns0:left_operand><ns0:variable name="Result" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="799" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="800"><ns0:left_operand><ns0:data_method_call method_name="asReal" stmt_handle="801" super="false"><ns0:receiver><ns0:data_method_call method_name="at" stmt_handle="802" super="false"><ns0:receiver><ns0:variable name="Histogram" /></ns0:receiver><ns0:argument><ns0:variable name="i" /></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asReal" stmt_handle="803" super="false"><ns0:receiver><ns0:variable name="NumberOfSamples" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">"\t["</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="804" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="805"><ns0:left_operand><ns0:variable name="Start" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="806"><ns0:left_operand><ns0:data_method_call method_name="asReal" stmt_handle="807" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="808"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="IntervalSize" /></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">", "</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="809" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="810"><ns0:left_operand><ns0:variable name="Start" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="811"><ns0:left_operand><ns0:data_method_call method_name="asReal" stmt_handle="812" super="false"><ns0:receiver><ns0:variable name="i" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="IntervalSize" /></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">"]\n"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="i"><ns0:binary_operation operator="+" stmt_handle="813"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:variable name="Result" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Packet" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="Source" type="Integer" /><ns0:instance_variable name="Destination" type="Integer" /><ns0:instance_variable name="EntranceTime" type="Real" /><ns0:instance_variable name="Number" type="Integer" /><ns0:data_method name="getDestination" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="Destination" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="getEntranceTime" native="false"><ns0:return_type>Real</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="EntranceTime" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="getNumber" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="Number" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="getSource" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="Source" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:binary_operation operator="+" stmt_handle="814"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="815"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="816"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="817"><ns0:left_operand><ns0:data_method_call method_name="printString" stmt_handle="818" super="false"><ns0:receiver><ns0:variable name="Number" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="string">":"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="819" super="false"><ns0:receiver><ns0:variable name="Source" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">"-&gt;"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="820" super="false"><ns0:receiver><ns0:variable name="Destination" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="setDestination" native="false"><ns0:return_type>Packet</ns0:return_type><ns0:argument name="d" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Destination"><ns0:variable name="d" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setEntranceTime" native="false"><ns0:return_type>Packet</ns0:return_type><ns0:argument name="t" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="EntranceTime"><ns0:variable name="t" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setNumber" native="false"><ns0:return_type>Packet</ns0:return_type><ns0:argument name="n" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Number"><ns0:variable name="n" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setSource" native="false"><ns0:return_type>Packet</ns0:return_type><ns0:argument name="s" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Source"><ns0:variable name="s" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="NIMonitors" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="Latency" type="LongRunSampleAverage" /><ns0:instance_variable name="NumberOfCollectedLatencyRewards" type="Integer" /><ns0:instance_variable name="NumberOfCollectedSendRateRewards" type="Integer" /><ns0:instance_variable name="SendRate" type="LongRunTimeAverage" /><ns0:data_method name="accurate" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:return><ns0:binary_operation operator="&amp;" stmt_handle="821"><ns0:left_operand><ns0:data_method_call method_name="accurate" stmt_handle="822" super="false"><ns0:receiver><ns0:variable name="Latency" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="accurate" stmt_handle="823" super="false"><ns0:receiver><ns0:variable name="SendRate" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="init" native="false"><ns0:return_type>NIMonitors</ns0:return_type><ns0:argument name="MyID" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="NumberOfCollectedLatencyRewards"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:assignment variable_name="NumberOfCollectedSendRateRewards"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:assignment variable_name="Latency"><ns0:data_method_call method_name="logTo" stmt_handle="824" super="false"><ns0:receiver><ns0:data_method_call method_name="setBatchSize" stmt_handle="825" super="false"><ns0:receiver><ns0:data_method_call method_name="withParameters" stmt_handle="826" super="false"><ns0:receiver><ns0:new data_class="LongRunSampleAverage" /></ns0:receiver><ns0:argument><ns0:constant type="real">0.95</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="real">0.95</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">1000</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="827"><ns0:left_operand><ns0:constant type="string">"Latency"</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="828" super="false"><ns0:receiver><ns0:variable name="MyID" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="SendRate"><ns0:data_method_call method_name="logTo" stmt_handle="829" super="false"><ns0:receiver><ns0:data_method_call method_name="setBatchSize" stmt_handle="830" super="false"><ns0:receiver><ns0:data_method_call method_name="withParameters" stmt_handle="831" super="false"><ns0:receiver><ns0:new data_class="LongRunTimeAverage" /></ns0:receiver><ns0:argument><ns0:constant type="real">0.95</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="real">0.90</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">1000</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="832"><ns0:left_operand><ns0:constant type="string">"SendRate"</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="833" super="false"><ns0:receiver><ns0:variable name="MyID" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="log" native="false"><ns0:return_type>NIMonitors</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="log" stmt_handle="834" super="false"><ns0:receiver><ns0:variable name="SendRate" /></ns0:receiver></ns0:data_method_call><ns0:data_method_call method_name="log" stmt_handle="835" super="false"><ns0:receiver><ns0:variable name="Latency" /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="PrintOut" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="PrintOut"><ns0:binary_operation operator="+" stmt_handle="836"><ns0:left_operand><ns0:data_method_call method_name="cr" stmt_handle="837" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for the actual Send Rate at the sending part of the Network Interface:"</ns0:constant></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="cr" stmt_handle="838" super="false"><ns0:receiver><ns0:data_method_call method_name="cr" stmt_handle="839" super="false"><ns0:receiver><ns0:data_method_call method_name="printStatistics" stmt_handle="840" super="false"><ns0:receiver><ns0:variable name="SendRate" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="PrintOut"><ns0:binary_operation operator="+" stmt_handle="841"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="842"><ns0:left_operand><ns0:variable name="PrintOut" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="cr" stmt_handle="843" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for packet Latency at the receiving side of the Network Interface:"</ns0:constant></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printStatistics" stmt_handle="844" super="false"><ns0:receiver><ns0:variable name="Latency" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:variable name="PrintOut" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardLatency" native="false"><ns0:return_type>NIMonitors</ns0:return_type><ns0:argument name="l" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="rewardBM" stmt_handle="845" super="false"><ns0:receiver><ns0:variable name="Latency" /></ns0:receiver><ns0:argument><ns0:variable name="l" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="NumberOfCollectedLatencyRewards"><ns0:binary_operation operator="+" stmt_handle="846"><ns0:left_operand><ns0:variable name="NumberOfCollectedLatencyRewards" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="847"><ns0:left_operand><ns0:data_method_call method_name="modulo" stmt_handle="848" super="false"><ns0:receiver><ns0:variable name="NumberOfCollectedLatencyRewards" /></ns0:receiver><ns0:argument><ns0:constant type="integer">1000</ns0:constant></ns0:argument></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="log" stmt_handle="849" super="false"><ns0:receiver><ns0:variable name="Latency" /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardSendRate" native="false"><ns0:return_type>NIMonitors</ns0:return_type><ns0:argument name="r" type="Real" /><ns0:argument name="t" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="rewardBM" stmt_handle="850" super="false"><ns0:receiver><ns0:variable name="SendRate" /></ns0:receiver><ns0:argument><ns0:variable name="r" /></ns0:argument><ns0:argument><ns0:variable name="t" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="NumberOfCollectedSendRateRewards"><ns0:binary_operation operator="+" stmt_handle="851"><ns0:left_operand><ns0:variable name="NumberOfCollectedSendRateRewards" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="852"><ns0:left_operand><ns0:data_method_call method_name="modulo" stmt_handle="853" super="false"><ns0:receiver><ns0:variable name="NumberOfCollectedSendRateRewards" /></ns0:receiver><ns0:argument><ns0:constant type="integer">1000</ns0:constant></ns0:argument></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="log" stmt_handle="854" super="false"><ns0:receiver><ns0:variable name="SendRate" /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="PerformanceMonitor" native="false"><ns0:super_class>Observer</ns0:super_class><ns0:instance_variable name="BatchSize" type="Integer" /><ns0:instance_variable name="Accuracy" type="Real" /><ns0:instance_variable name="ConfidenceLevel" type="Real" /><ns0:instance_variable name="IntervalEstimation" type="ConfidenceInterval" /><ns0:instance_variable name="LogFile" type="FileOut" /><ns0:instance_variable name="Complete" type="Boolean" /><ns0:data_method name="accurate" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:local_variable name="Accurate" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Accurate"><ns0:data_method_call method_name="accurate" stmt_handle="913" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver><ns0:argument><ns0:variable name="Accuracy" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="914"><ns0:left_operand><ns0:variable name="Accurate" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="not" stmt_handle="915" super="false"><ns0:receiver><ns0:variable name="Complete" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Complete"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:data_method_call method_name="complete" stmt_handle="916" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:variable name="Accurate" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="complete" native="false"><ns0:return_type>Observer</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="log" stmt_handle="917" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:data_method_call method_name="complete" stmt_handle="918" super="true"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="result" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="printString" stmt_handle="919" super="false"><ns0:receiver><ns0:data_method_call method_name="result" stmt_handle="920" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="setDefaultBatchSize" native="false"><ns0:return_type>PerformanceMonitor</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="BatchSize"><ns0:constant type="integer">10000</ns0:constant></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="concat" stmt_handle="921" super="false"><ns0:receiver><ns0:data_method_call method_name="cr" stmt_handle="922" super="false"><ns0:receiver><ns0:data_method_call method_name="printHeading" stmt_handle="923" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printStatistics" stmt_handle="924" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="log" native="false"><ns0:return_type>PerformanceMonitor</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="925"><ns0:left_operand><ns0:variable name="LogFile" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="936" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Log File not initialised."</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:data_method_call method_name="append" stmt_handle="926" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver></ns0:data_method_call><ns0:data_method_call method_name="write" stmt_handle="927" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="928" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="929" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="930" super="false"><ns0:receiver><ns0:data_method_call method_name="logStatistics" stmt_handle="931" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="cr" stmt_handle="932" super="false"><ns0:receiver><ns0:data_method_call method_name="printString" stmt_handle="933" super="false"><ns0:receiver><ns0:data_method_call method_name="accurate" stmt_handle="934" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="close" stmt_handle="935" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="getIntervalEstimation" native="false"><ns0:return_type>ConfidenceInterval</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="IntervalEstimation" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="printStatistics" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="937"><ns0:left_operand><ns0:variable name="Accuracy" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:data_method_call method_name="printString" stmt_handle="946" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:then><ns0:else><ns0:return><ns0:data_method_call method_name="concat" stmt_handle="938" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="939" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="940" super="false"><ns0:receiver><ns0:data_method_call method_name="printHeading" stmt_handle="941" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"		Accurate:\n"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="tab" stmt_handle="942" super="false"><ns0:receiver><ns0:data_method_call method_name="printStatistics" stmt_handle="943" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="944" super="false"><ns0:receiver><ns0:data_method_call method_name="accurate" stmt_handle="945" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver><ns0:argument><ns0:variable name="Accuracy" /></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="logStatistics" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="concat" stmt_handle="947" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="948" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="949" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="950" super="false"><ns0:receiver><ns0:data_method_call method_name="logHeading" stmt_handle="951" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"Accurate:\n"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="tab" stmt_handle="952" super="false"><ns0:receiver><ns0:data_method_call method_name="logStatistics" stmt_handle="953" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="954" super="false"><ns0:receiver><ns0:data_method_call method_name="accurate" stmt_handle="955" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver><ns0:argument><ns0:variable name="Accuracy" /></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="LongRunSampleAverage" native="false"><ns0:super_class>PerformanceMonitor</ns0:super_class><ns0:instance_variable name="NumberOfCycles" type="Integer" /><ns0:instance_variable name="CurrentLength" type="Integer" /><ns0:instance_variable name="Constant" type="Real" /><ns0:instance_variable name="AverageSquaredLength" type="Real" /><ns0:instance_variable name="AverageSumLengthProduct" type="Real" /><ns0:instance_variable name="CurrentSum" type="Real" /><ns0:instance_variable name="AverageSum" type="Real" /><ns0:instance_variable name="AverageLength" type="Real" /><ns0:instance_variable name="AverageSquaredSum" type="Real" /><ns0:instance_variable name="TransientMode" type="Boolean" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>LongRunSampleAverage</ns0:return_type><ns0:argument name="A" type="Real" /><ns0:argument name="CL" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="956"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="957"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="958" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="959" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="960" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Accuracy parameter for Long Run Sample Average must be a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="961"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="962"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="963" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="964" super="false"><ns0:receiver><ns0:variable name="CL" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="965" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Confidence Level parameter for Long Run Sample Average must be a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="966"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="967"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="968"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="969" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Accuracy parameter for Long Run Sample Average must be within the interval (0.0, 1.0)"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="970"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="971"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="972"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="973" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Confidence Level parameter for Long Run Sample Average must be within the interval [0.0, 1.0)"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Accuracy"><ns0:variable name="A" /></ns0:assignment><ns0:assignment variable_name="Complete"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:data_method_call method_name="withConfidenceLevel" stmt_handle="974" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="CL" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="register" stmt_handle="975" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setBatchSize" native="false"><ns0:return_type>LongRunSampleAverage</ns0:return_type><ns0:argument name="M" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="976"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="977"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="978" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="979" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="980" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"BatchSize for Long Run Sample Average must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="981"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="BatchSize"><ns0:variable name="M" /></ns0:assignment></ns0:then><ns0:else><ns0:data_method_call method_name="error" stmt_handle="982" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"BatchSize parameter for Long Run Sample Average must be larger than 0"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="logTo" native="false"><ns0:return_type>LongRunSampleAverage</ns0:return_type><ns0:argument name="Name" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="identifyWith" stmt_handle="983" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Name" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="LogFile"><ns0:data_method_call method_name="open" stmt_handle="984" super="false"><ns0:receiver><ns0:data_method_call method_name="destination" stmt_handle="985" super="false"><ns0:receiver><ns0:new data_class="FileOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="986" super="false"><ns0:receiver><ns0:variable name="Name" /></ns0:receiver><ns0:argument><ns0:constant type="string">".log"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="write" stmt_handle="987" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="cr" stmt_handle="988" super="false"><ns0:receiver><ns0:data_method_call method_name="cr" stmt_handle="989" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="990" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="991" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="992" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for the Long Run Sample Average "</ns0:constant></ns0:receiver><ns0:argument><ns0:variable name="Name" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">" with Accuracy "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="993" super="false"><ns0:receiver><ns0:variable name="Accuracy" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="write" stmt_handle="994" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="995" super="false"><ns0:receiver><ns0:data_method_call method_name="logHeading" stmt_handle="996" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"\t\tAccurate:\n"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="write" stmt_handle="997" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="close" stmt_handle="998" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardRC" native="false"><ns0:return_type>LongRunSampleAverage</ns0:return_type><ns0:argument name="Reward" type="Object" /><ns0:argument name="RecurrenceCondition" type="Boolean" /><ns0:local_variable name="PointEstimation" type="Real" /><ns0:local_variable name="StandardDeviation" type="Real" /><ns0:local_variable name="Variance" type="Real" /><ns0:local_variable name="Factor" type="Real" /><ns0:local_variable name="HalfWidth" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="999"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1000"><ns0:left_operand><ns0:variable name="Reward" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="1001"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1002" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1003" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1004" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1005" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1006" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Reward for Long run Sample Average must be an Integer or Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="1007" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="Reward"><ns0:data_method_call method_name="asReal" stmt_handle="1008" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:variable name="RecurrenceCondition" /></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:variable name="TransientMode" /></ns0:condition><ns0:then><ns0:assignment variable_name="TransientMode"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="NumberOfCycles"><ns0:binary_operation operator="+" stmt_handle="1012"><ns0:left_operand><ns0:variable name="NumberOfCycles" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="Factor"><ns0:binary_operation operator="/" stmt_handle="1013"><ns0:left_operand><ns0:data_method_call method_name="asReal" stmt_handle="1014" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="1015"><ns0:left_operand><ns0:variable name="NumberOfCycles" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asReal" stmt_handle="1016" super="false"><ns0:receiver><ns0:variable name="NumberOfCycles" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="AverageSum"><ns0:binary_operation operator="+" stmt_handle="1017"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1018"><ns0:left_operand><ns0:variable name="Factor" /></ns0:left_operand><ns0:right_operand><ns0:variable name="AverageSum" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="1019"><ns0:left_operand><ns0:variable name="CurrentSum" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asReal" stmt_handle="1020" super="false"><ns0:receiver><ns0:variable name="NumberOfCycles" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="AverageLength"><ns0:binary_operation operator="+" stmt_handle="1021"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1022"><ns0:left_operand><ns0:variable name="Factor" /></ns0:left_operand><ns0:right_operand><ns0:variable name="AverageLength" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="1023"><ns0:left_operand><ns0:data_method_call method_name="asReal" stmt_handle="1024" super="false"><ns0:receiver><ns0:variable name="CurrentLength" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asReal" stmt_handle="1025" super="false"><ns0:receiver><ns0:variable name="NumberOfCycles" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="AverageSquaredSum"><ns0:binary_operation operator="+" stmt_handle="1026"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1027"><ns0:left_operand><ns0:variable name="Factor" /></ns0:left_operand><ns0:right_operand><ns0:variable name="AverageSquaredSum" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="1028"><ns0:left_operand><ns0:data_method_call method_name="sqr" stmt_handle="1029" super="false"><ns0:receiver><ns0:variable name="CurrentSum" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asReal" stmt_handle="1030" super="false"><ns0:receiver><ns0:variable name="NumberOfCycles" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="AverageSquaredLength"><ns0:binary_operation operator="+" stmt_handle="1031"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1032"><ns0:left_operand><ns0:variable name="Factor" /></ns0:left_operand><ns0:right_operand><ns0:variable name="AverageSquaredLength" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="1033"><ns0:left_operand><ns0:data_method_call method_name="asReal" stmt_handle="1034" super="false"><ns0:receiver><ns0:data_method_call method_name="sqr" stmt_handle="1035" super="false"><ns0:receiver><ns0:variable name="CurrentLength" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asReal" stmt_handle="1036" super="false"><ns0:receiver><ns0:variable name="NumberOfCycles" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="AverageSumLengthProduct"><ns0:binary_operation operator="+" stmt_handle="1037"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1038"><ns0:left_operand><ns0:variable name="Factor" /></ns0:left_operand><ns0:right_operand><ns0:variable name="AverageSumLengthProduct" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="1039"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1040"><ns0:left_operand><ns0:variable name="CurrentSum" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asReal" stmt_handle="1041" super="false"><ns0:receiver><ns0:variable name="CurrentLength" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="asReal" stmt_handle="1042" super="false"><ns0:receiver><ns0:variable name="NumberOfCycles" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="1043"><ns0:left_operand><ns0:variable name="NumberOfCycles" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="PointEstimation"><ns0:binary_operation operator="/" stmt_handle="1044"><ns0:left_operand><ns0:variable name="AverageSum" /></ns0:left_operand><ns0:right_operand><ns0:variable name="AverageLength" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="Variance"><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1045"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="1046"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="Factor" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1047"><ns0:left_operand><ns0:binary_operation operator="-" stmt_handle="1048"><ns0:left_operand><ns0:variable name="AverageSquaredSum" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1049"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1050"><ns0:left_operand><ns0:constant type="real">2.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="PointEstimation" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="AverageSumLengthProduct" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1051"><ns0:left_operand><ns0:data_method_call method_name="sqr" stmt_handle="1052" super="false"><ns0:receiver><ns0:variable name="PointEstimation" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="AverageSquaredLength" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="1053"><ns0:left_operand><ns0:variable name="Variance" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="StandardDeviation"><ns0:data_method_call method_name="sqrt" stmt_handle="1054" super="false"><ns0:receiver><ns0:variable name="Variance" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then><ns0:else><ns0:assignment variable_name="StandardDeviation"><ns0:constant type="real">0.0</ns0:constant></ns0:assignment></ns0:else></ns0:if><ns0:assignment variable_name="HalfWidth"><ns0:binary_operation operator="/" stmt_handle="1055"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1056"><ns0:left_operand><ns0:variable name="Constant" /></ns0:left_operand><ns0:right_operand><ns0:variable name="StandardDeviation" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1057"><ns0:left_operand><ns0:variable name="AverageLength" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="sqrt" stmt_handle="1058" super="false"><ns0:receiver><ns0:data_method_call method_name="asReal" stmt_handle="1059" super="false"><ns0:receiver><ns0:variable name="NumberOfCycles" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="IntervalEstimation"><ns0:data_method_call method_name="withParameters" stmt_handle="1060" super="false"><ns0:receiver><ns0:new data_class="ConfidenceInterval" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="1061"><ns0:left_operand><ns0:variable name="PointEstimation" /></ns0:left_operand><ns0:right_operand><ns0:variable name="HalfWidth" /></ns0:right_operand></ns0:binary_operation></ns0:argument><ns0:argument><ns0:binary_operation operator="+" stmt_handle="1062"><ns0:left_operand><ns0:variable name="PointEstimation" /></ns0:left_operand><ns0:right_operand><ns0:variable name="HalfWidth" /></ns0:right_operand></ns0:binary_operation></ns0:argument><ns0:argument><ns0:variable name="ConfidenceLevel" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:assignment variable_name="CurrentSum"><ns0:variable name="Reward" /></ns0:assignment><ns0:assignment variable_name="CurrentLength"><ns0:constant type="integer">1</ns0:constant></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:data_method_call method_name="not" stmt_handle="1009" super="false"><ns0:receiver><ns0:variable name="TransientMode" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="CurrentSum"><ns0:binary_operation operator="+" stmt_handle="1010"><ns0:left_operand><ns0:variable name="CurrentSum" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Reward" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="CurrentLength"><ns0:binary_operation operator="+" stmt_handle="1011"><ns0:left_operand><ns0:variable name="CurrentLength" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardBM" native="false"><ns0:return_type>LongRunSampleAverage</ns0:return_type><ns0:argument name="Reward" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="rewardRC" stmt_handle="1063" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Reward" /></ns0:argument><ns0:argument><ns0:binary_operation operator="|" stmt_handle="1064"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1065"><ns0:left_operand><ns0:variable name="CurrentLength" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1066"><ns0:left_operand><ns0:variable name="CurrentLength" /></ns0:left_operand><ns0:right_operand><ns0:variable name="BatchSize" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="withConfidenceLevel" native="false"><ns0:return_type>LongRunSampleAverage</ns0:return_type><ns0:argument name="CL" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="ConfidenceLevel"><ns0:variable name="CL" /></ns0:assignment><ns0:assignment variable_name="IntervalEstimation"><ns0:data_method_call method_name="withParameters" stmt_handle="1067" super="false"><ns0:receiver><ns0:new data_class="ConfidenceInterval" /></ns0:receiver><ns0:argument><ns0:nil /></ns0:argument><ns0:argument><ns0:nil /></ns0:argument><ns0:argument><ns0:variable name="ConfidenceLevel" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Constant"><ns0:binary_operation operator="*" stmt_handle="1068"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="sqrt" stmt_handle="1069" super="false"><ns0:receiver><ns0:constant type="real">2.0</ns0:constant></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="calculateInverseErfC" stmt_handle="1070" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="1071"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="ConfidenceLevel" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="TransientMode"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="NumberOfCycles"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:assignment variable_name="CurrentLength"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:assignment variable_name="AverageSum"><ns0:constant type="real">0.0</ns0:constant></ns0:assignment><ns0:assignment variable_name="AverageLength"><ns0:constant type="real">0.0</ns0:constant></ns0:assignment><ns0:assignment variable_name="AverageSquaredSum"><ns0:constant type="real">0.0</ns0:constant></ns0:assignment><ns0:assignment variable_name="AverageSquaredLength"><ns0:constant type="real">0.0</ns0:constant></ns0:assignment><ns0:assignment variable_name="AverageSumLengthProduct"><ns0:constant type="real">0.0</ns0:constant></ns0:assignment><ns0:data_method_call method_name="setDefaultBatchSize" stmt_handle="1072" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="calculateInverseErfC" native="false"><ns0:return_type>Real</ns0:return_type><ns0:argument name="y" type="Real" /><ns0:local_variable name="s" type="Real" /><ns0:local_variable name="t" type="Real" /><ns0:local_variable name="u" type="Real" /><ns0:local_variable name="w" type="Real" /><ns0:local_variable name="x" type="Real" /><ns0:local_variable name="z" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="z"><ns0:variable name="y" /></ns0:assignment><ns0:assignment variable_name="w"><ns0:binary_operation operator="-" stmt_handle="1073"><ns0:left_operand><ns0:constant type="real">0.916461398268964</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="ln" stmt_handle="1074" super="false"><ns0:receiver><ns0:variable name="z" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="u"><ns0:data_method_call method_name="sqrt" stmt_handle="1075" super="false"><ns0:receiver><ns0:variable name="w" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="s"><ns0:binary_operation operator="/" stmt_handle="1076"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1077"><ns0:left_operand><ns0:data_method_call method_name="ln" stmt_handle="1078" super="false"><ns0:receiver><ns0:variable name="u" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.488826640273108</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="w" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="t"><ns0:binary_operation operator="/" stmt_handle="1079"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1080"><ns0:left_operand><ns0:variable name="u" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.231729200323405</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="x"><ns0:binary_operation operator="-" stmt_handle="1081"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1082"><ns0:left_operand><ns0:variable name="u" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="1083"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="1084"><ns0:left_operand><ns0:variable name="s" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1085"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1086"><ns0:left_operand><ns0:variable name="s" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.124610454613712</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.5</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="1087"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1088"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1089"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1090"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1091"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1092"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1093"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1094"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1095"><ns0:left_operand><ns0:constant type="real">-0.0728846765585675</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="t" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.269999308670029</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="t" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.150689047360223</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="t" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.116065025341614</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="t" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.499999303439796</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="t" /></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="t"><ns0:binary_operation operator="/" stmt_handle="1096"><ns0:left_operand><ns0:constant type="real">3.97886080735226</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1097"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">3.97886080735226</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="u"><ns0:binary_operation operator="-" stmt_handle="1098"><ns0:left_operand><ns0:variable name="t" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.5</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="s"><ns0:binary_operation operator="+" stmt_handle="1099"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1100"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1101"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1102"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1103"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1104"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="1105"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1106"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="1107"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1108"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1109"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1110"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1111"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1112"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="1113"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1114"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="1115"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1116"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1117"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1118"><ns0:left_operand><ns0:constant type="real">0.00112648096188977922</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.000105739299623423047</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.00351287146129100025</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.000771708358954120939</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.00685649426074558612</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.00339721910367775861</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.011274916933250487</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0118598117047771104</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0142961988697898018</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0346494207789099922</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.00220995927012179067</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="s"><ns0:binary_operation operator="-" stmt_handle="1119"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1120"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1121"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1122"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1123"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1124"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1125"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1126"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1127"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1128"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1129"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1130"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1131"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1132"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1133"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1134"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1135"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1136"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1137"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1138"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1139"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1140"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="1141"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1142"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="1143"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1144"><ns0:left_operand><ns0:variable name="s" /></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0743424357241784861</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.105872177941595488</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0147297938331485121</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.316847638520135944</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.713657635868730364</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.05375024970847138</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.21448730779995237</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.16374581931560831</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.956464974744799006</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.686265948274097816</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.434397492331430115</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="u" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.244044510593190935</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="t" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="1145"><ns0:left_operand><ns0:variable name="z" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="power" stmt_handle="1146" super="false"><ns0:receiver><ns0:constant type="real">2.718281828459045</ns0:constant></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="1147"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1148"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:variable name="x" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.120782237635245222</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="x"><ns0:binary_operation operator="+" stmt_handle="1149"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="*" stmt_handle="1150"><ns0:left_operand><ns0:variable name="s" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1151"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="1152"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:variable name="s" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:variable name="x" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="getCurrentLength" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="CurrentLength" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="printHeading" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1153"><ns0:left_operand><ns0:variable name="Accuracy" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:constant type="string">"Statistics for Long Run Sample Average"</ns0:constant></ns0:return></ns0:then><ns0:else><ns0:return><ns0:data_method_call method_name="concat" stmt_handle="1154" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for Long Run Sample Average with Accuracy "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1155" super="false"><ns0:receiver><ns0:variable name="Accuracy" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="LongRunSampleVariance" native="false"><ns0:super_class>PerformanceMonitor</ns0:super_class><ns0:instance_variable name="AverageReward" type="LongRunSampleAverage" /><ns0:instance_variable name="AverageSquaredReward" type="LongRunSampleAverage" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>LongRunSampleVariance</ns0:return_type><ns0:argument name="A" type="Object" /><ns0:argument name="CL" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1156"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1157"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1158" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1159" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1160" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Accuracy parameter for Long Run Sample Variance must be a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1161"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1162"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1163" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1164" super="false"><ns0:receiver><ns0:variable name="CL" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1165" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Confidence Level parameter for Long Run Sample Variance must be a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1166"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="1167"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="1168"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1169" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Accuracy parameter for Long Run Sample Variance must be within the interval (0.0, 1.0)"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1170"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="1171"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="1172"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1173" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"ConfidenceLevel parameter for Long Run Sample Variance must be within the interval [0.0, 1.0)"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Accuracy"><ns0:variable name="A" /></ns0:assignment><ns0:assignment variable_name="ConfidenceLevel"><ns0:variable name="CL" /></ns0:assignment><ns0:assignment variable_name="AverageReward"><ns0:data_method_call method_name="withConfidenceLevel" stmt_handle="1174" super="false"><ns0:receiver><ns0:new data_class="LongRunSampleAverage" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="/" stmt_handle="1175"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1176"><ns0:left_operand><ns0:variable name="ConfidenceLevel" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">2.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="AverageSquaredReward"><ns0:data_method_call method_name="withConfidenceLevel" stmt_handle="1177" super="false"><ns0:receiver><ns0:new data_class="LongRunSampleAverage" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="/" stmt_handle="1178"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1179"><ns0:left_operand><ns0:variable name="ConfidenceLevel" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">2.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="IntervalEstimation"><ns0:binary_operation operator="-" stmt_handle="1180"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1181" super="false"><ns0:receiver><ns0:variable name="AverageSquaredReward" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="sqr" stmt_handle="1182" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1183" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="setDefaultBatchSize" stmt_handle="1184" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:assignment variable_name="Complete"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:data_method_call method_name="register" stmt_handle="1185" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setBatchSize" native="false"><ns0:return_type>LongRunSampleVariance</ns0:return_type><ns0:argument name="M" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1186"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1187"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1188" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1189" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1190" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"BatchSize for Long Run Sample Variance must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="1191"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="BatchSize"><ns0:variable name="M" /></ns0:assignment><ns0:data_method_call method_name="setBatchSize" stmt_handle="1193" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver><ns0:argument><ns0:variable name="BatchSize" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setBatchSize" stmt_handle="1194" super="false"><ns0:receiver><ns0:variable name="AverageSquaredReward" /></ns0:receiver><ns0:argument><ns0:variable name="BatchSize" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:data_method_call method_name="error" stmt_handle="1192" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"BatchSize parameter for Long Run Sample Variance must be larger than 0"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="logTo" native="false"><ns0:return_type>LongRunSampleVariance</ns0:return_type><ns0:argument name="Name" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="identifyWith" stmt_handle="1195" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Name" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="LogFile"><ns0:data_method_call method_name="open" stmt_handle="1196" super="false"><ns0:receiver><ns0:data_method_call method_name="destination" stmt_handle="1197" super="false"><ns0:receiver><ns0:new data_class="FileOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="1198" super="false"><ns0:receiver><ns0:variable name="Name" /></ns0:receiver><ns0:argument><ns0:constant type="string">".log"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="write" stmt_handle="1199" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="cr" stmt_handle="1200" super="false"><ns0:receiver><ns0:data_method_call method_name="cr" stmt_handle="1201" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1202" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1203" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1204" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for the Long Run Sample Variance "</ns0:constant></ns0:receiver><ns0:argument><ns0:variable name="Name" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">" with Accuracy "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1205" super="false"><ns0:receiver><ns0:variable name="Accuracy" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="write" stmt_handle="1206" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="1207" super="false"><ns0:receiver><ns0:data_method_call method_name="logHeading" stmt_handle="1208" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"\t\tAccurate:\n"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="write" stmt_handle="1209" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="close" stmt_handle="1210" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardRC" native="false"><ns0:return_type>LongRunSampleVariance</ns0:return_type><ns0:argument name="Reward" type="Object" /><ns0:argument name="RecurrenceCondition" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1211"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1212"><ns0:left_operand><ns0:variable name="Reward" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="1213"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1214" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1215" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1216" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1217" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1218" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Reward for Long Run Sample Variance must be an Integer or Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="1219" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="Reward"><ns0:data_method_call method_name="asReal" stmt_handle="1220" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:data_method_call method_name="rewardRC" stmt_handle="1221" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver><ns0:argument><ns0:variable name="Reward" /></ns0:argument><ns0:argument><ns0:variable name="RecurrenceCondition" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="rewardRC" stmt_handle="1222" super="false"><ns0:receiver><ns0:variable name="AverageSquaredReward" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="*" stmt_handle="1223"><ns0:left_operand><ns0:variable name="Reward" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Reward" /></ns0:right_operand></ns0:binary_operation></ns0:argument><ns0:argument><ns0:variable name="RecurrenceCondition" /></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:variable name="RecurrenceCondition" /></ns0:condition><ns0:then><ns0:assignment variable_name="IntervalEstimation"><ns0:binary_operation operator="-" stmt_handle="1224"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1225" super="false"><ns0:receiver><ns0:variable name="AverageSquaredReward" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="sqr" stmt_handle="1226" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1227" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardBM" native="false"><ns0:return_type>LongRunSampleVariance</ns0:return_type><ns0:argument name="Reward" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="rewardRC" stmt_handle="1228" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Reward" /></ns0:argument><ns0:argument><ns0:binary_operation operator="|" stmt_handle="1229"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1230"><ns0:left_operand><ns0:data_method_call method_name="getCurrentLength" stmt_handle="1231" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1232"><ns0:left_operand><ns0:data_method_call method_name="getCurrentLength" stmt_handle="1233" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="BatchSize" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printHeading" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="concat" stmt_handle="1234" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for Long Run Sample Variance with Accuracy "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1235" super="false"><ns0:receiver><ns0:variable name="Accuracy" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="LongRunTimeAverage" native="false"><ns0:super_class>PerformanceMonitor</ns0:super_class><ns0:instance_variable name="AverageRewardTimeProduct" type="LongRunSampleAverage" /><ns0:instance_variable name="AverageTime" type="LongRunSampleAverage" /><ns0:instance_variable name="PreviousReward" type="Real" /><ns0:instance_variable name="LastTime" type="Real" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>LongRunTimeAverage</ns0:return_type><ns0:argument name="A" type="Real" /><ns0:argument name="CL" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1236"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1237"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1238" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1239" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1240" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Accuracy parameter for Long Run Time Average must be a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1241"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1242"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1243" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1244" super="false"><ns0:receiver><ns0:variable name="CL" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1245" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Confidence Level parameter for Long Run Time Average must be a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1246"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="1247"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="1248"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1249" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Accuracy parameter for Long Run Time Average must be within the interval (0.0, 1.0)"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1250"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="1251"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="1252"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1253" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Confidence Level parameter for Long Run Time Average must be within the interval [0.0, 1.0)"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Accuracy"><ns0:variable name="A" /></ns0:assignment><ns0:assignment variable_name="Complete"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:data_method_call method_name="withConfidenceLevel" stmt_handle="1254" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="CL" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="register" stmt_handle="1255" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setBatchSize" native="false"><ns0:return_type>LongRunTimeAverage</ns0:return_type><ns0:argument name="M" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1256"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1257"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1258" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1259" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1260" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"BatchSize for Long Run Time Average must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="1261"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="BatchSize"><ns0:variable name="M" /></ns0:assignment><ns0:data_method_call method_name="setBatchSize" stmt_handle="1263" super="false"><ns0:receiver><ns0:variable name="AverageRewardTimeProduct" /></ns0:receiver><ns0:argument><ns0:variable name="BatchSize" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setBatchSize" stmt_handle="1264" super="false"><ns0:receiver><ns0:variable name="AverageTime" /></ns0:receiver><ns0:argument><ns0:variable name="BatchSize" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:data_method_call method_name="error" stmt_handle="1262" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"BatchSize parameter for Long Run Time Average must be larger than 0"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="logTo" native="false"><ns0:return_type>LongRunTimeAverage</ns0:return_type><ns0:argument name="Name" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="identifyWith" stmt_handle="1265" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Name" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="LogFile"><ns0:data_method_call method_name="open" stmt_handle="1266" super="false"><ns0:receiver><ns0:data_method_call method_name="destination" stmt_handle="1267" super="false"><ns0:receiver><ns0:new data_class="FileOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="1268" super="false"><ns0:receiver><ns0:variable name="Name" /></ns0:receiver><ns0:argument><ns0:constant type="string">".log"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="write" stmt_handle="1269" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="cr" stmt_handle="1270" super="false"><ns0:receiver><ns0:data_method_call method_name="cr" stmt_handle="1271" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1272" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1273" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1274" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for the Long Run Time Average "</ns0:constant></ns0:receiver><ns0:argument><ns0:variable name="Name" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">" with Accuracy "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1275" super="false"><ns0:receiver><ns0:variable name="Accuracy" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="write" stmt_handle="1276" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="1277" super="false"><ns0:receiver><ns0:data_method_call method_name="logHeading" stmt_handle="1278" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"\t\tAccurate:\n"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="write" stmt_handle="1279" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="close" stmt_handle="1280" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardRC" native="false"><ns0:return_type>LongRunTimeAverage</ns0:return_type><ns0:argument name="Reward" type="Object" /><ns0:argument name="CurrentTime" type="Real" /><ns0:argument name="RecurrenceCondition" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1281"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1282"><ns0:left_operand><ns0:variable name="Reward" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="1283"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1284" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1285" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1286" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1287" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1288" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Reward for Long Run Time Average must be an Integer or Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="1289" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="Reward"><ns0:data_method_call method_name="asReal" stmt_handle="1290" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1291"><ns0:left_operand><ns0:variable name="LastTime" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="rewardRC" stmt_handle="1292" super="false"><ns0:receiver><ns0:variable name="AverageRewardTimeProduct" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="*" stmt_handle="1293"><ns0:left_operand><ns0:variable name="PreviousReward" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="1294"><ns0:left_operand><ns0:variable name="CurrentTime" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LastTime" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:argument><ns0:argument><ns0:variable name="RecurrenceCondition" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="rewardRC" stmt_handle="1295" super="false"><ns0:receiver><ns0:variable name="AverageTime" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="1296"><ns0:left_operand><ns0:variable name="CurrentTime" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LastTime" /></ns0:right_operand></ns0:binary_operation></ns0:argument><ns0:argument><ns0:variable name="RecurrenceCondition" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="PreviousReward"><ns0:variable name="Reward" /></ns0:assignment><ns0:assignment variable_name="LastTime"><ns0:variable name="CurrentTime" /></ns0:assignment><ns0:if><ns0:condition><ns0:variable name="RecurrenceCondition" /></ns0:condition><ns0:then><ns0:assignment variable_name="IntervalEstimation"><ns0:binary_operation operator="/" stmt_handle="1297"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1298" super="false"><ns0:receiver><ns0:variable name="AverageRewardTimeProduct" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1299" super="false"><ns0:receiver><ns0:variable name="AverageTime" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardBM" native="false"><ns0:return_type>LongRunTimeAverage</ns0:return_type><ns0:argument name="Reward" type="Object" /><ns0:argument name="CurrentTime" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="rewardRC" stmt_handle="1300" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Reward" /></ns0:argument><ns0:argument><ns0:variable name="CurrentTime" /></ns0:argument><ns0:argument><ns0:binary_operation operator="|" stmt_handle="1301"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1302"><ns0:left_operand><ns0:data_method_call method_name="getCurrentLength" stmt_handle="1303" super="false"><ns0:receiver><ns0:variable name="AverageRewardTimeProduct" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1304"><ns0:left_operand><ns0:data_method_call method_name="getCurrentLength" stmt_handle="1305" super="false"><ns0:receiver><ns0:variable name="AverageRewardTimeProduct" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="BatchSize" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="withConfidenceLevel" native="false"><ns0:return_type>LongRunTimeAverage</ns0:return_type><ns0:argument name="CL" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="ConfidenceLevel"><ns0:variable name="CL" /></ns0:assignment><ns0:assignment variable_name="AverageRewardTimeProduct"><ns0:data_method_call method_name="withConfidenceLevel" stmt_handle="1306" super="false"><ns0:receiver><ns0:new data_class="LongRunSampleAverage" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="/" stmt_handle="1307"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1308"><ns0:left_operand><ns0:variable name="ConfidenceLevel" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">2.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="AverageTime"><ns0:data_method_call method_name="withConfidenceLevel" stmt_handle="1309" super="false"><ns0:receiver><ns0:new data_class="LongRunSampleAverage" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="/" stmt_handle="1310"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1311"><ns0:left_operand><ns0:variable name="ConfidenceLevel" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">2.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="IntervalEstimation"><ns0:binary_operation operator="/" stmt_handle="1312"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1313" super="false"><ns0:receiver><ns0:variable name="AverageRewardTimeProduct" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1314" super="false"><ns0:receiver><ns0:variable name="AverageTime" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="setDefaultBatchSize" stmt_handle="1315" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="getCurrentLength" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="getCurrentLength" stmt_handle="1316" super="false"><ns0:receiver><ns0:variable name="AverageRewardTimeProduct" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="printHeading" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1317"><ns0:left_operand><ns0:variable name="Accuracy" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:constant type="string">"Statistics for Long Run Time Average"</ns0:constant></ns0:return></ns0:then><ns0:else><ns0:return><ns0:data_method_call method_name="concat" stmt_handle="1318" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for Long Run Time Average with Accuracy "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1319" super="false"><ns0:receiver><ns0:variable name="Accuracy" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="LongRunTimeVariance" native="false"><ns0:super_class>PerformanceMonitor</ns0:super_class><ns0:instance_variable name="AverageReward" type="LongRunTimeAverage" /><ns0:instance_variable name="AverageSquaredReward" type="LongRunTimeAverage" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>LongRunTimeVariance</ns0:return_type><ns0:argument name="A" type="Real" /><ns0:argument name="CL" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1320"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1321"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1322" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1323" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1324" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Accuracy parameter for Long Run Time Variance must be a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1325"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1326"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1327" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1328" super="false"><ns0:receiver><ns0:variable name="CL" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1329" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Confidence Level parameter for Long Run Time Variance must be a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1330"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="1331"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="1332"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1333" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Accuracy parameter for Long Run Time Variance must within the interval (0.0, 1.0)"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1334"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="1335"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="1336"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1337" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Confidence Level parameter for Long Run Time Variance must be within the interval [0.0, 1.0)"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Accuracy"><ns0:variable name="A" /></ns0:assignment><ns0:assignment variable_name="ConfidenceLevel"><ns0:variable name="CL" /></ns0:assignment><ns0:assignment variable_name="Complete"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:assignment variable_name="AverageReward"><ns0:data_method_call method_name="withConfidenceLevel" stmt_handle="1338" super="false"><ns0:receiver><ns0:new data_class="LongRunTimeAverage" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="/" stmt_handle="1339"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1340"><ns0:left_operand><ns0:variable name="ConfidenceLevel" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">2.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="AverageSquaredReward"><ns0:data_method_call method_name="withConfidenceLevel" stmt_handle="1341" super="false"><ns0:receiver><ns0:new data_class="LongRunTimeAverage" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="/" stmt_handle="1342"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1343"><ns0:left_operand><ns0:variable name="ConfidenceLevel" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">2.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="IntervalEstimation"><ns0:binary_operation operator="-" stmt_handle="1344"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1345" super="false"><ns0:receiver><ns0:variable name="AverageSquaredReward" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="sqr" stmt_handle="1346" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1347" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="setDefaultBatchSize" stmt_handle="1348" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:data_method_call method_name="register" stmt_handle="1349" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setBatchSize" native="false"><ns0:return_type>LongRunTimeVariance</ns0:return_type><ns0:argument name="M" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1350"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1351"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1352" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1353" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1354" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"BatchSize parameter for Long Run Time Variance must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="1355"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="BatchSize"><ns0:variable name="M" /></ns0:assignment><ns0:data_method_call method_name="setBatchSize" stmt_handle="1357" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver><ns0:argument><ns0:variable name="BatchSize" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setBatchSize" stmt_handle="1358" super="false"><ns0:receiver><ns0:variable name="AverageSquaredReward" /></ns0:receiver><ns0:argument><ns0:variable name="BatchSize" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:data_method_call method_name="error" stmt_handle="1356" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"BatchSize parameter for Long Run Time Variance must be larger than 0"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="logTo" native="false"><ns0:return_type>LongRunTimeVariance</ns0:return_type><ns0:argument name="Name" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="identifyWith" stmt_handle="1359" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Name" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="LogFile"><ns0:data_method_call method_name="open" stmt_handle="1360" super="false"><ns0:receiver><ns0:data_method_call method_name="destination" stmt_handle="1361" super="false"><ns0:receiver><ns0:new data_class="FileOut" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="1362"><ns0:left_operand><ns0:variable name="Name" /></ns0:left_operand><ns0:right_operand><ns0:constant type="string">".log"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="write" stmt_handle="1363" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="cr" stmt_handle="1364" super="false"><ns0:receiver><ns0:data_method_call method_name="cr" stmt_handle="1365" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1366" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1367" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1368" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for the Long Run Time Variance "</ns0:constant></ns0:receiver><ns0:argument><ns0:variable name="Name" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">" with Accuracy "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1369" super="false"><ns0:receiver><ns0:variable name="Accuracy" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="write" stmt_handle="1370" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="1371" super="false"><ns0:receiver><ns0:data_method_call method_name="logHeading" stmt_handle="1372" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"\t\tAccurate:\n"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="write" stmt_handle="1373" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="close" stmt_handle="1374" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardRC" native="false"><ns0:return_type>LongRunTimeVariance</ns0:return_type><ns0:argument name="Reward" type="Object" /><ns0:argument name="CurrentTime" type="Real" /><ns0:argument name="RecurrenceCondition" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1375"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1376"><ns0:left_operand><ns0:variable name="Reward" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="1377"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1378" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1379" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1380" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1381" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1382" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Reward for Long Run Time Variance must be an Integer or Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="1383" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="Reward"><ns0:data_method_call method_name="asReal" stmt_handle="1384" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:data_method_call method_name="rewardRC" stmt_handle="1385" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver><ns0:argument><ns0:variable name="Reward" /></ns0:argument><ns0:argument><ns0:variable name="CurrentTime" /></ns0:argument><ns0:argument><ns0:variable name="RecurrenceCondition" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="rewardRC" stmt_handle="1386" super="false"><ns0:receiver><ns0:variable name="AverageSquaredReward" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="*" stmt_handle="1387"><ns0:left_operand><ns0:variable name="Reward" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Reward" /></ns0:right_operand></ns0:binary_operation></ns0:argument><ns0:argument><ns0:variable name="CurrentTime" /></ns0:argument><ns0:argument><ns0:variable name="RecurrenceCondition" /></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:variable name="RecurrenceCondition" /></ns0:condition><ns0:then><ns0:assignment variable_name="IntervalEstimation"><ns0:binary_operation operator="-" stmt_handle="1388"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1389" super="false"><ns0:receiver><ns0:variable name="AverageSquaredReward" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="sqr" stmt_handle="1390" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1391" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardBM" native="false"><ns0:return_type>LongRunTimeVariance</ns0:return_type><ns0:argument name="Reward" type="Object" /><ns0:argument name="CurrentTime" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="rewardRC" stmt_handle="1392" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Reward" /></ns0:argument><ns0:argument><ns0:variable name="CurrentTime" /></ns0:argument><ns0:argument><ns0:binary_operation operator="|" stmt_handle="1393"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1394"><ns0:left_operand><ns0:data_method_call method_name="getCurrentLength" stmt_handle="1395" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1396"><ns0:left_operand><ns0:data_method_call method_name="getCurrentLength" stmt_handle="1397" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="BatchSize" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printHeading" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="concat" stmt_handle="1398" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for Long Run Time Variance with Accuracy "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1399" super="false"><ns0:receiver><ns0:variable name="Accuracy" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="LongRunRateAverage" native="false"><ns0:super_class>PerformanceMonitor</ns0:super_class><ns0:instance_variable name="AverageReward" type="LongRunSampleAverage" /><ns0:instance_variable name="AverageTime" type="LongRunSampleAverage" /><ns0:instance_variable name="LastTime" type="Real" /><ns0:data_method name="withParameters" native="false"><ns0:return_type>LongRunRateAverage</ns0:return_type><ns0:argument name="A" type="Real" /><ns0:argument name="CL" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1400"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1401"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1402" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1403" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1404" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Accuracy parameter for Long Run Rate Average must be a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1405"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1406"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1407" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1408" super="false"><ns0:receiver><ns0:variable name="CL" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1409" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Confidence Level parameter for Long Run Rate Average must be a Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1410"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="1411"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="1412"><ns0:left_operand><ns0:variable name="A" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1413" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Accuracy parameter for Long Run Rate Average must be within the interval (0.0, 1.0)"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1414"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="1415"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="1416"><ns0:left_operand><ns0:variable name="CL" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1417" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"ConfidenceLevel parameter for Long Run Rate Average must be within the interval [0.0, 1.0)"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Accuracy"><ns0:variable name="A" /></ns0:assignment><ns0:assignment variable_name="Complete"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:data_method_call method_name="withConfidenceLevel" stmt_handle="1418" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="CL" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="register" stmt_handle="1419" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setBatchSize" native="false"><ns0:return_type>LongRunRateAverage</ns0:return_type><ns0:argument name="M" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1420"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1421"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1422" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1423" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1424" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"BatchSize parameter for Long Run Rate Average must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="1425"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="BatchSize"><ns0:variable name="M" /></ns0:assignment><ns0:data_method_call method_name="setBatchSize" stmt_handle="1427" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver><ns0:argument><ns0:variable name="BatchSize" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setBatchSize" stmt_handle="1428" super="false"><ns0:receiver><ns0:variable name="AverageTime" /></ns0:receiver><ns0:argument><ns0:variable name="BatchSize" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:data_method_call method_name="error" stmt_handle="1426" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"BatchSize parameter for Long Run Rate Average must be larger than 0"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="logTo" native="false"><ns0:return_type>LongRunRateAverage</ns0:return_type><ns0:argument name="Name" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="identifyWith" stmt_handle="1429" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Name" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="LogFile"><ns0:data_method_call method_name="open" stmt_handle="1430" super="false"><ns0:receiver><ns0:data_method_call method_name="destination" stmt_handle="1431" super="false"><ns0:receiver><ns0:new data_class="FileOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="1432" super="false"><ns0:receiver><ns0:variable name="Name" /></ns0:receiver><ns0:argument><ns0:constant type="string">".log"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="writeString" stmt_handle="1433" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="cr" stmt_handle="1434" super="false"><ns0:receiver><ns0:data_method_call method_name="cr" stmt_handle="1435" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1436" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1437" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1438" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for the Long Run Rate Average "</ns0:constant></ns0:receiver><ns0:argument><ns0:variable name="Name" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">" with Accuracy "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1439" super="false"><ns0:receiver><ns0:variable name="Accuracy" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="writeString" stmt_handle="1440" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="1441" super="false"><ns0:receiver><ns0:data_method_call method_name="logHeading" stmt_handle="1442" super="false"><ns0:receiver><ns0:variable name="IntervalEstimation" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"\t\tAccurate:\n"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="writeString" stmt_handle="1443" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver><ns0:argument><ns0:constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="close" stmt_handle="1444" super="false"><ns0:receiver><ns0:variable name="LogFile" /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardRC" native="false"><ns0:return_type>LongRunRateAverage</ns0:return_type><ns0:argument name="Reward" type="Object" /><ns0:argument name="CurrentTime" type="Real" /><ns0:argument name="RecurrenceCondition" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1445"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1446"><ns0:left_operand><ns0:variable name="Reward" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&amp;" stmt_handle="1447"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1448" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1449" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1450" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1451" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1452" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Reward for Long Run Rate Average must be an Integer or Real"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="isOfType" stmt_handle="1453" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:assignment variable_name="Reward"><ns0:data_method_call method_name="asReal" stmt_handle="1454" super="false"><ns0:receiver><ns0:variable name="Reward" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1455"><ns0:left_operand><ns0:variable name="LastTime" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="rewardRC" stmt_handle="1456" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver><ns0:argument><ns0:variable name="Reward" /></ns0:argument><ns0:argument><ns0:variable name="RecurrenceCondition" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="rewardRC" stmt_handle="1457" super="false"><ns0:receiver><ns0:variable name="AverageTime" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="1458"><ns0:left_operand><ns0:variable name="CurrentTime" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LastTime" /></ns0:right_operand></ns0:binary_operation></ns0:argument><ns0:argument><ns0:variable name="RecurrenceCondition" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="LastTime"><ns0:variable name="CurrentTime" /></ns0:assignment><ns0:if><ns0:condition><ns0:variable name="RecurrenceCondition" /></ns0:condition><ns0:then><ns0:assignment variable_name="IntervalEstimation"><ns0:binary_operation operator="/" stmt_handle="1459"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1460" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1461" super="false"><ns0:receiver><ns0:variable name="AverageTime" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rewardBM" native="false"><ns0:return_type>LongRunRateAverage</ns0:return_type><ns0:argument name="Reward" type="Object" /><ns0:argument name="CurrentTime" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="rewardRC" stmt_handle="1462" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Reward" /></ns0:argument><ns0:argument><ns0:variable name="CurrentTime" /></ns0:argument><ns0:argument><ns0:binary_operation operator="|" stmt_handle="1463"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1464"><ns0:left_operand><ns0:data_method_call method_name="getCurrentLength" stmt_handle="1465" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1466"><ns0:left_operand><ns0:data_method_call method_name="getCurrentLength" stmt_handle="1467" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="BatchSize" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="withConfidenceLevel" native="false"><ns0:return_type>LongRunRateAverage</ns0:return_type><ns0:argument name="CL" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="ConfidenceLevel"><ns0:variable name="CL" /></ns0:assignment><ns0:assignment variable_name="AverageReward"><ns0:data_method_call method_name="withConfidenceLevel" stmt_handle="1468" super="false"><ns0:receiver><ns0:new data_class="LongRunSampleAverage" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="/" stmt_handle="1469"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1470"><ns0:left_operand><ns0:variable name="ConfidenceLevel" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">2.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="AverageTime"><ns0:data_method_call method_name="withConfidenceLevel" stmt_handle="1471" super="false"><ns0:receiver><ns0:new data_class="LongRunSampleAverage" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="/" stmt_handle="1472"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1473"><ns0:left_operand><ns0:variable name="ConfidenceLevel" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="real">2.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="IntervalEstimation"><ns0:binary_operation operator="/" stmt_handle="1474"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1475" super="false"><ns0:receiver><ns0:variable name="AverageReward" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="getIntervalEstimation" stmt_handle="1476" super="false"><ns0:receiver><ns0:variable name="AverageTime" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="setDefaultBatchSize" stmt_handle="1477" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printHeading" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="concat" stmt_handle="1478" super="false"><ns0:receiver><ns0:constant type="string">"Statistics for Long Run Rate Average with Accuracy "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1479" super="false"><ns0:receiver><ns0:variable name="Accuracy" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="ConfidenceInterval" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="LowerBound" type="Real" /><ns0:instance_variable name="UpperBound" type="Real" /><ns0:instance_variable name="ConfidenceLevel" type="Real" /><ns0:data_method name="negate" native="false"><ns0:return_type>ConfidenceInterval</ns0:return_type><ns0:local_variable name="Lower" type="Real" /><ns0:local_variable name="Upper" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedNegate" stmt_handle="1480" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedNegate" stmt_handle="1481" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:return><ns0:data_method_call method_name="withParameters" stmt_handle="1482" super="false"><ns0:receiver><ns0:new data_class="ConfidenceInterval" /></ns0:receiver><ns0:argument><ns0:variable name="Lower" /></ns0:argument><ns0:argument><ns0:variable name="Upper" /></ns0:argument><ns0:argument><ns0:variable name="ConfidenceLevel" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="reciprocal" native="false"><ns0:return_type>ConfidenceInterval</ns0:return_type><ns0:local_variable name="Lower" type="Real" /><ns0:local_variable name="Upper" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="1483"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="extendedLowerLessZero" stmt_handle="1484" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="extendedUpperGreaterZero" stmt_handle="1485" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:nil /></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:nil /></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedReciprocal" stmt_handle="1486" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedReciprocal" stmt_handle="1487" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:return><ns0:data_method_call method_name="withParameters" stmt_handle="1488" super="false"><ns0:receiver><ns0:new data_class="ConfidenceInterval" /></ns0:receiver><ns0:argument><ns0:variable name="Lower" /></ns0:argument><ns0:argument><ns0:variable name="Upper" /></ns0:argument><ns0:argument><ns0:variable name="ConfidenceLevel" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="sqr" native="false"><ns0:return_type>ConfidenceInterval</ns0:return_type><ns0:local_variable name="Lower" type="Real" /><ns0:local_variable name="Upper" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:data_method_call method_name="extendedLowerGreaterEqualZero" stmt_handle="1489" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1496" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1497" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:data_method_call method_name="extendedUpperLessZero" stmt_handle="1490" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1494" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1495" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:constant type="real">0.0</ns0:constant></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedMax" stmt_handle="1491" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="extendedTimes" stmt_handle="1492" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument></ns0:data_method_call></ns0:argument><ns0:argument><ns0:data_method_call method_name="extendedTimes" stmt_handle="1493" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:else></ns0:if></ns0:else></ns0:if><ns0:return><ns0:data_method_call method_name="withParameters" stmt_handle="1498" super="false"><ns0:receiver><ns0:new data_class="ConfidenceInterval" /></ns0:receiver><ns0:argument><ns0:variable name="Lower" /></ns0:argument><ns0:argument><ns0:variable name="Upper" /></ns0:argument><ns0:argument><ns0:variable name="ConfidenceLevel" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="extendedPlus" native="false"><ns0:return_type>Real</ns0:return_type><ns0:argument name="x" type="Real" /><ns0:argument name="y" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1499"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1500"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1501"><ns0:left_operand><ns0:variable name="y" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:nil /></ns0:return></ns0:then><ns0:else><ns0:return><ns0:binary_operation operator="+" stmt_handle="1502"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:variable name="y" /></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="extendedNegate" native="false"><ns0:return_type>Real</ns0:return_type><ns0:argument name="x" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1503"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:nil /></ns0:return></ns0:then><ns0:else><ns0:return><ns0:unary_operation operator="-" stmt_handle="1504"><ns0:operand><ns0:variable name="x" /></ns0:operand></ns0:unary_operation></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="extendedTimes" native="false"><ns0:return_type>Real</ns0:return_type><ns0:argument name="x" type="Real" /><ns0:argument name="y" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1505"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1506"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1507"><ns0:left_operand><ns0:variable name="y" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:nil /></ns0:return></ns0:then><ns0:else><ns0:return><ns0:binary_operation operator="*" stmt_handle="1508"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:variable name="y" /></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="extendedReciprocal" native="false"><ns0:return_type>Real</ns0:return_type><ns0:argument name="x" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1509"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:constant type="real">0.0</ns0:constant></ns0:return></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1510"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:nil /></ns0:return></ns0:then><ns0:else><ns0:return><ns0:binary_operation operator="/" stmt_handle="1511"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="x" /></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:else></ns0:if></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="extendedMin" native="false"><ns0:return_type>Real</ns0:return_type><ns0:argument name="x" type="Real" /><ns0:argument name="y" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1512"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1513"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1514"><ns0:left_operand><ns0:variable name="y" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:nil /></ns0:return></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1515"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:variable name="y" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:variable name="x" /></ns0:return></ns0:then><ns0:else><ns0:return><ns0:variable name="y" /></ns0:return></ns0:else></ns0:if></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="extendedMax" native="false"><ns0:return_type>Real</ns0:return_type><ns0:argument name="x" type="Real" /><ns0:argument name="y" type="Real" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1516"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1517"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1518"><ns0:left_operand><ns0:variable name="y" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:nil /></ns0:return></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="1519"><ns0:left_operand><ns0:variable name="x" /></ns0:left_operand><ns0:right_operand><ns0:variable name="y" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:variable name="x" /></ns0:return></ns0:then><ns0:else><ns0:return><ns0:variable name="y" /></ns0:return></ns0:else></ns0:if></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="extendedLowerLessZero" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1520"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:constant type="boolean">true</ns0:constant></ns0:return></ns0:then><ns0:else><ns0:return><ns0:binary_operation operator="&lt;" stmt_handle="1521"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="extendedLowerGreaterEqualZero" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1522"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:constant type="boolean">false</ns0:constant></ns0:return></ns0:then><ns0:else><ns0:return><ns0:binary_operation operator="&gt;=" stmt_handle="1523"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="extendedUpperLessZero" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1524"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:constant type="boolean">false</ns0:constant></ns0:return></ns0:then><ns0:else><ns0:return><ns0:binary_operation operator="&lt;" stmt_handle="1525"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="extendedUpperGreaterZero" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1526"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:constant type="boolean">true</ns0:constant></ns0:return></ns0:then><ns0:else><ns0:return><ns0:binary_operation operator="&gt;" stmt_handle="1527"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="withParameters" native="false"><ns0:return_type>ConfidenceInterval</ns0:return_type><ns0:argument name="Lower" type="Real" /><ns0:argument name="Upper" type="Real" /><ns0:argument name="Level" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="LowerBound"><ns0:variable name="Lower" /></ns0:assignment><ns0:assignment variable_name="UpperBound"><ns0:variable name="Upper" /></ns0:assignment><ns0:assignment variable_name="ConfidenceLevel"><ns0:variable name="Level" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="getLowerBound" native="false"><ns0:return_type>Real</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="LowerBound" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="getUpperBound" native="false"><ns0:return_type>Real</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="UpperBound" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="getConfidenceLevel" native="false"><ns0:return_type>Real</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="ConfidenceLevel" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="getRelativeError" native="false"><ns0:return_type>Real</ns0:return_type><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1528"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1529"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1530"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:nil /></ns0:return></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="1531"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:binary_operation operator="/" stmt_handle="1536"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="1537"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1538"><ns0:left_operand><ns0:constant type="real">2.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="LowerBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1532"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">0.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:binary_operation operator="/" stmt_handle="1533"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="1534"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1535"><ns0:left_operand><ns0:constant type="real">2.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:else></ns0:if></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="accurate" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="Accuracy" type="Real" /><ns0:local_variable name="RelativeError" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="RelativeError"><ns0:data_method_call method_name="getRelativeError" stmt_handle="1539" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1540"><ns0:left_operand><ns0:variable name="RelativeError" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:constant type="boolean">false</ns0:constant></ns0:return></ns0:then><ns0:else><ns0:return><ns0:binary_operation operator="&lt;=" stmt_handle="1541"><ns0:left_operand><ns0:variable name="RelativeError" /></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="-" stmt_handle="1542"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="Accuracy" /></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="result" native="false"><ns0:return_type>Real</ns0:return_type><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="1543"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="1544"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="1545"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:binary_operation operator="*" stmt_handle="1546"><ns0:left_operand><ns0:constant type="real">0.5</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1547"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="printHeading" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:constant type="string">"Point Estimation:\tConfidence Interval:\t\t\t\t\t\tConfidence Level:\tRelative Error:"</ns0:constant></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="printStatistics" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="RelativeError" type="Real" /><ns0:local_variable name="PrintOut" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1548"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1549"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1550"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="PrintOut"><ns0:data_method_call method_name="tab" stmt_handle="1554" super="false"><ns0:receiver><ns0:constant type="string">"Not Specified"</ns0:constant></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then><ns0:else><ns0:assignment variable_name="PrintOut"><ns0:data_method_call method_name="printString" stmt_handle="1551" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1552"><ns0:left_operand><ns0:constant type="real">0.5</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1553"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:else></ns0:if><ns0:data_method_call method_name="concat" stmt_handle="1555" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="1556" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"["</ns0:constant></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1557"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1560" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"-inf"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then><ns0:else><ns0:data_method_call method_name="concat" stmt_handle="1558" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1559" super="false"><ns0:receiver><ns0:variable name="LowerBound" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:data_method_call method_name="concat" stmt_handle="1561" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">", "</ns0:constant></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1562"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1565" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"inf"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then><ns0:else><ns0:data_method_call method_name="concat" stmt_handle="1563" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1564" super="false"><ns0:receiver><ns0:variable name="UpperBound" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:data_method_call method_name="concat" stmt_handle="1566" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"]\t"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="concat" stmt_handle="1567" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1568" super="false"><ns0:receiver><ns0:variable name="ConfidenceLevel" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="tab" stmt_handle="1569" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="1570" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="1571" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="1572" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call><ns0:assignment variable_name="RelativeError"><ns0:data_method_call method_name="getRelativeError" stmt_handle="1573" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1574"><ns0:left_operand><ns0:variable name="RelativeError" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1577" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"inf\n\n\n\n"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then><ns0:else><ns0:data_method_call method_name="concat" stmt_handle="1575" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1576" super="false"><ns0:receiver><ns0:variable name="RelativeError" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:return><ns0:variable name="PrintOut" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="concat" stmt_handle="1578" super="false"><ns0:receiver><ns0:data_method_call method_name="cr" stmt_handle="1579" super="false"><ns0:receiver><ns0:data_method_call method_name="printHeading" stmt_handle="1580" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printStatistics" stmt_handle="1581" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="logHeading" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:constant type="string">"Point Estimation:\tConfidence Interval:\t\t\tConfidence Level:\tRelative Error:"</ns0:constant></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="logStatistics" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="RelativeError" type="Real" /><ns0:local_variable name="LogOut" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1582"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1583"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1584"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="LogOut"><ns0:data_method_call method_name="tab" stmt_handle="1588" super="false"><ns0:receiver><ns0:constant type="string">"Not Specified"</ns0:constant></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then><ns0:else><ns0:assignment variable_name="LogOut"><ns0:data_method_call method_name="printString" stmt_handle="1585" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="*" stmt_handle="1586"><ns0:left_operand><ns0:constant type="real">0.5</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="1587"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:variable name="UpperBound" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:else></ns0:if><ns0:data_method_call method_name="concat" stmt_handle="1589" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="1590" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"["</ns0:constant></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1591"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1594" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"-inf"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then><ns0:else><ns0:data_method_call method_name="concat" stmt_handle="1592" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1593" super="false"><ns0:receiver><ns0:variable name="LowerBound" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:data_method_call method_name="concat" stmt_handle="1595" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">", "</ns0:constant></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1596"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1599" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"inf"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then><ns0:else><ns0:data_method_call method_name="concat" stmt_handle="1597" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1598" super="false"><ns0:receiver><ns0:variable name="UpperBound" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:data_method_call method_name="tab" stmt_handle="1600" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1601" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="1602"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1603"><ns0:left_operand><ns0:variable name="LowerBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1604"><ns0:left_operand><ns0:variable name="UpperBound" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="tab" stmt_handle="1605" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="1606" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="1607" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:data_method_call method_name="concat" stmt_handle="1608" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1609" super="false"><ns0:receiver><ns0:variable name="ConfidenceLevel" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="tab" stmt_handle="1610" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="1611" super="false"><ns0:receiver><ns0:data_method_call method_name="tab" stmt_handle="1612" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call><ns0:assignment variable_name="RelativeError"><ns0:data_method_call method_name="getRelativeError" stmt_handle="1613" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="==" stmt_handle="1614"><ns0:left_operand><ns0:variable name="RelativeError" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="tab" stmt_handle="1617" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1618" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"inf"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:then><ns0:else><ns0:data_method_call method_name="concat" stmt_handle="1615" super="false"><ns0:receiver><ns0:variable name="LogOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1616" super="false"><ns0:receiver><ns0:variable name="RelativeError" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:return><ns0:variable name="LogOut" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="+" native="false"><ns0:return_type>ConfidenceInterval</ns0:return_type><ns0:argument name="CI" type="ConfidenceInterval" /><ns0:local_variable name="Lower" type="Real" /><ns0:local_variable name="Upper" type="Real" /><ns0:local_variable name="Level" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedPlus" stmt_handle="1619" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getLowerBound" stmt_handle="1620" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedPlus" stmt_handle="1621" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getUpperBound" stmt_handle="1622" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Level"><ns0:binary_operation operator="-" stmt_handle="1623"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="1624"><ns0:left_operand><ns0:variable name="ConfidenceLevel" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="getConfidenceLevel" stmt_handle="1625" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:data_method_call method_name="withParameters" stmt_handle="1626" super="false"><ns0:receiver><ns0:new data_class="ConfidenceInterval" /></ns0:receiver><ns0:argument><ns0:variable name="Lower" /></ns0:argument><ns0:argument><ns0:variable name="Upper" /></ns0:argument><ns0:argument><ns0:variable name="Level" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="-" native="false"><ns0:return_type>ConfidenceInterval</ns0:return_type><ns0:argument name="CI" type="ConfidenceInterval" /><ns0:body_expression><ns0:return><ns0:binary_operation operator="+" stmt_handle="1627"><ns0:left_operand><ns0:self /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="negate" stmt_handle="1628" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="*" native="false"><ns0:return_type>ConfidenceInterval</ns0:return_type><ns0:argument name="CI" type="ConfidenceInterval" /><ns0:local_variable name="Lower" type="Real" /><ns0:local_variable name="Upper" type="Real" /><ns0:local_variable name="Level" type="Real" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:data_method_call method_name="extendedLowerGreaterEqualZero" stmt_handle="1629" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:if><ns0:condition><ns0:data_method_call method_name="extendedLowerGreaterEqualZero" stmt_handle="1665" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1675" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getLowerBound" stmt_handle="1676" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1677" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getUpperBound" stmt_handle="1678" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:data_method_call method_name="extendedUpperLessZero" stmt_handle="1666" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1671" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getLowerBound" stmt_handle="1672" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1673" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getUpperBound" stmt_handle="1674" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1667" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getLowerBound" stmt_handle="1668" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1669" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getUpperBound" stmt_handle="1670" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:else></ns0:if></ns0:else></ns0:if></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:data_method_call method_name="extendedUpperLessZero" stmt_handle="1630" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:if><ns0:condition><ns0:data_method_call method_name="extendedLowerGreaterEqualZero" stmt_handle="1651" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1661" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getUpperBound" stmt_handle="1662" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1663" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getLowerBound" stmt_handle="1664" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:data_method_call method_name="extendedUpperLessZero" stmt_handle="1652" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1657" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getUpperBound" stmt_handle="1658" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1659" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getLowerBound" stmt_handle="1660" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1653" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getUpperBound" stmt_handle="1654" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1655" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getLowerBound" stmt_handle="1656" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:else></ns0:if></ns0:else></ns0:if></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:data_method_call method_name="extendedLowerGreaterEqualZero" stmt_handle="1631" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1647" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getUpperBound" stmt_handle="1648" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1649" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getUpperBound" stmt_handle="1650" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:if><ns0:condition><ns0:data_method_call method_name="extendedUpperLessZero" stmt_handle="1632" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1643" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getLowerBound" stmt_handle="1644" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedTimes" stmt_handle="1645" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getLowerBound" stmt_handle="1646" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="Lower"><ns0:data_method_call method_name="extendedMin" stmt_handle="1633" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="extendedTimes" stmt_handle="1634" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getUpperBound" stmt_handle="1635" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument><ns0:argument><ns0:data_method_call method_name="extendedTimes" stmt_handle="1636" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getLowerBound" stmt_handle="1637" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Upper"><ns0:data_method_call method_name="extendedMax" stmt_handle="1638" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="extendedTimes" stmt_handle="1639" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="LowerBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getLowerBound" stmt_handle="1640" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument><ns0:argument><ns0:data_method_call method_name="extendedTimes" stmt_handle="1641" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="UpperBound" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="getUpperBound" stmt_handle="1642" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:else></ns0:if></ns0:else></ns0:if></ns0:else></ns0:if></ns0:else></ns0:if><ns0:assignment variable_name="Level"><ns0:binary_operation operator="-" stmt_handle="1679"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="1680"><ns0:left_operand><ns0:variable name="ConfidenceLevel" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="getConfidenceLevel" stmt_handle="1681" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:data_method_call method_name="withParameters" stmt_handle="1682" super="false"><ns0:receiver><ns0:new data_class="ConfidenceInterval" /></ns0:receiver><ns0:argument><ns0:variable name="Lower" /></ns0:argument><ns0:argument><ns0:variable name="Upper" /></ns0:argument><ns0:argument><ns0:variable name="Level" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="/" native="false"><ns0:return_type>ConfidenceInterval</ns0:return_type><ns0:argument name="CI" type="ConfidenceInterval" /><ns0:body_expression><ns0:return><ns0:binary_operation operator="*" stmt_handle="1683"><ns0:left_operand><ns0:self /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="reciprocal" stmt_handle="1684" super="false"><ns0:receiver><ns0:variable name="CI" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Array2D" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="RowArray" type="Array" /><ns0:instance_variable name="Rows" type="Integer" /><ns0:instance_variable name="Columns" type="Integer" /><ns0:data_method name="size" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1685"><ns0:left_operand><ns0:variable name="RowArray" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="resize" stmt_handle="1686" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:binary_operation operator="*" stmt_handle="1687"><ns0:left_operand><ns0:variable name="Rows" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Columns" /></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="rows" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1688"><ns0:left_operand><ns0:variable name="RowArray" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="resize" stmt_handle="1689" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Rows" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="columns" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1690"><ns0:left_operand><ns0:variable name="RowArray" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="resize" stmt_handle="1691" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Columns" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="resize" native="false"><ns0:return_type>Array2D</ns0:return_type><ns0:argument name="R" type="Integer" /><ns0:argument name="C" type="Integer" /><ns0:local_variable name="I" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1692"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="1693"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="1694"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1695"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1696" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1697" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1698"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1699" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1700" super="false"><ns0:receiver><ns0:variable name="C" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1701" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameters for method \"resize\" of Array2D must be Integers"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1702"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="1703"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="1704"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1705" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameters for method \"resize\" of Array2D must not be negative"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1706"><ns0:left_operand><ns0:variable name="RowArray" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="RowArray"><ns0:new data_class="Array" /></ns0:assignment><ns0:assignment variable_name="Rows"><ns0:constant type="integer">0</ns0:constant></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="Columns"><ns0:variable name="C" /></ns0:assignment><ns0:data_method_call method_name="resize" stmt_handle="1707" super="false"><ns0:receiver><ns0:variable name="RowArray" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="1708"><ns0:left_operand><ns0:variable name="Rows" /></ns0:left_operand><ns0:right_operand><ns0:variable name="R" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="Rows"><ns0:variable name="R" /></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="I"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1709"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Rows" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="I"><ns0:binary_operation operator="+" stmt_handle="1710"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="resize" stmt_handle="1711" super="false"><ns0:receiver><ns0:data_method_call method_name="at" stmt_handle="1712" super="false"><ns0:receiver><ns0:variable name="RowArray" /></ns0:receiver><ns0:argument><ns0:variable name="I" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="Columns" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1713"><ns0:left_operand><ns0:variable name="Rows" /></ns0:left_operand><ns0:right_operand><ns0:variable name="R" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="Rows"><ns0:binary_operation operator="+" stmt_handle="1714"><ns0:left_operand><ns0:variable name="Rows" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="putAt" stmt_handle="1715" super="false"><ns0:receiver><ns0:variable name="RowArray" /></ns0:receiver><ns0:argument><ns0:variable name="Rows" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="resize" stmt_handle="1716" super="false"><ns0:receiver><ns0:new data_class="Array" /></ns0:receiver><ns0:argument><ns0:variable name="Columns" /></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="at" native="false"><ns0:return_type>Object</ns0:return_type><ns0:argument name="R" type="Integer" /><ns0:argument name="C" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1717"><ns0:left_operand><ns0:variable name="RowArray" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="resize" stmt_handle="1718" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1719"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="1720"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="1721"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1722"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1723" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1724" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1725"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1726" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1727" super="false"><ns0:receiver><ns0:variable name="C" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1728" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameters for method \"at\" of Array2D must be Integers"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1729"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="1730"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="1731"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="1732"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="1733"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="1734"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Rows" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="1735"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Columns" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1736" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Index out of bounds for method \"at\" of Array2D"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:data_method_call method_name="at" stmt_handle="1737" super="false"><ns0:receiver><ns0:data_method_call method_name="at" stmt_handle="1738" super="false"><ns0:receiver><ns0:variable name="RowArray" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="C" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="putAt" native="false"><ns0:return_type>Array2D</ns0:return_type><ns0:argument name="R" type="Integer" /><ns0:argument name="C" type="Integer" /><ns0:argument name="anObject" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1739"><ns0:left_operand><ns0:variable name="RowArray" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="resize" stmt_handle="1740" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1741"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="1742"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="1743"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1744"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1745" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1746" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="1747"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="1748" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1749" super="false"><ns0:receiver><ns0:variable name="C" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1750" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Firt and second parameters for method \"putAt\" of Array2D must be Integers"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="1751"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="1752"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="1753"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="1754"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="1755"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="1756"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Rows" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="1757"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Columns" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1758" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Index out of bounds for method \"putAt\" of Array2D"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:data_method_call method_name="putAt" stmt_handle="1759" super="false"><ns0:receiver><ns0:data_method_call method_name="at" stmt_handle="1760" super="false"><ns0:receiver><ns0:variable name="RowArray" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="C" /></ns0:argument><ns0:argument><ns0:variable name="anObject" /></ns0:argument></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="putAll" native="false"><ns0:return_type>Array2D</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="I" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1761"><ns0:left_operand><ns0:variable name="RowArray" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="resize" stmt_handle="1762" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="I"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="1763"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Rows" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="putAll" stmt_handle="1764" super="false"><ns0:receiver><ns0:data_method_call method_name="at" stmt_handle="1765" super="false"><ns0:receiver><ns0:variable name="RowArray" /></ns0:receiver><ns0:argument><ns0:variable name="I" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="I"><ns0:binary_operation operator="+" stmt_handle="1766"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="Out" type="String" /><ns0:local_variable name="I" type="Integer" /><ns0:local_variable name="J" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1767"><ns0:left_operand><ns0:variable name="RowArray" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="resize" stmt_handle="1768" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="1769"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="1770"><ns0:left_operand><ns0:variable name="Rows" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="1771"><ns0:left_operand><ns0:variable name="Columns" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Out"><ns0:data_method_call method_name="concat" stmt_handle="1772" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1773" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1774" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1775" super="false"><ns0:receiver><ns0:constant type="string">"Array2D["</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1776" super="false"><ns0:receiver><ns0:variable name="Rows" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">","</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1777" super="false"><ns0:receiver><ns0:variable name="Columns" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]:\n"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="I"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1778"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Rows" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="I"><ns0:binary_operation operator="+" stmt_handle="1779"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="J"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:data_method_call method_name="concat" stmt_handle="1780" super="false"><ns0:receiver><ns0:variable name="Out" /></ns0:receiver><ns0:argument><ns0:constant type="string">"["</ns0:constant></ns0:argument></ns0:data_method_call><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1781"><ns0:left_operand><ns0:variable name="J" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Columns" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="J"><ns0:binary_operation operator="+" stmt_handle="1782"><ns0:left_operand><ns0:variable name="J" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="concat" stmt_handle="1783" super="false"><ns0:receiver><ns0:variable name="Out" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1784" super="false"><ns0:receiver><ns0:data_method_call method_name="at" stmt_handle="1785" super="false"><ns0:receiver><ns0:data_method_call method_name="at" stmt_handle="1786" super="false"><ns0:receiver><ns0:variable name="RowArray" /></ns0:receiver><ns0:argument><ns0:variable name="I" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="J" /></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1787"><ns0:left_operand><ns0:variable name="J" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Columns" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1788" super="false"><ns0:receiver><ns0:variable name="Out" /></ns0:receiver><ns0:argument><ns0:constant type="string">", "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="concat" stmt_handle="1789" super="false"><ns0:receiver><ns0:variable name="Out" /></ns0:receiver><ns0:argument><ns0:constant type="string">"]\n"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:assignment variable_name="Out"><ns0:constant type="string">"Array2D[0,0]"</ns0:constant></ns0:assignment></ns0:else></ns0:if><ns0:return><ns0:variable name="Out" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Queue" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="Occupation" type="Integer" /><ns0:instance_variable name="Size" type="Integer" /><ns0:instance_variable name="Root" type="StructureElement" /><ns0:data_method name="clear" native="false"><ns0:return_type>Queue</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Root"><ns0:new data_class="StructureElement" /></ns0:assignment><ns0:data_method_call method_name="setPrevious" stmt_handle="1790" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="1791" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Occupation"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="resize" native="false"><ns0:return_type>Queue</ns0:return_type><ns0:argument name="S" type="Integer" /><ns0:local_variable name="R" type="StructureElement" /><ns0:local_variable name="C" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:data_method_call method_name="not" stmt_handle="1792" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1793" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1794" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"resize\" of Queue must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1795"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1796" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1797"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1798"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1799" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"resize\" of Queue must be positive"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1800"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Occupation" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Occupation"><ns0:variable name="S" /></ns0:assignment><ns0:assignment variable_name="C"><ns0:variable name="S" /></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1801" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="C"><ns0:binary_operation operator="-" stmt_handle="1802"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1803"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1804" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="C"><ns0:binary_operation operator="-" stmt_handle="1805"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="setNext" stmt_handle="1806" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="1807" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="Size"><ns0:variable name="S" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="size" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1808"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1809" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Size" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="occupation" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1810"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1811" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Occupation" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="isEmpty" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1812"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1813" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:binary_operation operator="=" stmt_handle="1814"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="isFull" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1815"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1816" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1817"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:constant type="boolean">false</ns0:constant></ns0:then><ns0:else><ns0:binary_operation operator="=" stmt_handle="1818"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:else></ns0:if></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="excludes" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:body_expression><ns0:return><ns0:data_method_call method_name="not" stmt_handle="1819" super="false"><ns0:receiver><ns0:data_method_call method_name="includes" stmt_handle="1820" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="includes" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="StructureElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1821"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1822" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1823" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="1824"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="1825"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1826"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="1827" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="O" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1828" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:data_method_call method_name="not" stmt_handle="1829" super="false"><ns0:receiver><ns0:variable name="NF" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="count" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="StructureElement" /><ns0:local_variable name="C" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1830"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1831" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="C"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1832" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1833"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1834"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="1835" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="O" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="C"><ns0:binary_operation operator="+" stmt_handle="1836"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1837" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="C" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="add" native="false"><ns0:return_type>Queue</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="StructureElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1838"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1839" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1840"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1849"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="setElement" stmt_handle="1850" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="1851" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="1852" super="false"><ns0:receiver><ns0:new data_class="StructureElement" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="1853" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="1854" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="1855" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="1856" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Occupation"><ns0:binary_operation operator="+" stmt_handle="1857"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="setElement" stmt_handle="1841" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="1842" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="1843" super="false"><ns0:receiver><ns0:new data_class="StructureElement" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="1844" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="1845" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="1846" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="1847" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Occupation"><ns0:binary_operation operator="+" stmt_handle="1848"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="inspect" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1858"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1859" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1860"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="element" stmt_handle="1861" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="1862" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:then><ns0:else><ns0:nil /></ns0:else></ns0:if></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="remove" native="false"><ns0:return_type>Object</ns0:return_type><ns0:local_variable name="R" type="StructureElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1863"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1864" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1865"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Occupation"><ns0:binary_operation operator="-" stmt_handle="1866"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1867" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="1868" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="1869" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="1870" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="1871" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call><ns0:return><ns0:data_method_call method_name="element" stmt_handle="1872" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="PrintOut" type="String" /><ns0:local_variable name="R" type="StructureElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1873"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1874" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1875"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Empty "</ns0:constant></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1894"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1895" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Unbounded "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:data_method_call method_name="concat" stmt_handle="1896" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Queue"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1897"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1898" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1899" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1900" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">" [Size = "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1901" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">""</ns0:constant></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1876"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1877" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Unbounded "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:data_method_call method_name="concat" stmt_handle="1878" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Queue"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1879"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1881" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1882" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1883" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">" [Size = "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1884" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"] {"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then><ns0:else><ns0:data_method_call method_name="concat" stmt_handle="1880" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">" {"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1885" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1886"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="concat" stmt_handle="1887" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1888" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1889"><ns0:left_operand><ns0:data_method_call method_name="next" stmt_handle="1890" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1891" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">", "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1892" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="concat" stmt_handle="1893" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"}"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:return><ns0:variable name="PrintOut" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Stack" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="Occupation" type="Integer" /><ns0:instance_variable name="Size" type="Integer" /><ns0:instance_variable name="Root" type="StructureElement" /><ns0:data_method name="clear" native="false"><ns0:return_type>Stack</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Root"><ns0:new data_class="StructureElement" /></ns0:assignment><ns0:data_method_call method_name="setPrevious" stmt_handle="1902" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="1903" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Occupation"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="resize" native="false"><ns0:return_type>Stack</ns0:return_type><ns0:argument name="S" type="Integer" /><ns0:local_variable name="R" type="StructureElement" /><ns0:local_variable name="C" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:data_method_call method_name="not" stmt_handle="1904" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="1905" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1906" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"resize\" of Stack must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1907"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1908" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1909"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1910"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="1911" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"resize\" of Stack must be positive"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1912"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Occupation" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Occupation"><ns0:variable name="S" /></ns0:assignment><ns0:assignment variable_name="C"><ns0:variable name="S" /></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1913" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="C"><ns0:binary_operation operator="-" stmt_handle="1914"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1915"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1916" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="C"><ns0:binary_operation operator="-" stmt_handle="1917"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="setNext" stmt_handle="1918" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="1919" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="Size"><ns0:variable name="S" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="size" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1920"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1921" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Size" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="occupation" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1922"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1923" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Occupation" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="isEmpty" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1924"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1925" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:binary_operation operator="=" stmt_handle="1926"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="isFull" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1927"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1928" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1929"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:constant type="boolean">false</ns0:constant></ns0:then><ns0:else><ns0:binary_operation operator="=" stmt_handle="1930"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:else></ns0:if></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="excludes" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:body_expression><ns0:return><ns0:data_method_call method_name="not" stmt_handle="1931" super="false"><ns0:receiver><ns0:data_method_call method_name="includes" stmt_handle="1932" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="includes" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="StructureElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1933"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1934" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1935" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="1936"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="1937"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1938"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="1939" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="O" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1940" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:data_method_call method_name="not" stmt_handle="1941" super="false"><ns0:receiver><ns0:variable name="NF" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="count" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="StructureElement" /><ns0:local_variable name="C" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1942"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1943" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="C"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1944" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1945"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1946"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="1947" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="O" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="C"><ns0:binary_operation operator="+" stmt_handle="1948"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1949" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="C" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="push" native="false"><ns0:return_type>Stack</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="StructureElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1950"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1951" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1952"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="1961"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="setElement" stmt_handle="1962" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="1963" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="1964" super="false"><ns0:receiver><ns0:new data_class="StructureElement" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="1965" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="1966" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="1967" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="1968" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Occupation"><ns0:binary_operation operator="+" stmt_handle="1969"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="setElement" stmt_handle="1953" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="1954" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="1955" super="false"><ns0:receiver><ns0:new data_class="StructureElement" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="1956" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="1957" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="1958" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="1959" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Occupation"><ns0:binary_operation operator="+" stmt_handle="1960"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="inspect" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1970"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1971" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1972"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="element" stmt_handle="1973" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="1974" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:then><ns0:else><ns0:nil /></ns0:else></ns0:if></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="pop" native="false"><ns0:return_type>Object</ns0:return_type><ns0:local_variable name="R" type="StructureElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1975"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1976" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1977"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Occupation"><ns0:binary_operation operator="-" stmt_handle="1978"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="previous" stmt_handle="1979" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setPrevious" stmt_handle="1980" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="1981" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="1982" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="1983" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call><ns0:return><ns0:data_method_call method_name="element" stmt_handle="1984" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:nil /></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="PrintOut" type="String" /><ns0:local_variable name="R" type="StructureElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1985"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="1986" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1987"><ns0:left_operand><ns0:variable name="Occupation" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Empty "</ns0:constant></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2006"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="2007" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Unbounded "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:data_method_call method_name="concat" stmt_handle="2008" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Stack"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2009"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="2010" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="2011" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="2012" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">" [Size = "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="2013" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">""</ns0:constant></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="1988"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1989" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Unbounded "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:data_method_call method_name="concat" stmt_handle="1990" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Stack"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1991"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="1993" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1994" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="1995" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">" [Size = "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="1996" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"] {"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then><ns0:else><ns0:data_method_call method_name="concat" stmt_handle="1992" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">" {"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="1997" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="1998"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="concat" stmt_handle="1999" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="2000" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2001"><ns0:left_operand><ns0:data_method_call method_name="next" stmt_handle="2002" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="2003" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">", "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2004" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="concat" stmt_handle="2005" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"}"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:return><ns0:variable name="PrintOut" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Map" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="Size" type="Integer" /><ns0:instance_variable name="Root" type="MapElement" /><ns0:data_method name="clear" native="false"><ns0:return_type>Map</ns0:return_type><ns0:local_variable name="R" type="MapElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2014"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2016" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2017"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="setRemoved" stmt_handle="2018" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2019" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:assignment variable_name="Root"><ns0:data_method_call method_name="setRemoved" stmt_handle="2015" super="false"><ns0:receiver><ns0:new data_class="MapElement" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:else></ns0:if><ns0:data_method_call method_name="setPrevious" stmt_handle="2020" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="2021" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="isEmpty" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2022"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2023" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:binary_operation operator="=" stmt_handle="2024"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="size" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2025"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2026" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Size" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="iterator" native="false"><ns0:return_type>MapIterator</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2027"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2028" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:data_method_call method_name="referringTo" stmt_handle="2029" super="false"><ns0:receiver><ns0:new data_class="MapIterator" /></ns0:receiver><ns0:argument><ns0:self /></ns0:argument><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2030" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="includesKey" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="K" type="Object" /><ns0:local_variable name="R" type="MapElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2031"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2032" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2033" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2034"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2035"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2036"><ns0:left_operand><ns0:data_method_call method_name="key" stmt_handle="2037" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="K" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2038" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:data_method_call method_name="not" stmt_handle="2039" super="false"><ns0:receiver><ns0:variable name="NF" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="includesValue" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="V" type="Object" /><ns0:local_variable name="R" type="MapElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2040"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2041" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2042" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2043"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2044"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2045"><ns0:left_operand><ns0:data_method_call method_name="value" stmt_handle="2046" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="V" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2047" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:data_method_call method_name="not" stmt_handle="2048" super="false"><ns0:receiver><ns0:variable name="NF" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="keys" native="false"><ns0:return_type>Set</ns0:return_type><ns0:local_variable name="R" type="MapElement" /><ns0:local_variable name="S" type="Set" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2049"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2050" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2051" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="S"><ns0:data_method_call method_name="clear" stmt_handle="2052" super="false"><ns0:receiver><ns0:new data_class="Set" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2053"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="add" stmt_handle="2054" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="key" stmt_handle="2055" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2056" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="S" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="values" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:local_variable name="R" type="MapElement" /><ns0:local_variable name="B" type="Bag" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2057"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2058" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2059" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="B"><ns0:data_method_call method_name="clear" stmt_handle="2060" super="false"><ns0:receiver><ns0:new data_class="Bag" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2061"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="add" stmt_handle="2062" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="value" stmt_handle="2063" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2064" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="B" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="putAt" native="false"><ns0:return_type>Map</ns0:return_type><ns0:argument name="Key" type="Object" /><ns0:argument name="Value" type="Object" /><ns0:local_variable name="R" type="MapElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2065"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2066" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2067" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2068"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2069"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2070"><ns0:left_operand><ns0:data_method_call method_name="key" stmt_handle="2071" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Key" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="setValue" stmt_handle="2072" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="Value" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2073" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:if><ns0:condition><ns0:variable name="NF" /></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="setValue" stmt_handle="2074" super="false"><ns0:receiver><ns0:data_method_call method_name="setKey" stmt_handle="2075" super="false"><ns0:receiver><ns0:data_method_call method_name="setRemoved" stmt_handle="2076" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="2077" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="2078" super="false"><ns0:receiver><ns0:new data_class="MapElement" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2079" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="Key" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="Value" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="2080" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2081" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2082" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="2083"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="at" native="false"><ns0:return_type>Object</ns0:return_type><ns0:argument name="Key" type="Object" /><ns0:local_variable name="R" type="MapElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:local_variable name="Value" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2084"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2085" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="Value"><ns0:nil /></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2086" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2087"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2088"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2089"><ns0:left_operand><ns0:data_method_call method_name="key" stmt_handle="2090" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Key" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Value"><ns0:data_method_call method_name="value" stmt_handle="2091" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2092" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="Value" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="removeAt" native="false"><ns0:return_type>Map</ns0:return_type><ns0:argument name="Key" type="Object" /><ns0:local_variable name="R" type="MapElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2093"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2094" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2095" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2096"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2097"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2098"><ns0:left_operand><ns0:data_method_call method_name="key" stmt_handle="2099" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Key" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:data_method_call method_name="setRemoved" stmt_handle="2100" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2101" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="2102" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2103" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2104" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2105" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2106" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="-" stmt_handle="2107"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2108" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="R" type="MapElement" /><ns0:local_variable name="PrintOut" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2109"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2110" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2111"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Empty Map"</ns0:constant></ns0:assignment></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Map{"</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2112" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2113"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="concat" stmt_handle="2114" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="2115" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2116"><ns0:left_operand><ns0:data_method_call method_name="next" stmt_handle="2117" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="2118" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">", "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2119" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="concat" stmt_handle="2120" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"}"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:return><ns0:variable name="PrintOut" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="resize" native="false"><ns0:return_type>Map</ns0:return_type><ns0:argument name="S" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2121"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2122" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Size"><ns0:variable name="S" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="root" native="false"><ns0:return_type>MapElement</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2123"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2124" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Root" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="=" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="M" type="Object" /><ns0:local_variable name="R" type="MapElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2125"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2126"><ns0:left_operand><ns0:variable name="M" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="isOfType" stmt_handle="2127" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Map"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2128"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2129" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:binary_operation operator="=" stmt_handle="2130"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="size" stmt_handle="2131" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2132"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2133"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2134" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2135"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2136"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2137"><ns0:left_operand><ns0:data_method_call method_name="value" stmt_handle="2138" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="NF"><ns0:binary_operation operator="=" stmt_handle="2145"><ns0:left_operand><ns0:data_method_call method_name="at" stmt_handle="2146" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="key" stmt_handle="2147" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="value" stmt_handle="2148" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:then><ns0:else><ns0:assignment variable_name="NF"><ns0:binary_operation operator="&amp;" stmt_handle="2139"><ns0:left_operand><ns0:data_method_call method_name="includesKey" stmt_handle="2140" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="key" stmt_handle="2141" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2142"><ns0:left_operand><ns0:data_method_call method_name="at" stmt_handle="2143" super="false"><ns0:receiver><ns0:variable name="M" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="key" stmt_handle="2144" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:else></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2149" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:variable name="NF" /></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:constant type="boolean">false</ns0:constant></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="!=" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="M" type="Object" /><ns0:body_expression><ns0:return><ns0:unary_operation operator="!" stmt_handle="2150"><ns0:operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2151"><ns0:left_operand><ns0:self /></ns0:left_operand><ns0:right_operand><ns0:variable name="M" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Collection" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="Root" type="CollectionElement" /><ns0:instance_variable name="Size" type="Integer" /><ns0:data_method name="clear" native="false"><ns0:return_type>Collection</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2152"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2155" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2156"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="setRemoved" stmt_handle="2157" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2158" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:assignment variable_name="Root"><ns0:data_method_call method_name="setRemoved" stmt_handle="2153" super="false"><ns0:receiver><ns0:data_method_call method_name="setCount" stmt_handle="2154" super="false"><ns0:receiver><ns0:new data_class="CollectionElement" /></ns0:receiver><ns0:argument><ns0:constant type="integer">0</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:else></ns0:if><ns0:data_method_call method_name="setPrevious" stmt_handle="2159" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="2160" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="isEmpty" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2161"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2162" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:binary_operation operator="=" stmt_handle="2163"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="size" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2164"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2165" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Size" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="excludes" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:body_expression><ns0:return><ns0:data_method_call method_name="not" stmt_handle="2166" super="false"><ns0:receiver><ns0:data_method_call method_name="includes" stmt_handle="2167" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="excludesAll" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="C" type="Collection" /><ns0:local_variable name="I" type="CollectionIterator" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2168"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2169" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2170"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2171"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2172" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2173" super="false"><ns0:receiver><ns0:variable name="C" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Collection"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2174" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter of method \"excludesAll\" for Collection should be a Collection"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2175"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="I"><ns0:data_method_call method_name="iterator" stmt_handle="2176" super="false"><ns0:receiver><ns0:variable name="C" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2177"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:unary_operation operator="!" stmt_handle="2178"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="isDone" stmt_handle="2179" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:data_method_call method_name="excludes" stmt_handle="2180" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2181" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="advance" stmt_handle="2182" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:variable name="NF" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="includes" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2183"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2184" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2185" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2186"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2187"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:binary_operation operator="!=" stmt_handle="2188"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="2189" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="O" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2190" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:data_method_call method_name="not" stmt_handle="2191" super="false"><ns0:receiver><ns0:variable name="NF" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="includesAll" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="C" type="Collection" /><ns0:local_variable name="I" type="CollectionIterator" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2192"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2193" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2194"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2195"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2196" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2197" super="false"><ns0:receiver><ns0:variable name="C" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Collection"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2198" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter of method \"includesAll\" for Collection should be a Collection"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2199"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="I"><ns0:data_method_call method_name="iterator" stmt_handle="2202" super="false"><ns0:receiver><ns0:variable name="C" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2203"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:unary_operation operator="!" stmt_handle="2204"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="isDone" stmt_handle="2205" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:data_method_call method_name="includes" stmt_handle="2206" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2207" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="advance" stmt_handle="2208" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="NF" /></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:binary_operation operator="=" stmt_handle="2200"><ns0:left_operand><ns0:data_method_call method_name="size" stmt_handle="2201" super="false"><ns0:receiver><ns0:variable name="C" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="toArray" native="false"><ns0:return_type>Array</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="I" type="Integer" /><ns0:local_variable name="J" type="Integer" /><ns0:local_variable name="A" type="Array" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2209"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2210" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="A"><ns0:data_method_call method_name="resize" stmt_handle="2211" super="false"><ns0:receiver><ns0:new data_class="Array" /></ns0:receiver><ns0:argument><ns0:variable name="Size" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2212" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="I"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2213"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="J"><ns0:data_method_call method_name="count" stmt_handle="2214" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2215"><ns0:left_operand><ns0:variable name="J" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="putAt" stmt_handle="2216" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:variable name="I" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2217" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="I"><ns0:binary_operation operator="+" stmt_handle="2218"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="J"><ns0:binary_operation operator="-" stmt_handle="2219"><ns0:left_operand><ns0:variable name="J" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2220" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="A" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="toBag" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="B" type="Bag" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2221"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2222" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="B"><ns0:data_method_call method_name="clear" stmt_handle="2223" super="false"><ns0:receiver><ns0:new data_class="Bag" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2224" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2225"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="addMultiple" stmt_handle="2226" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2227" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument><ns0:argument><ns0:data_method_call method_name="count" stmt_handle="2228" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2229" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="B" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="toSet" native="false"><ns0:return_type>Set</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="S" type="Set" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2230"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2231" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="S"><ns0:data_method_call method_name="clear" stmt_handle="2232" super="false"><ns0:receiver><ns0:new data_class="Set" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2233" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2234"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="add" stmt_handle="2235" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2236" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2237" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="S" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="toSequence" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="I" type="Integer" /><ns0:local_variable name="S" type="Sequence" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2238"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2239" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="S"><ns0:data_method_call method_name="clear" stmt_handle="2240" super="false"><ns0:receiver><ns0:new data_class="Sequence" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2241" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2242"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="I"><ns0:data_method_call method_name="count" stmt_handle="2243" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2244"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="append" stmt_handle="2245" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2246" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="I"><ns0:binary_operation operator="-" stmt_handle="2247"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2248" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="S" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="resize" native="false"><ns0:return_type>Collection</ns0:return_type><ns0:argument name="S" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Size"><ns0:variable name="S" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="root" native="false"><ns0:return_type>CollectionElement</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2249"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2250" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Root" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Bag" native="false"><ns0:super_class>Collection</ns0:super_class><ns0:data_method name="iterator" native="false"><ns0:return_type>BagIterator</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2251"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2252" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:data_method_call method_name="referringTo" stmt_handle="2253" super="false"><ns0:receiver><ns0:new data_class="BagIterator" /></ns0:receiver><ns0:argument><ns0:self /></ns0:argument><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2254" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="fromArray" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:argument name="A" type="Array" /><ns0:local_variable name="I" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="clear" stmt_handle="2255" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:assignment variable_name="I"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="2256"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="size" stmt_handle="2257" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="add" stmt_handle="2258" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="at" stmt_handle="2259" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:variable name="I" /></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="I"><ns0:binary_operation operator="+" stmt_handle="2260"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="isUnique" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2261"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2262" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="2263"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2264" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2265"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2266"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:binary_operation operator="=" stmt_handle="2267"><ns0:left_operand><ns0:data_method_call method_name="count" stmt_handle="2268" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2269" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:variable name="NF" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="count" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="C" type="Integer" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2270"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2271" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="C"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2272" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2273"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2274"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2275"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="2276" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="O" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:assignment variable_name="C"><ns0:data_method_call method_name="count" stmt_handle="2277" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2278" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="C" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="add" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:body_expression><ns0:return><ns0:data_method_call method_name="addMultiple" stmt_handle="2279" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument><ns0:argument><ns0:constant type="integer">1</ns0:constant></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="addMultiple" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:argument name="N" type="Integer" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2280"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2281" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2282"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2283"><ns0:left_operand><ns0:variable name="N" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2284" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2285" super="false"><ns0:receiver><ns0:variable name="N" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2286" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Second parameter for method \"addMultiple\" of Bag must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="2287"><ns0:left_operand><ns0:variable name="N" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2288" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Second parameter for method \"addMultiple\" of Bag must not be negative"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2289" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2290"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2291"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2292"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="2293" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="O" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:data_method_call method_name="setCount" stmt_handle="2294" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="2295"><ns0:left_operand><ns0:data_method_call method_name="count" stmt_handle="2296" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="N" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2297" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:if><ns0:condition><ns0:variable name="NF" /></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="setElement" stmt_handle="2298" super="false"><ns0:receiver><ns0:data_method_call method_name="setRemoved" stmt_handle="2299" super="false"><ns0:receiver><ns0:data_method_call method_name="setCount" stmt_handle="2300" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="2301" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="2302" super="false"><ns0:receiver><ns0:new data_class="CollectionElement" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2303" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="N" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="2304" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2305" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2306" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="2307"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:variable name="N" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="remove" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:body_expression><ns0:return><ns0:data_method_call method_name="removeMultiple" stmt_handle="2308" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument><ns0:argument><ns0:constant type="integer">1</ns0:constant></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="removeMultiple" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:argument name="N" type="Integer" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2309"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2310" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2311"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2312"><ns0:left_operand><ns0:variable name="N" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2313" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2314" super="false"><ns0:receiver><ns0:variable name="N" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2315" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Second parameter for method \"removeMultiple\" of Bag must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="2316"><ns0:left_operand><ns0:variable name="N" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2317" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Second parameter for method \"removeMultiple\" of Bag must not be negative"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2318" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2319"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2320"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2321"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="2322" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="O" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="2323"><ns0:left_operand><ns0:data_method_call method_name="count" stmt_handle="2324" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="N" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="setRemoved" stmt_handle="2329" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2330" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="2331" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2332" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2333" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2334" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2335" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="-" stmt_handle="2336"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="count" stmt_handle="2337" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:data_method_call method_name="setCount" stmt_handle="2325" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="2326"><ns0:left_operand><ns0:data_method_call method_name="count" stmt_handle="2327" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="N" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="-" stmt_handle="2328"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:variable name="N" /></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2338" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="removeDuplicates" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2339"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2340" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2341" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2342"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="2343"><ns0:left_operand><ns0:binary_operation operator="-" stmt_handle="2344"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="count" stmt_handle="2345" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="setCount" stmt_handle="2346" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="integer">1</ns0:constant></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2347" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="union" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:argument name="B" type="Bag" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="I" type="CollectionElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2348"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2349" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2350"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2351"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2352" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2353" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2354" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"union\" of Bag must be a Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="I"><ns0:data_method_call method_name="next" stmt_handle="2355" super="false"><ns0:receiver><ns0:data_method_call method_name="root" stmt_handle="2356" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2357"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="root" stmt_handle="2358" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2359" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2360"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2361"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2362"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="2363" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="element" stmt_handle="2364" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:data_method_call method_name="setCount" stmt_handle="2365" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="2366"><ns0:left_operand><ns0:data_method_call method_name="count" stmt_handle="2367" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="count" stmt_handle="2368" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2369" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:if><ns0:condition><ns0:variable name="NF" /></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="setElement" stmt_handle="2370" super="false"><ns0:receiver><ns0:data_method_call method_name="setRemoved" stmt_handle="2371" super="false"><ns0:receiver><ns0:data_method_call method_name="setCount" stmt_handle="2372" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="2373" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="2374" super="false"><ns0:receiver><ns0:new data_class="CollectionElement" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2375" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="count" stmt_handle="2376" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2377" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="2378" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2379" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2380" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="2381"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="count" stmt_handle="2382" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="I"><ns0:data_method_call method_name="next" stmt_handle="2383" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="subtract" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:argument name="B" type="Bag" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="C" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2384"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2385" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2386"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2387"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2388" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2389" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2390" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"subtract\" of Bag must be a Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2391" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2392"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="C"><ns0:data_method_call method_name="monus" stmt_handle="2393" super="false"><ns0:receiver><ns0:data_method_call method_name="count" stmt_handle="2394" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="count" stmt_handle="2395" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2396" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2397"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="setRemoved" stmt_handle="2402" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2403" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2404" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2405" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2406" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="2407" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2408" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="-" stmt_handle="2409"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="count" stmt_handle="2410" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="2398"><ns0:left_operand><ns0:binary_operation operator="-" stmt_handle="2399"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="count" stmt_handle="2400" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="C" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="setCount" stmt_handle="2401" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="C" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2411" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="difference" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:argument name="B" type="Bag" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="Intersection" type="Bag" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2412"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2413" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2414"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2415"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2416" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2417" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2418" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"difference\" of Bag must be a Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Intersection"><ns0:data_method_call method_name="clear" stmt_handle="2419" super="false"><ns0:receiver><ns0:new data_class="Bag" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2420" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2421"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="addMultiple" stmt_handle="2422" super="false"><ns0:receiver><ns0:variable name="Intersection" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2423" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument><ns0:argument><ns0:data_method_call method_name="min" stmt_handle="2424" super="false"><ns0:receiver><ns0:data_method_call method_name="count" stmt_handle="2425" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="count" stmt_handle="2426" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2427" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2428" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:data_method_call method_name="union" stmt_handle="2429" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:data_method_call method_name="subtract" stmt_handle="2430" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Intersection" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="2431"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Intersection" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="intersection" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:argument name="B" type="Bag" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="C" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2432"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2433" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2434"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2435"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2436" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2437" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2438" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"intersection\" of Bag must be a Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2439" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2440"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="C"><ns0:data_method_call method_name="min" stmt_handle="2441" super="false"><ns0:receiver><ns0:data_method_call method_name="count" stmt_handle="2442" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="count" stmt_handle="2443" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2444" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2445"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="setRemoved" stmt_handle="2450" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2451" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2452" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2453" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2454" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="2455" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2456" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="-" stmt_handle="2457"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="count" stmt_handle="2458" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="2446"><ns0:left_operand><ns0:binary_operation operator="-" stmt_handle="2447"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="count" stmt_handle="2448" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="C" /></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="setCount" stmt_handle="2449" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="C" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2459" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="PrintOut" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2460"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2461" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2462"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Empty Bag"</ns0:constant></ns0:assignment></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Bag{"</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2463" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2464"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="concat" stmt_handle="2465" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="2466" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="2467" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="2468" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="2469" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"["</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="2470" super="false"><ns0:receiver><ns0:data_method_call method_name="count" stmt_handle="2471" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">" * "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="2472" super="false"><ns0:receiver><ns0:data_method_call method_name="element" stmt_handle="2473" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2474"><ns0:left_operand><ns0:data_method_call method_name="next" stmt_handle="2475" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="2476" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">", "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2477" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="concat" stmt_handle="2478" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"}"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:return><ns0:variable name="PrintOut" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="=" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="B" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2479"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2480"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="isOfType" stmt_handle="2481" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2482"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2483" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:binary_operation operator="=" stmt_handle="2484"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="size" stmt_handle="2485" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2486"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2487"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2488" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2489"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2490"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:binary_operation operator="=" stmt_handle="2491"><ns0:left_operand><ns0:data_method_call method_name="count" stmt_handle="2492" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="count" stmt_handle="2493" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2494" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2495" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:variable name="NF" /></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:constant type="boolean">false</ns0:constant></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="!=" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="B" type="Object" /><ns0:body_expression><ns0:return><ns0:unary_operation operator="!" stmt_handle="2496"><ns0:operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2497"><ns0:left_operand><ns0:self /></ns0:left_operand><ns0:right_operand><ns0:variable name="B" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="+" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:argument name="B" type="Bag" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2498"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2499"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2500" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2501" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2502" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for operator \"+\" of Bag must be a Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:data_method_call method_name="union" stmt_handle="2503" super="false"><ns0:receiver><ns0:data_method_call method_name="deepCopy" stmt_handle="2504" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="B" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="-" native="false"><ns0:return_type>Bag</ns0:return_type><ns0:argument name="B" type="Bag" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="Subtraction" type="Bag" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2505"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2506" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2507"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2508"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2509" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2510" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2511" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for operator \"-\" of Bag must be a Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Subtraction"><ns0:new data_class="Bag" /></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2512" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2513"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="addMultiple" stmt_handle="2514" super="false"><ns0:receiver><ns0:variable name="Subtraction" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2515" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument><ns0:argument><ns0:data_method_call method_name="monus" stmt_handle="2516" super="false"><ns0:receiver><ns0:data_method_call method_name="count" stmt_handle="2517" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="count" stmt_handle="2518" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2519" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2520" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="Subtraction" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="&gt;" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="B" type="Bag" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2521"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2522"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2523" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2524" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2525" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for operator \"&lt;\" of Bag must be a Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:unary_operation operator="!" stmt_handle="2526"><ns0:operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="2527"><ns0:left_operand><ns0:self /></ns0:left_operand><ns0:right_operand><ns0:variable name="B" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="&gt;=" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="B" type="Bag" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2528"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2529"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2530" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2531" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2532" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for operator \"&lt;=\" of Bag must be a Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:binary_operation operator="&lt;=" stmt_handle="2533"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:self /></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="&lt;" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="B" type="Bag" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2534"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2535"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2536" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2537" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2538" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for operator \"&lt;\" of Bag must be a Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:unary_operation operator="!" stmt_handle="2539"><ns0:operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="2540"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:self /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="&lt;=" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="B" type="Bag" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="SubBag" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2541"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2542" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2543"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2544"><ns0:left_operand><ns0:variable name="B" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2545" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2546" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2547" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for operator \"&lt;=\" of Bag must be a Bag"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2548" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="SubBag"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2549"><ns0:left_operand><ns0:variable name="SubBag" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2550"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="SubBag"><ns0:binary_operation operator="&lt;=" stmt_handle="2551"><ns0:left_operand><ns0:data_method_call method_name="count" stmt_handle="2552" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="count" stmt_handle="2553" super="false"><ns0:receiver><ns0:variable name="B" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2554" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2555" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="SubBag" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Set" native="false"><ns0:super_class>Collection</ns0:super_class><ns0:data_method name="iterator" native="false"><ns0:return_type>CollectionIterator</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2556"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2557" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:data_method_call method_name="referringTo" stmt_handle="2558" super="false"><ns0:receiver><ns0:new data_class="CollectionIterator" /></ns0:receiver><ns0:argument><ns0:self /></ns0:argument><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2559" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="fromArray" native="false"><ns0:return_type>Set</ns0:return_type><ns0:argument name="A" type="Array" /><ns0:local_variable name="I" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="clear" stmt_handle="2560" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:assignment variable_name="I"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="2561"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="size" stmt_handle="2562" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="add" stmt_handle="2563" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="at" stmt_handle="2564" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:variable name="I" /></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="I"><ns0:binary_operation operator="+" stmt_handle="2565"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="count" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2566"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2567" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="includes" stmt_handle="2568" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:return><ns0:constant type="integer">1</ns0:constant></ns0:return></ns0:then><ns0:else><ns0:return><ns0:constant type="integer">0</ns0:constant></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="add" native="false"><ns0:return_type>Set</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2569"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2570" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="excludes" stmt_handle="2571" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="setElement" stmt_handle="2572" super="false"><ns0:receiver><ns0:data_method_call method_name="setRemoved" stmt_handle="2573" super="false"><ns0:receiver><ns0:data_method_call method_name="setCount" stmt_handle="2574" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="2575" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="2576" super="false"><ns0:receiver><ns0:new data_class="CollectionElement" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2577" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">1</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="2578" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2579" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2580" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="2581"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="remove" native="false"><ns0:return_type>Set</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2582"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2583" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2584" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2585"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2586"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2587"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="2588" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="O" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="setRemoved" stmt_handle="2590" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2591" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="2592" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2593" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2594" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2595" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2596" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="-" stmt_handle="2597"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2589" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:else></ns0:if></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="union" native="false"><ns0:return_type>Set</ns0:return_type><ns0:argument name="S" type="Set" /><ns0:local_variable name="I" type="CollectionIterator" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2598"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2599" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2600"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2601"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2602" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2603" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2604" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter of method \"union\" for Set must be a Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="I"><ns0:data_method_call method_name="iterator" stmt_handle="2605" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:unary_operation operator="!" stmt_handle="2606"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="isDone" stmt_handle="2607" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="add" stmt_handle="2608" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2609" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="advance" stmt_handle="2610" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="subtract" native="false"><ns0:return_type>Set</ns0:return_type><ns0:argument name="S" type="Set" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2611"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2612" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2613"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2614"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2615" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2616" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2617" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter of method \"subtract\" for Set must be a Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2618" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2619"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:data_method_call method_name="includes" stmt_handle="2620" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2621" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="setRemoved" stmt_handle="2622" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2623" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2624" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2625" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2626" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="2627" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2628" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="-" stmt_handle="2629"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2630" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="difference" native="false"><ns0:return_type>Set</ns0:return_type><ns0:argument name="S" type="Set" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="Intersection" type="Set" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2631"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2632" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2633"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2634"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2635" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2636" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2637" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"difference\" of Set must be a Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Intersection"><ns0:data_method_call method_name="clear" stmt_handle="2638" super="false"><ns0:receiver><ns0:new data_class="Set" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2639" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2640"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:data_method_call method_name="includes" stmt_handle="2641" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2642" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:data_method_call method_name="add" stmt_handle="2643" super="false"><ns0:receiver><ns0:variable name="Intersection" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2644" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2645" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:data_method_call method_name="union" stmt_handle="2646" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:data_method_call method_name="subtract" stmt_handle="2647" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="Intersection" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="2648"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Intersection" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="intersection" native="false"><ns0:return_type>Set</ns0:return_type><ns0:argument name="S" type="Set" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2649"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2650" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="not" stmt_handle="2651" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2652" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2653" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter of method \"intersection\" for Set must be a Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2654" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2655"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:data_method_call method_name="excludes" stmt_handle="2656" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2657" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="setRemoved" stmt_handle="2658" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2659" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2660" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2661" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2662" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="2663" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2664" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="-" stmt_handle="2665"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2666" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="PrintOut" type="String" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2667"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2668" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2669"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Empty Set"</ns0:constant></ns0:assignment></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Set{"</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2670" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2671"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="concat" stmt_handle="2672" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="2673" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2674"><ns0:left_operand><ns0:data_method_call method_name="next" stmt_handle="2675" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="2676" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">", "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2677" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="concat" stmt_handle="2678" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"}"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:return><ns0:variable name="PrintOut" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="=" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="S" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2679"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2680"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="isOfType" stmt_handle="2681" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:binary_operation operator="=" stmt_handle="2682"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="size" stmt_handle="2683" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2684"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2685"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2686" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2687"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2688"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:data_method_call method_name="includes" stmt_handle="2689" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2690" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2691" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:variable name="NF" /></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:constant type="boolean">false</ns0:constant></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="!=" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="S" type="Object" /><ns0:body_expression><ns0:return><ns0:unary_operation operator="!" stmt_handle="2692"><ns0:operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2693"><ns0:left_operand><ns0:self /></ns0:left_operand><ns0:right_operand><ns0:variable name="S" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="+" native="false"><ns0:return_type>Set</ns0:return_type><ns0:argument name="S" type="Set" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2694"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2695"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2696" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2697" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2698" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter of operator \"+\" for Set must be a Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:data_method_call method_name="union" stmt_handle="2699" super="false"><ns0:receiver><ns0:data_method_call method_name="deepCopy" stmt_handle="2700" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="S" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="-" native="false"><ns0:return_type>Set</ns0:return_type><ns0:argument name="S" type="Set" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="Subtraction" type="Set" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2701"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2702" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2703"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2704"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2705" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2706" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2707" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter of operator \"-\" for Set must be a Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Subtraction"><ns0:data_method_call method_name="clear" stmt_handle="2708" super="false"><ns0:receiver><ns0:new data_class="Set" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2709" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2710"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:data_method_call method_name="excludes" stmt_handle="2711" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2712" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:condition><ns0:then><ns0:data_method_call method_name="add" stmt_handle="2713" super="false"><ns0:receiver><ns0:variable name="Subtraction" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2714" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2715" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="Subtraction" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="&gt;" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="S" type="Set" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2716"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2717"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2718" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2719" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2720" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for operator \"&lt;\" of Set must be a Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:unary_operation operator="!" stmt_handle="2721"><ns0:operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="2722"><ns0:left_operand><ns0:self /></ns0:left_operand><ns0:right_operand><ns0:variable name="S" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="&gt;=" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="S" type="Set" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2723"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2724"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2725" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2726" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2727" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for operator \"&lt;=\" of Set must be a Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:data_method_call method_name="includesAll" stmt_handle="2728" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="S" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="&lt;" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="S" type="Set" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2729"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2730"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2731" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2732" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2733" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for operator \"&lt;\" of Set must be a Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:unary_operation operator="!" stmt_handle="2734"><ns0:operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;=" stmt_handle="2735"><ns0:left_operand><ns0:self /></ns0:left_operand><ns0:right_operand><ns0:variable name="S" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="&lt;=" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="S" type="Set" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2736"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2737"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2738" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2739" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2740" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for operator \"&lt;=\" of Set must be a Set"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:data_method_call method_name="includesAll" stmt_handle="2741" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:self /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Sequence" native="false"><ns0:super_class>Collection</ns0:super_class><ns0:data_method name="iterator" native="false"><ns0:return_type>SequenceIterator</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2742"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2743" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:data_method_call method_name="referringTo" stmt_handle="2744" super="false"><ns0:receiver><ns0:new data_class="SequenceIterator" /></ns0:receiver><ns0:argument><ns0:self /></ns0:argument><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2745" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="fromArray" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:argument name="A" type="Array" /><ns0:local_variable name="I" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="clear" stmt_handle="2746" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call><ns0:assignment variable_name="I"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="2747"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="size" stmt_handle="2748" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="append" stmt_handle="2749" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="at" stmt_handle="2750" super="false"><ns0:receiver><ns0:variable name="A" /></ns0:receiver><ns0:argument><ns0:variable name="I" /></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="I"><ns0:binary_operation operator="+" stmt_handle="2751"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="isUnique" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="Q" type="CollectionElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2752"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2753" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="2754"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2755" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2756"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2757"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="Q"><ns0:data_method_call method_name="next" stmt_handle="2758" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2759"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2760"><ns0:left_operand><ns0:variable name="Q" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:binary_operation operator="!=" stmt_handle="2761"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="2762" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="element" stmt_handle="2763" super="false"><ns0:receiver><ns0:variable name="Q" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="Q"><ns0:data_method_call method_name="next" stmt_handle="2764" super="false"><ns0:receiver><ns0:variable name="Q" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2765" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:variable name="NF" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="count" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="C" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2766"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2767" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="C"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2768" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2769"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2770"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="2771" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="O" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="C"><ns0:binary_operation operator="+" stmt_handle="2772"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2773" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="C" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="append" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2774"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2775" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="setElement" stmt_handle="2776" super="false"><ns0:receiver><ns0:data_method_call method_name="setRemoved" stmt_handle="2777" super="false"><ns0:receiver><ns0:data_method_call method_name="setCount" stmt_handle="2778" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="2779" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="2780" super="false"><ns0:receiver><ns0:new data_class="CollectionElement" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2781" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">1</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="2782" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2783" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2784" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="2785"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="prepend" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2786"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2787" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="setElement" stmt_handle="2788" super="false"><ns0:receiver><ns0:data_method_call method_name="setRemoved" stmt_handle="2789" super="false"><ns0:receiver><ns0:data_method_call method_name="setCount" stmt_handle="2790" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="2791" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="2792" super="false"><ns0:receiver><ns0:new data_class="CollectionElement" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2793" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">1</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setPrevious" stmt_handle="2794" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="2795" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2796" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="2797"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="putAt" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:argument name="I" type="Integer" /><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2798"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2799" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2800"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2801"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2802" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2803" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2804" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"First parameter for method \"putAt\" of Sequence must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2805"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2807"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="2808"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="2809"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2810" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="2811" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="2812" super="false"><ns0:receiver><ns0:constant type="string">"First parameter for method \"putAt\" of Sequence must be in [1, "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="2813" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2814" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2815"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2816"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2817"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2818" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="I"><ns0:binary_operation operator="-" stmt_handle="2819"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="setElement" stmt_handle="2820" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:data_method_call method_name="error" stmt_handle="2806" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Method \"putAt\" of Sequence requires a Sequence of positive size"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="insertAt" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:argument name="I" type="Integer" /><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="N" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2821"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2822" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2823"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2824"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2825" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2826" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2827" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"First parameter for method \"insertAt\" of Sequence must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2828"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2830"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="2831"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="2832"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2833" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="2834" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="2835" super="false"><ns0:receiver><ns0:constant type="string">"First parameter for method \"insertAt\" of Sequence must be in [1, "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="2836" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2837" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2838"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2839"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2840"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2841" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="I"><ns0:binary_operation operator="-" stmt_handle="2842"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:assignment variable_name="N"><ns0:data_method_call method_name="setElement" stmt_handle="2843" super="false"><ns0:receiver><ns0:data_method_call method_name="setRemoved" stmt_handle="2844" super="false"><ns0:receiver><ns0:data_method_call method_name="setCount" stmt_handle="2845" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="2846" super="false"><ns0:receiver><ns0:data_method_call method_name="setNext" stmt_handle="2847" super="false"><ns0:receiver><ns0:new data_class="CollectionElement" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2848" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">1</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setPrevious" stmt_handle="2849" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="N" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2850" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2851" super="false"><ns0:receiver><ns0:variable name="N" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="N" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="2852"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:data_method_call method_name="error" stmt_handle="2829" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Method \"insertAt\" of Sequence requires a Sequence of positive size"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="at" native="false"><ns0:return_type>Object</ns0:return_type><ns0:argument name="I" type="Integer" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2853"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2854" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2855"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2856"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2857" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2858" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2859" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"at\" of Sequence must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2860"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2862"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="2863"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="2864"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2865" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="2866" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="2867" super="false"><ns0:receiver><ns0:constant type="string">"Parameter for method \"at\" of Sequence must be in [1, "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="2868" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2869" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2870"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2871"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2872"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2873" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="I"><ns0:binary_operation operator="-" stmt_handle="2874"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:data_method_call method_name="element" stmt_handle="2875" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:data_method_call method_name="error" stmt_handle="2861" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Method \"at\" of Sequence requires a Sequence of positive size"</ns0:constant></ns0:argument></ns0:data_method_call><ns0:return><ns0:nil /></ns0:return></ns0:sequence_of_expressions></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="first" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2876"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2877" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2878"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:nil /></ns0:return></ns0:then><ns0:else><ns0:return><ns0:data_method_call method_name="element" stmt_handle="2879" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="2880" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="last" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2881"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2882" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2883"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:return><ns0:nil /></ns0:return></ns0:then><ns0:else><ns0:return><ns0:data_method_call method_name="element" stmt_handle="2884" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2885" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="removeAt" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:argument name="I" type="Integer" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2886"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2887" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2888"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2889"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2890" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2891" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2892" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"removeAt\" of Sequence must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2893"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2895"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="2896"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="2897"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2898" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="2899" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="2900" super="false"><ns0:receiver><ns0:constant type="string">"Parameter for method \"removeAt\" of Sequence must be in [1, "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="2901" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2902" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="2903"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2904"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="2905"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2906" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="I"><ns0:binary_operation operator="-" stmt_handle="2907"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="setRemoved" stmt_handle="2908" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2909" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="2910" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="2911" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2912" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2913" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2914" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="-" stmt_handle="2915"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:data_method_call method_name="error" stmt_handle="2894" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Method \"removeAt\" of Sequence requires a Sequence of positive size"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="removeFirst" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2916"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2917" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2918"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2919" super="false"><ns0:receiver><ns0:data_method_call method_name="setRemoved" stmt_handle="2920" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="2921" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="2922" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2923" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="-" stmt_handle="2924"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="removeLast" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2925"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2926" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2927"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="previous" stmt_handle="2928" super="false"><ns0:receiver><ns0:data_method_call method_name="setRemoved" stmt_handle="2929" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="2930" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setPrevious" stmt_handle="2931" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2932" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="Size"><ns0:binary_operation operator="-" stmt_handle="2933"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="concat" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:argument name="S" type="Sequence" /><ns0:local_variable name="I" type="SequenceIterator" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2934"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2935" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2936"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2937"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2938" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2939" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Sequence"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2940" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter of method \"concat\" of Sequence must be a Sequence"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="I"><ns0:data_method_call method_name="iterator" stmt_handle="2941" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:unary_operation operator="!" stmt_handle="2942"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="isDone" stmt_handle="2943" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="append" stmt_handle="2944" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2945" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="advance" stmt_handle="2946" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="reverse" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="Q" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2947"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2948" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="2949"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:variable name="Root" /></ns0:assignment><ns0:assignment variable_name="Q"><ns0:data_method_call method_name="previous" stmt_handle="2950" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2951"><ns0:left_operand><ns0:variable name="Q" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="setPrevious" stmt_handle="2952" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2953" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2954" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="Q" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:variable name="Q" /></ns0:assignment><ns0:assignment variable_name="Q"><ns0:data_method_call method_name="previous" stmt_handle="2955" super="false"><ns0:receiver><ns0:variable name="Q" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="setPrevious" stmt_handle="2956" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="2957" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="2958" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="Q" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="splice" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:argument name="I" type="Integer" /><ns0:argument name="S" type="Sequence" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="Q" type="CollectionElement" /><ns0:local_variable name="X" type="CollectionElement" /><ns0:local_variable name="Y" type="SequenceIterator" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2959"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2960" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2961"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2962"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2963"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2964" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2965" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Sequence"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2966" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Second parameter of method \"splice\" of Sequence must be a Sequence"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2967"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="2968"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="2969" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="2970" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2971" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"First parameter of method \"splice\" of Sequence must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="2972"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="2973"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="2974"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="2975" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="2976" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="2977" super="false"><ns0:receiver><ns0:constant type="string">"First parameter for method \"splice\" of Sequence must be in [1, "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="2978" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2979" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="I"><ns0:binary_operation operator="-" stmt_handle="2980"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="2981"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="2982" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="I"><ns0:binary_operation operator="-" stmt_handle="2983"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:assignment variable_name="Q"><ns0:data_method_call method_name="next" stmt_handle="2984" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Y"><ns0:data_method_call method_name="iterator" stmt_handle="2985" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:unary_operation operator="!" stmt_handle="2986"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="isDone" stmt_handle="2987" super="false"><ns0:receiver><ns0:variable name="Y" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="X"><ns0:data_method_call method_name="setElement" stmt_handle="2988" super="false"><ns0:receiver><ns0:data_method_call method_name="setRemoved" stmt_handle="2989" super="false"><ns0:receiver><ns0:data_method_call method_name="setCount" stmt_handle="2990" super="false"><ns0:receiver><ns0:data_method_call method_name="setPrevious" stmt_handle="2991" super="false"><ns0:receiver><ns0:new data_class="CollectionElement" /></ns0:receiver><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="integer">1</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="2992" super="false"><ns0:receiver><ns0:variable name="Y" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:data_method_call method_name="setNext" stmt_handle="2993" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:variable name="X" /></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:variable name="X" /></ns0:assignment><ns0:assignment variable_name="Size"><ns0:binary_operation operator="+" stmt_handle="2994"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:data_method_call method_name="advance" stmt_handle="2995" super="false"><ns0:receiver><ns0:variable name="Y" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="setNext" stmt_handle="2996" super="false"><ns0:receiver><ns0:variable name="X" /></ns0:receiver><ns0:argument><ns0:variable name="Q" /></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="2997" super="false"><ns0:receiver><ns0:variable name="Q" /></ns0:receiver><ns0:argument><ns0:variable name="X" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="swap" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:argument name="I" type="Integer" /><ns0:argument name="J" type="Integer" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="Q" type="CollectionElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:local_variable name="C" type="Integer" /><ns0:local_variable name="O" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="2998"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="2999" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="3000"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="3001"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="3002"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="J" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="3003"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="3004"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="3005"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="3006"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="3007"><ns0:left_operand><ns0:variable name="J" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="3008" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="3009" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="3010" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="3011" super="false"><ns0:receiver><ns0:variable name="J" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="3012" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameters of method \"splice\" of Sequence must be Integers"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="3013"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="3014"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="3015"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="3016"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="3017"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="3018"><ns0:left_operand><ns0:variable name="J" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="3019"><ns0:left_operand><ns0:variable name="J" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="3020" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="3021" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="3022" super="false"><ns0:receiver><ns0:constant type="string">"Parameters for method \"swap\" of Sequence must be in [1, "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="3023" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="3024"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="J" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="C"><ns0:variable name="I" /></ns0:assignment><ns0:assignment variable_name="I"><ns0:variable name="J" /></ns0:assignment><ns0:assignment variable_name="J"><ns0:variable name="C" /></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:assignment variable_name="C"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3025" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:variable name="NF" /></ns0:condition><ns0:body><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="3026"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:variable name="I" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:assignment variable_name="O"><ns0:data_method_call method_name="element" stmt_handle="3029" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3027" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="C"><ns0:binary_operation operator="+" stmt_handle="3028"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:else></ns0:if></ns0:body></ns0:while><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:assignment variable_name="Q"><ns0:data_method_call method_name="next" stmt_handle="3030" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="C"><ns0:binary_operation operator="+" stmt_handle="3031"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:while><ns0:condition><ns0:variable name="NF" /></ns0:condition><ns0:body><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="3032"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:variable name="J" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:data_method_call method_name="setElement" stmt_handle="3035" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="3036" super="false"><ns0:receiver><ns0:variable name="Q" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setElement" stmt_handle="3037" super="false"><ns0:receiver><ns0:variable name="Q" /></ns0:receiver><ns0:argument><ns0:variable name="O" /></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="Q"><ns0:data_method_call method_name="next" stmt_handle="3033" super="false"><ns0:receiver><ns0:variable name="Q" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="C"><ns0:binary_operation operator="+" stmt_handle="3034"><ns0:left_operand><ns0:variable name="C" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:else></ns0:if></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="subSequence" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:argument name="I" type="Integer" /><ns0:argument name="L" type="Integer" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="S" type="Sequence" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="3038"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="3039" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="S"><ns0:data_method_call method_name="clear" stmt_handle="3040" super="false"><ns0:receiver><ns0:new data_class="Sequence" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="3041"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="3042"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="3043"><ns0:left_operand><ns0:binary_operation operator="|" stmt_handle="3044"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="3045"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="3046"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="3047" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="3048" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="3049" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="3050" super="false"><ns0:receiver><ns0:variable name="L" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="3051" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameters of method \"subSequence\" of Sequence must be Integers"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;=" stmt_handle="3052"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="3053" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"First parameter of method \"subSequence\" of Sequence must be positive"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="3054"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="3055" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Second parameter of method \"subSequence\" of Sequence must not be negative"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="&gt;" stmt_handle="3056"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="3057"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="L" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:binary_operation operator="+" stmt_handle="3058"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="3059" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="3060" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="3061" super="false"><ns0:receiver><ns0:constant type="string">"Sum of parameters for method \"subSequence\" of Sequence must be in [1, "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="3062" super="false"><ns0:receiver><ns0:sequence_of_expressions><ns0:binary_operation operator="+" stmt_handle="3063"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3064" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="3065"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="3066"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="3067"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3068" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="I"><ns0:binary_operation operator="-" stmt_handle="3069"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="3070"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="3071"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="3072"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="append" stmt_handle="3073" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="element" stmt_handle="3074" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3075" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="L"><ns0:binary_operation operator="-" stmt_handle="3076"><ns0:left_operand><ns0:variable name="L" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:variable name="S" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="find" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="I" type="Integer" /><ns0:argument name="O" type="Object" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:local_variable name="NF" type="Boolean" /><ns0:local_variable name="Index" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="3077"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="3078" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="Index"><ns0:constant type="integer">0</ns0:constant></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="3079"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="3080"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="3081"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="3082" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="3083" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="3084" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"First parameter for method \"find\" of Sequence must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="3085"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="3086"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="3087"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="3088" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="3089" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="3090" super="false"><ns0:receiver><ns0:constant type="string">"First paramete for method \"find\" of Sequence must be in [1, "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="3091" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3092" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="NF"><ns0:constant type="boolean">true</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="3093"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="3094"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="3095"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3096" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Index"><ns0:binary_operation operator="+" stmt_handle="3097"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="I"><ns0:binary_operation operator="-" stmt_handle="3098"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="3099"><ns0:left_operand><ns0:variable name="NF" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="3100"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="3101"><ns0:left_operand><ns0:data_method_call method_name="element" stmt_handle="3102" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="O" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="NF"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment></ns0:then></ns0:if><ns0:assignment variable_name="Index"><ns0:binary_operation operator="+" stmt_handle="3103"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3104" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:if><ns0:condition><ns0:variable name="NF" /></ns0:condition><ns0:then><ns0:assignment variable_name="Index"><ns0:constant type="integer">0</ns0:constant></ns0:assignment></ns0:then></ns0:if></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:variable name="Index" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="iteratorAt" native="false"><ns0:return_type>SequenceIterator</ns0:return_type><ns0:argument name="I" type="Integer" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="3105"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="3106" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="3107"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="3109"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="3110"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="3111" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="3112" super="false"><ns0:receiver><ns0:variable name="I" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="3113" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter for method \"iteratorTo\" of Sequence must be an Integer"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="3114"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;" stmt_handle="3115"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="3116"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Size" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="3117" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="concat" stmt_handle="3118" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="3119" super="false"><ns0:receiver><ns0:constant type="string">"Parameter for method \"iteratorTo\" of Sequence must be in [1, "</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="3120" super="false"><ns0:receiver><ns0:variable name="Size" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3121" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="3122"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="3123"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="!=" stmt_handle="3124"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3125" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="I"><ns0:binary_operation operator="-" stmt_handle="3126"><ns0:left_operand><ns0:variable name="I" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:data_method_call method_name="referringTo" stmt_handle="3127" super="false"><ns0:receiver><ns0:new data_class="SequenceIterator" /></ns0:receiver><ns0:argument><ns0:self /></ns0:argument><ns0:argument><ns0:variable name="R" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:data_method_call method_name="referringTo" stmt_handle="3108" super="false"><ns0:receiver><ns0:new data_class="SequenceIterator" /></ns0:receiver><ns0:argument><ns0:self /></ns0:argument><ns0:argument><ns0:variable name="Root" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="PrintOut" type="String" /><ns0:local_variable name="R" type="CollectionElement" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="3128"><ns0:left_operand><ns0:variable name="Root" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="clear" stmt_handle="3129" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="3130"><ns0:left_operand><ns0:variable name="Size" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Empty Sequence"</ns0:constant></ns0:assignment></ns0:then><ns0:else><ns0:sequence_of_expressions><ns0:assignment variable_name="PrintOut"><ns0:constant type="string">"Sequence{"</ns0:constant></ns0:assignment><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3131" super="false"><ns0:receiver><ns0:variable name="Root" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="3132"><ns0:left_operand><ns0:variable name="R" /></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:data_method_call method_name="concat" stmt_handle="3133" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="3134" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="3135"><ns0:left_operand><ns0:data_method_call method_name="next" stmt_handle="3136" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="Root" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="3137" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">", "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:assignment variable_name="R"><ns0:data_method_call method_name="next" stmt_handle="3138" super="false"><ns0:receiver><ns0:variable name="R" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:data_method_call method_name="concat" stmt_handle="3139" super="false"><ns0:receiver><ns0:variable name="PrintOut" /></ns0:receiver><ns0:argument><ns0:constant type="string">"}"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:else></ns0:if><ns0:return><ns0:variable name="PrintOut" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="+" native="false"><ns0:return_type>Sequence</ns0:return_type><ns0:argument name="S" type="Sequence" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="3140"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="=" stmt_handle="3141"><ns0:left_operand><ns0:variable name="S" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="3142" super="false"><ns0:receiver><ns0:data_method_call method_name="isOfType" stmt_handle="3143" super="false"><ns0:receiver><ns0:variable name="S" /></ns0:receiver><ns0:argument><ns0:constant type="string">"Sequence"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="error" stmt_handle="3144" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:constant type="string">"Parameter of operator \"+\" of Sequence must be a Sequence"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:data_method_call method_name="concat" stmt_handle="3145" super="false"><ns0:receiver><ns0:data_method_call method_name="deepCopy" stmt_handle="3146" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="S" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Iterator" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="ReferredStructure" type="Object" /><ns0:instance_variable name="ReferredElement" type="Element" /><ns0:instance_variable name="StructureType" type="String" /><ns0:data_method name="isDone" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:return><ns0:binary_operation operator="=" stmt_handle="3147"><ns0:left_operand><ns0:variable name="ReferredElement" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="root" stmt_handle="3148" super="false"><ns0:receiver><ns0:variable name="ReferredStructure" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="advance" native="false"><ns0:return_type>Iterator</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:unary_operation operator="!" stmt_handle="3149"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="isDone" stmt_handle="3150" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="ReferredElement"><ns0:data_method_call method_name="next" stmt_handle="3151" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then></ns0:if><ns0:if><ns0:condition><ns0:data_method_call method_name="removed" stmt_handle="3152" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:return><ns0:data_method_call method_name="advance" stmt_handle="3153" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:then><ns0:else><ns0:return><ns0:self /></ns0:return></ns0:else></ns0:if></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="remove" native="false"><ns0:return_type>Iterator</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="3154"><ns0:left_operand><ns0:data_method_call method_name="not" stmt_handle="3155" super="false"><ns0:receiver><ns0:data_method_call method_name="removed" stmt_handle="3156" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:unary_operation operator="!" stmt_handle="3157"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="isDone" stmt_handle="3158" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="setNext" stmt_handle="3159" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="3160" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="3161" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="3162" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="3163" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="3164" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setRemoved" stmt_handle="3165" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="resize" stmt_handle="3166" super="false"><ns0:receiver><ns0:variable name="ReferredStructure" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="3167"><ns0:left_operand><ns0:data_method_call method_name="size" stmt_handle="3168" super="false"><ns0:receiver><ns0:variable name="ReferredStructure" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="Out" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Out"><ns0:data_method_call method_name="concat" stmt_handle="3169" super="false"><ns0:receiver><ns0:constant type="string">"Iterator on "</ns0:constant></ns0:receiver><ns0:argument><ns0:variable name="StructureType" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="3170"><ns0:left_operand><ns0:variable name="ReferredElement" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="root" stmt_handle="3171" super="false"><ns0:receiver><ns0:variable name="ReferredStructure" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="3172" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="3173" super="false"><ns0:receiver><ns0:variable name="Out" /></ns0:receiver><ns0:argument><ns0:constant type="string">" to "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="3174" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Out" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="referringTo" native="false"><ns0:return_type>Iterator</ns0:return_type><ns0:argument name="S" type="Object" /><ns0:argument name="E" type="Element" /><ns0:argument name="T" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="ReferredStructure"><ns0:variable name="S" /></ns0:assignment><ns0:assignment variable_name="ReferredElement"><ns0:variable name="E" /></ns0:assignment><ns0:assignment variable_name="StructureType"><ns0:variable name="T" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="key" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="error" stmt_handle="3175" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="3176"><ns0:left_operand><ns0:constant type="string">"Method \"key\"is not defined on iterator for "</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="StructureType" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:return><ns0:nil /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="value" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="error" stmt_handle="3177" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="3178"><ns0:left_operand><ns0:constant type="string">"Method \"value\" is not defined on iterator for "</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="StructureType" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:return><ns0:nil /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="element" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="error" stmt_handle="3179" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="3180"><ns0:left_operand><ns0:constant type="string">"Method \"element\" is not defined on iterator for "</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="StructureType" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:return><ns0:nil /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="reverse" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="error" stmt_handle="3181" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="3182"><ns0:left_operand><ns0:constant type="string">"Method \"reverse\" is not defined on iterator for "</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="StructureType" /></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:return><ns0:nil /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="MapIterator" native="false"><ns0:super_class>Iterator</ns0:super_class><ns0:data_method name="key" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="key" stmt_handle="3183" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="value" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="value" stmt_handle="3184" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="referringTo" native="false"><ns0:return_type>Iterator</ns0:return_type><ns0:argument name="S" type="Object" /><ns0:argument name="E" type="Element" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="ReferredStructure"><ns0:variable name="S" /></ns0:assignment><ns0:assignment variable_name="ReferredElement"><ns0:variable name="E" /></ns0:assignment><ns0:assignment variable_name="StructureType"><ns0:constant type="string">"Map"</ns0:constant></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="CollectionIterator" native="false"><ns0:super_class>Iterator</ns0:super_class><ns0:data_method name="element" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="element" stmt_handle="3185" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="BagIterator" native="false"><ns0:super_class>CollectionIterator</ns0:super_class><ns0:instance_variable name="Index" type="Integer" /><ns0:data_method name="advance" native="false"><ns0:return_type>BagIterator</ns0:return_type><ns0:body_expression><ns0:if><ns0:condition><ns0:unary_operation operator="!" stmt_handle="3186"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="isDone" stmt_handle="3187" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="Index"><ns0:binary_operation operator="-" stmt_handle="3188"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="3189"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:assignment variable_name="ReferredElement"><ns0:data_method_call method_name="next" stmt_handle="3190" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="Index"><ns0:data_method_call method_name="count" stmt_handle="3191" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:if><ns0:condition><ns0:binary_operation operator="|" stmt_handle="3192"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="removed" stmt_handle="3193" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&gt;" stmt_handle="3194"><ns0:left_operand><ns0:variable name="Index" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="count" stmt_handle="3195" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="advance" stmt_handle="3196" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then><ns0:else><ns0:self /></ns0:else></ns0:if></ns0:return></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:return><ns0:self /></ns0:return></ns0:else></ns0:if></ns0:body_expression></ns0:data_method><ns0:data_method name="remove" native="false"><ns0:return_type>BagIterator</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="3197"><ns0:left_operand><ns0:data_method_call method_name="not" stmt_handle="3198" super="false"><ns0:receiver><ns0:data_method_call method_name="removed" stmt_handle="3199" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:unary_operation operator="!" stmt_handle="3200"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="isDone" stmt_handle="3201" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="=" stmt_handle="3202"><ns0:left_operand><ns0:data_method_call method_name="count" stmt_handle="3203" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_expressions><ns0:data_method_call method_name="setRemoved" stmt_handle="3207" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setNext" stmt_handle="3208" super="false"><ns0:receiver><ns0:data_method_call method_name="previous" stmt_handle="3209" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="3210" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call><ns0:data_method_call method_name="setPrevious" stmt_handle="3211" super="false"><ns0:receiver><ns0:data_method_call method_name="next" stmt_handle="3212" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="3213" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then><ns0:else><ns0:data_method_call method_name="setCount" stmt_handle="3204" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="3205"><ns0:left_operand><ns0:data_method_call method_name="count" stmt_handle="3206" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:else></ns0:if><ns0:data_method_call method_name="resize" stmt_handle="3214" super="false"><ns0:receiver><ns0:variable name="ReferredStructure" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="3215"><ns0:left_operand><ns0:data_method_call method_name="size" stmt_handle="3216" super="false"><ns0:receiver><ns0:variable name="ReferredStructure" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:then></ns0:if><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:local_variable name="Out" type="String" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Out"><ns0:data_method_call method_name="concat" stmt_handle="3217" super="false"><ns0:receiver><ns0:constant type="string">"Iterator on "</ns0:constant></ns0:receiver><ns0:argument><ns0:variable name="StructureType" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:if><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="3218"><ns0:left_operand><ns0:variable name="ReferredElement" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="root" stmt_handle="3219" super="false"><ns0:receiver><ns0:variable name="ReferredStructure" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:data_method_call method_name="concat" stmt_handle="3220" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="3221" super="false"><ns0:receiver><ns0:variable name="Out" /></ns0:receiver><ns0:argument><ns0:constant type="string">" to "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="3222" super="false"><ns0:receiver><ns0:data_method_call method_name="element" stmt_handle="3223" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:then></ns0:if><ns0:return><ns0:variable name="Out" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="referringTo" native="false"><ns0:return_type>Iterator</ns0:return_type><ns0:argument name="S" type="Object" /><ns0:argument name="E" type="Element" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="ReferredStructure"><ns0:variable name="S" /></ns0:assignment><ns0:assignment variable_name="ReferredElement"><ns0:variable name="E" /></ns0:assignment><ns0:assignment variable_name="StructureType"><ns0:constant type="string">"Bag"</ns0:constant></ns0:assignment><ns0:assignment variable_name="Index"><ns0:data_method_call method_name="count" stmt_handle="3224" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="SequenceIterator" native="false"><ns0:super_class>CollectionIterator</ns0:super_class><ns0:instance_variable name="Reverse" type="Boolean" /><ns0:data_method name="first" native="false"><ns0:return_type>SequenceIterator</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="referringTo" stmt_handle="3225" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="ReferredStructure" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="next" stmt_handle="3226" super="false"><ns0:receiver><ns0:data_method_call method_name="root" stmt_handle="3227" super="false"><ns0:receiver><ns0:variable name="ReferredStructure" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="last" native="false"><ns0:return_type>SequenceIterator</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="referringTo" stmt_handle="3228" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="ReferredStructure" /></ns0:argument><ns0:argument><ns0:data_method_call method_name="previous" stmt_handle="3229" super="false"><ns0:receiver><ns0:data_method_call method_name="root" stmt_handle="3230" super="false"><ns0:receiver><ns0:variable name="ReferredStructure" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="advance" native="false"><ns0:return_type>SequenceIterator</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:unary_operation operator="!" stmt_handle="3231"><ns0:operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="isDone" stmt_handle="3232" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:operand></ns0:unary_operation></ns0:condition><ns0:then><ns0:if><ns0:condition><ns0:variable name="Reverse" /></ns0:condition><ns0:then><ns0:assignment variable_name="ReferredElement"><ns0:data_method_call method_name="previous" stmt_handle="3234" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:then><ns0:else><ns0:assignment variable_name="ReferredElement"><ns0:data_method_call method_name="next" stmt_handle="3233" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:else></ns0:if></ns0:then></ns0:if><ns0:return><ns0:if><ns0:condition><ns0:data_method_call method_name="removed" stmt_handle="3235" super="false"><ns0:receiver><ns0:variable name="ReferredElement" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:data_method_call method_name="advance" stmt_handle="3236" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:then><ns0:else><ns0:self /></ns0:else></ns0:if></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="reverse" native="false"><ns0:return_type>SequenceIterator</ns0:return_type><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Reverse"><ns0:data_method_call method_name="not" stmt_handle="3237" super="false"><ns0:receiver><ns0:variable name="Reverse" /></ns0:receiver></ns0:data_method_call></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="referringTo" native="false"><ns0:return_type>Iterator</ns0:return_type><ns0:argument name="S" type="Object" /><ns0:argument name="E" type="Element" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="ReferredStructure"><ns0:variable name="S" /></ns0:assignment><ns0:assignment variable_name="ReferredElement"><ns0:variable name="E" /></ns0:assignment><ns0:assignment variable_name="StructureType"><ns0:constant type="string">"Sequence"</ns0:constant></ns0:assignment><ns0:assignment variable_name="Reverse"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="Element" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="Next" type="Element" /><ns0:instance_variable name="Previous" type="Element" /><ns0:data_method name="next" native="false"><ns0:return_type>Element</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="Next" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="previous" native="false"><ns0:return_type>Element</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="Previous" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="setNext" native="false"><ns0:return_type>Element</ns0:return_type><ns0:argument name="E" type="Element" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Next"><ns0:variable name="E" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setPrevious" native="false"><ns0:return_type>Element</ns0:return_type><ns0:argument name="E" type="Element" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Previous"><ns0:variable name="E" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="MapElement" native="false"><ns0:super_class>Element</ns0:super_class><ns0:instance_variable name="Key" type="Object" /><ns0:instance_variable name="Value" type="Object" /><ns0:instance_variable name="Removed" type="Boolean" /><ns0:data_method name="key" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="Key" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="value" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="Value" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="removed" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="Removed" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="setKey" native="false"><ns0:return_type>MapElement</ns0:return_type><ns0:argument name="K" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Key"><ns0:variable name="K" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setValue" native="false"><ns0:return_type>MapElement</ns0:return_type><ns0:argument name="V" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Value"><ns0:variable name="V" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setRemoved" native="false"><ns0:return_type>MapElement</ns0:return_type><ns0:argument name="B" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Removed"><ns0:variable name="B" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="concat" stmt_handle="3238" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="3239" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="3240" super="false"><ns0:receiver><ns0:data_method_call method_name="concat" stmt_handle="3241" super="false"><ns0:receiver><ns0:constant type="string">"["</ns0:constant></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="3242" super="false"><ns0:receiver><ns0:variable name="Key" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">", "</ns0:constant></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:data_method_call method_name="printString" stmt_handle="3243" super="false"><ns0:receiver><ns0:variable name="Value" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="string">"]"</ns0:constant></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="StructureElement" native="false"><ns0:super_class>Element</ns0:super_class><ns0:instance_variable name="Element" type="Object" /><ns0:data_method name="element" native="false"><ns0:return_type>Object</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="Element" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="setElement" native="false"><ns0:return_type>Element</ns0:return_type><ns0:argument name="E" type="Object" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Element"><ns0:variable name="E" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="printString" native="false"><ns0:return_type>String</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="printString" stmt_handle="3244" super="false"><ns0:receiver><ns0:variable name="Element" /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="CollectionElement" native="false"><ns0:super_class>StructureElement</ns0:super_class><ns0:instance_variable name="Count" type="Integer" /><ns0:instance_variable name="Removed" type="Boolean" /><ns0:data_method name="count" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="Count" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="removed" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:body_expression><ns0:return><ns0:variable name="Removed" /></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="setCount" native="false"><ns0:return_type>CollectionElement</ns0:return_type><ns0:argument name="C" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Count"><ns0:variable name="C" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="setRemoved" native="false"><ns0:return_type>CollectionElement</ns0:return_type><ns0:argument name="B" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="Removed"><ns0:variable name="B" /></ns0:assignment><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="RoundRobinArbiterPolicy" native="false"><ns0:super_class>Object</ns0:super_class><ns0:instance_variable name="LastGranted" type="Integer" /><ns0:data_method name="next" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:argument name="d" type="BusRequests" /><ns0:local_variable name="i" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:if><ns0:condition><ns0:binary_operation operator="==" stmt_handle="3245"><ns0:left_operand><ns0:variable name="LastGranted" /></ns0:left_operand><ns0:right_operand><ns0:nil /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:assignment variable_name="i"><ns0:constant type="integer">1</ns0:constant></ns0:assignment></ns0:then><ns0:else><ns0:assignment variable_name="i"><ns0:binary_operation operator="+" stmt_handle="3246"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="modulo" stmt_handle="3247" super="false"><ns0:receiver><ns0:variable name="LastGranted" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="getSize" stmt_handle="3248" super="false"><ns0:receiver><ns0:variable name="d" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:else></ns0:if><ns0:while><ns0:condition><ns0:data_method_call method_name="not" stmt_handle="3249" super="false"><ns0:receiver><ns0:data_method_call method_name="check" stmt_handle="3250" super="false"><ns0:receiver><ns0:variable name="d" /></ns0:receiver><ns0:argument><ns0:variable name="i" /></ns0:argument></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:body><ns0:assignment variable_name="i"><ns0:binary_operation operator="+" stmt_handle="3251"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="modulo" stmt_handle="3252" super="false"><ns0:receiver><ns0:variable name="i" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="getSize" stmt_handle="3253" super="false"><ns0:receiver><ns0:variable name="d" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:body></ns0:while><ns0:assignment variable_name="LastGranted"><ns0:variable name="i" /></ns0:assignment><ns0:return><ns0:variable name="i" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class><ns0:data_class name="BusRequests" native="false"><ns0:super_class>Array</ns0:super_class><ns0:data_method name="add" native="false"><ns0:return_type>BusRequests</ns0:return_type><ns0:argument name="n" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="putAt" stmt_handle="3254" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="n" /></ns0:argument><ns0:argument><ns0:constant type="boolean">true</ns0:constant></ns0:argument></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="check" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:argument name="n" type="Integer" /><ns0:body_expression><ns0:return><ns0:data_method_call method_name="at" stmt_handle="3255" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="n" /></ns0:argument></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="clear" native="false"><ns0:return_type>BusRequests</ns0:return_type><ns0:argument name="n" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="putAt" stmt_handle="3256" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="n" /></ns0:argument><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="getSize" native="false"><ns0:return_type>Integer</ns0:return_type><ns0:body_expression><ns0:return><ns0:data_method_call method_name="size" stmt_handle="3257" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:return></ns0:body_expression></ns0:data_method><ns0:data_method name="init" native="false"><ns0:return_type>BusRequests</ns0:return_type><ns0:argument name="n" type="Integer" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="putAll" stmt_handle="3258" super="false"><ns0:receiver><ns0:data_method_call method_name="resize" stmt_handle="3259" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="n" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:constant type="boolean">false</ns0:constant></ns0:argument></ns0:data_method_call><ns0:return><ns0:self /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method><ns0:data_method name="notIdle" native="false"><ns0:return_type>Boolean</ns0:return_type><ns0:local_variable name="i" type="Integer" /><ns0:local_variable name="RequestAvailable" type="Boolean" /><ns0:body_expression><ns0:sequence_of_expressions><ns0:assignment variable_name="i"><ns0:constant type="integer">1</ns0:constant></ns0:assignment><ns0:assignment variable_name="RequestAvailable"><ns0:constant type="boolean">false</ns0:constant></ns0:assignment><ns0:while><ns0:condition><ns0:binary_operation operator="&amp;" stmt_handle="3260"><ns0:left_operand><ns0:sequence_of_expressions><ns0:data_method_call method_name="not" stmt_handle="3261" super="false"><ns0:receiver><ns0:variable name="RequestAvailable" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="&lt;=" stmt_handle="3262"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="size" stmt_handle="3263" super="false"><ns0:receiver><ns0:self /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_expressions><ns0:assignment variable_name="RequestAvailable"><ns0:data_method_call method_name="at" stmt_handle="3264" super="false"><ns0:receiver><ns0:self /></ns0:receiver><ns0:argument><ns0:variable name="i" /></ns0:argument></ns0:data_method_call></ns0:assignment><ns0:assignment variable_name="i"><ns0:binary_operation operator="+" stmt_handle="3265"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:body></ns0:while><ns0:return><ns0:variable name="RequestAvailable" /></ns0:return></ns0:sequence_of_expressions></ns0:body_expression></ns0:data_method></ns0:data_class></ns0:data_classes><ns0:process_classes><ns0:process_class name="Node"><ns0:interface><ns0:port name="NI"><ns0:message name="Packet" type="write"><ns0:argument type="Packet" /></ns0:message><ns0:message name="Packet" type="read"><ns0:argument type="Packet" /></ns0:message></ns0:port></ns0:interface><ns0:instantiation_parameter name="AccuracyCheckInterval" type="Real" /><ns0:instantiation_parameter name="LinkCapacity" type="Real" /><ns0:instantiation_parameter name="Load" type="Real" /><ns0:instantiation_parameter name="MeanBurstSize" type="Real" /><ns0:instantiation_parameter name="MyID" type="Integer" /><ns0:instantiation_parameter name="NumberOfNodes" type="Integer" /><ns0:instance_variable name="ArrayOfDestinations" type="Array" /><ns0:instance_variable name="DestinationIndexDistribution" type="Distribution" /><ns0:instance_variable name="IdleTimeDistribution" type="Distribution" /><ns0:instance_variable name="TransitionDistribution" type="Bernoulli" /><ns0:instance_variable name="Monitors" type="NIMonitors" /><ns0:instance_variable name="PacketNumber" type="Integer" /><ns0:instance_variable name="PacketsReceived" type="Integer" /><ns0:initial_method_call><ns0:process_method_call method_name="Initialise" stmt_handle="87" /></ns0:initial_method_call><ns0:process_method name="Initialise"><ns0:local_variable name="P" type="Real" /><ns0:local_variable name="Lambda" type="Real" /><ns0:local_variable name="i" type="Integer" /><ns0:local_variable name="j" type="Integer" /><ns0:body_statement><ns0:sequence_of_statements stmt_handle="1"><ns0:expression stmt_handle="4"><ns0:assignment variable_name="P"><ns0:binary_operation operator="/" stmt_handle="2"><ns0:left_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="3"><ns0:left_operand><ns0:variable name="MeanBurstSize" /></ns0:left_operand><ns0:right_operand><ns0:constant type="real">1.0</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:left_operand><ns0:right_operand><ns0:variable name="MeanBurstSize" /></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:expression><ns0:expression stmt_handle="10"><ns0:assignment variable_name="Lambda"><ns0:binary_operation operator="/" stmt_handle="5"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="6"><ns0:left_operand><ns0:binary_operation operator="*" stmt_handle="7"><ns0:left_operand><ns0:variable name="Load" /></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="8"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="P" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:variable name="LinkCapacity" /></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:sequence_of_expressions><ns0:binary_operation operator="-" stmt_handle="9"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="Load" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:expression><ns0:expression stmt_handle="12"><ns0:assignment variable_name="TransitionDistribution"><ns0:data_method_call method_name="withParameter" stmt_handle="11" super="false"><ns0:receiver><ns0:new data_class="Bernoulli" /></ns0:receiver><ns0:argument><ns0:variable name="P" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:expression><ns0:expression stmt_handle="14"><ns0:assignment variable_name="IdleTimeDistribution"><ns0:data_method_call method_name="withParameter" stmt_handle="13" super="false"><ns0:receiver><ns0:new data_class="Exponential" /></ns0:receiver><ns0:argument><ns0:variable name="Lambda" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:expression><ns0:expression stmt_handle="15"><ns0:assignment variable_name="PacketNumber"><ns0:constant type="integer">1</ns0:constant></ns0:assignment></ns0:expression><ns0:expression stmt_handle="16"><ns0:assignment variable_name="PacketsReceived"><ns0:constant type="integer">0</ns0:constant></ns0:assignment></ns0:expression><ns0:expression stmt_handle="19"><ns0:assignment variable_name="ArrayOfDestinations"><ns0:data_method_call method_name="resize" stmt_handle="17" super="false"><ns0:receiver><ns0:new data_class="Array" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="18"><ns0:left_operand><ns0:variable name="NumberOfNodes" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:expression><ns0:expression stmt_handle="20"><ns0:assignment variable_name="i"><ns0:constant type="integer">1</ns0:constant></ns0:assignment></ns0:expression><ns0:expression stmt_handle="21"><ns0:assignment variable_name="j"><ns0:constant type="integer">1</ns0:constant></ns0:assignment></ns0:expression><ns0:while stmt_handle="22"><ns0:condition><ns0:binary_operation operator="&lt;" stmt_handle="23"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:variable name="NumberOfNodes" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:body><ns0:sequence_of_statements stmt_handle="24"><ns0:if stmt_handle="25"><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="26"><ns0:left_operand><ns0:variable name="j" /></ns0:left_operand><ns0:right_operand><ns0:variable name="MyID" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:sequence_of_statements stmt_handle="27"><ns0:expression stmt_handle="29"><ns0:data_method_call method_name="putAt" stmt_handle="28" super="false"><ns0:receiver><ns0:variable name="ArrayOfDestinations" /></ns0:receiver><ns0:argument><ns0:variable name="i" /></ns0:argument><ns0:argument><ns0:variable name="j" /></ns0:argument></ns0:data_method_call></ns0:expression><ns0:expression stmt_handle="31"><ns0:assignment variable_name="i"><ns0:binary_operation operator="+" stmt_handle="30"><ns0:left_operand><ns0:variable name="i" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:expression></ns0:sequence_of_statements></ns0:then></ns0:if><ns0:expression stmt_handle="33"><ns0:assignment variable_name="j"><ns0:binary_operation operator="+" stmt_handle="32"><ns0:left_operand><ns0:variable name="j" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:expression></ns0:sequence_of_statements></ns0:body></ns0:while><ns0:expression stmt_handle="36"><ns0:assignment variable_name="DestinationIndexDistribution"><ns0:data_method_call method_name="withParameters" stmt_handle="34" super="false"><ns0:receiver><ns0:new data_class="DiscreteUniform" /></ns0:receiver><ns0:argument><ns0:constant type="integer">1</ns0:constant></ns0:argument><ns0:argument><ns0:binary_operation operator="-" stmt_handle="35"><ns0:left_operand><ns0:variable name="NumberOfNodes" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:expression><ns0:expression stmt_handle="38"><ns0:assignment variable_name="Monitors"><ns0:data_method_call method_name="init" stmt_handle="37" super="false"><ns0:receiver><ns0:new data_class="NIMonitors" /></ns0:receiver><ns0:argument><ns0:variable name="MyID" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:expression><ns0:parallel_statements stmt_handle="39"><ns0:process_method_call method_name="Idle" stmt_handle="40" /><ns0:process_method_call method_name="ReceivePacket" stmt_handle="41" /><ns0:process_method_call method_name="CheckAccuracy" stmt_handle="42" /></ns0:parallel_statements></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method><ns0:process_method name="Burst"><ns0:argument name="Destination" type="Integer" /><ns0:local_variable name="p" type="Packet" /><ns0:body_statement><ns0:sequence_of_statements stmt_handle="43"><ns0:expression stmt_handle="47"><ns0:assignment variable_name="p"><ns0:data_method_call method_name="setDestination" stmt_handle="44" super="false"><ns0:receiver><ns0:data_method_call method_name="setSource" stmt_handle="45" super="false"><ns0:receiver><ns0:data_method_call method_name="setNumber" stmt_handle="46" super="false"><ns0:receiver><ns0:new data_class="Packet" /></ns0:receiver><ns0:argument><ns0:variable name="PacketNumber" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="MyID" /></ns0:argument></ns0:data_method_call></ns0:receiver><ns0:argument><ns0:variable name="Destination" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:expression><ns0:message_send message_name="Packet" stmt_handle="48"><ns0:argument><ns0:variable name="p" /></ns0:argument><ns0:atomic_expression><ns0:assignment variable_name="PacketNumber"><ns0:binary_operation operator="+" stmt_handle="49"><ns0:left_operand><ns0:variable name="PacketNumber" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:atomic_expression><ns0:port>NI</ns0:port></ns0:message_send><ns0:expression stmt_handle="51"><ns0:data_method_call method_name="rewardSendRate" stmt_handle="50" super="false"><ns0:receiver><ns0:variable name="Monitors" /></ns0:receiver><ns0:argument><ns0:variable name="LinkCapacity" /></ns0:argument><ns0:argument><ns0:current_time /></ns0:argument></ns0:data_method_call></ns0:expression><ns0:delay stmt_handle="53"><ns0:sequence_of_expressions><ns0:binary_operation operator="/" stmt_handle="52"><ns0:left_operand><ns0:constant type="real">1.0</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:variable name="LinkCapacity" /></ns0:right_operand></ns0:binary_operation></ns0:sequence_of_expressions></ns0:delay><ns0:expression stmt_handle="55"><ns0:data_method_call method_name="rewardSendRate" stmt_handle="54" super="false"><ns0:receiver><ns0:variable name="Monitors" /></ns0:receiver><ns0:argument><ns0:constant type="real">0.0</ns0:constant></ns0:argument><ns0:argument><ns0:current_time /></ns0:argument></ns0:data_method_call></ns0:expression><ns0:if stmt_handle="56"><ns0:condition><ns0:data_method_call method_name="yieldsSuccess" stmt_handle="57" super="false"><ns0:receiver><ns0:variable name="TransitionDistribution" /></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:process_method_call method_name="Burst" stmt_handle="58"><ns0:argument><ns0:variable name="Destination" /></ns0:argument></ns0:process_method_call></ns0:then><ns0:else><ns0:process_method_call method_name="Idle" stmt_handle="59" /></ns0:else></ns0:if></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method><ns0:process_method name="CheckAccuracy"><ns0:body_statement><ns0:sequence_of_statements stmt_handle="60"><ns0:delay stmt_handle="61"><ns0:sequence_of_expressions><ns0:variable name="AccuracyCheckInterval" /></ns0:sequence_of_expressions></ns0:delay><ns0:if stmt_handle="62"><ns0:condition><ns0:data_method_call method_name="not" stmt_handle="63" super="false"><ns0:receiver><ns0:data_method_call method_name="accurate" stmt_handle="64" super="false"><ns0:receiver><ns0:variable name="Monitors" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:condition><ns0:then><ns0:process_method_call method_name="CheckAccuracy" stmt_handle="65" /></ns0:then></ns0:if></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method><ns0:process_method name="Idle"><ns0:body_statement><ns0:sequence_of_statements stmt_handle="66"><ns0:delay stmt_handle="68"><ns0:sequence_of_expressions><ns0:data_method_call method_name="sample" stmt_handle="67" super="false"><ns0:receiver><ns0:variable name="IdleTimeDistribution" /></ns0:receiver></ns0:data_method_call></ns0:sequence_of_expressions></ns0:delay><ns0:process_method_call method_name="Burst" stmt_handle="69"><ns0:argument><ns0:data_method_call method_name="at" stmt_handle="70" super="false"><ns0:receiver><ns0:variable name="ArrayOfDestinations" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="sample" stmt_handle="71" super="false"><ns0:receiver><ns0:variable name="DestinationIndexDistribution" /></ns0:receiver></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:argument></ns0:process_method_call></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method><ns0:process_method name="ReceivePacket"><ns0:local_variable name="p" type="Packet" /><ns0:body_statement><ns0:sequence_of_statements stmt_handle="72"><ns0:message_receive message_name="Packet" stmt_handle="73"><ns0:variable>p</ns0:variable><ns0:atomic_expression><ns0:sequence_of_expressions><ns0:data_method_call method_name="rewardLatency" stmt_handle="74" super="false"><ns0:receiver><ns0:variable name="Monitors" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="-" stmt_handle="75"><ns0:left_operand><ns0:current_time /></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="getEntranceTime" stmt_handle="76" super="false"><ns0:receiver><ns0:variable name="p" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call><ns0:assignment variable_name="PacketsReceived"><ns0:binary_operation operator="+" stmt_handle="77"><ns0:left_operand><ns0:variable name="PacketsReceived" /></ns0:left_operand><ns0:right_operand><ns0:constant type="integer">1</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:assignment></ns0:sequence_of_expressions></ns0:atomic_expression><ns0:port>NI</ns0:port></ns0:message_receive><ns0:if stmt_handle="78"><ns0:condition><ns0:binary_operation operator="!=" stmt_handle="79"><ns0:left_operand><ns0:data_method_call method_name="getDestination" stmt_handle="80" super="false"><ns0:receiver><ns0:variable name="p" /></ns0:receiver></ns0:data_method_call></ns0:left_operand><ns0:right_operand><ns0:variable name="MyID" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:then><ns0:expression stmt_handle="85"><ns0:data_method_call method_name="error" stmt_handle="81" super="false"><ns0:receiver><ns0:variable name="p" /></ns0:receiver><ns0:argument><ns0:binary_operation operator="+" stmt_handle="82"><ns0:left_operand><ns0:binary_operation operator="+" stmt_handle="83"><ns0:left_operand><ns0:constant type="string">"Packet "</ns0:constant></ns0:left_operand><ns0:right_operand><ns0:data_method_call method_name="printString" stmt_handle="84" super="false"><ns0:receiver><ns0:variable name="p" /></ns0:receiver></ns0:data_method_call></ns0:right_operand></ns0:binary_operation></ns0:left_operand><ns0:right_operand><ns0:constant type="string">" arrived at wrong destination"</ns0:constant></ns0:right_operand></ns0:binary_operation></ns0:argument></ns0:data_method_call></ns0:expression></ns0:then></ns0:if><ns0:process_method_call method_name="ReceivePacket" stmt_handle="86" /></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method></ns0:process_class><ns0:process_class name="NetworkInterface"><ns0:interface><ns0:port name="Arbiter"><ns0:message name="Release" type="write" /><ns0:message name="Request" type="write"><ns0:argument type="Integer" /></ns0:message><ns0:message name="Grant" type="read"><ns0:argument type="Integer" /></ns0:message></ns0:port><ns0:port name="Bus"><ns0:message name="Packet" type="write"><ns0:argument type="Integer" /><ns0:argument type="Packet" /></ns0:message><ns0:message name="Packet" type="read"><ns0:argument type="Integer" /><ns0:argument type="Packet" /></ns0:message></ns0:port><ns0:port name="Node"><ns0:message name="Packet" type="write"><ns0:argument type="Packet" /></ns0:message><ns0:message name="Packet" type="read"><ns0:argument type="Packet" /></ns0:message></ns0:port></ns0:interface><ns0:instantiation_parameter name="BufferCapacity" type="Integer" /><ns0:instantiation_parameter name="MyID" type="Integer" /><ns0:instantiation_parameter name="TransferDelay" type="Real" /><ns0:instance_variable name="InputBuffer" type="Queue" /><ns0:initial_method_call><ns0:process_method_call method_name="Initialise" stmt_handle="890" /></ns0:initial_method_call><ns0:process_method name="Initialise"><ns0:body_statement><ns0:sequence_of_statements stmt_handle="855"><ns0:expression stmt_handle="857"><ns0:assignment variable_name="InputBuffer"><ns0:data_method_call method_name="resize" stmt_handle="856" super="false"><ns0:receiver><ns0:new data_class="Queue" /></ns0:receiver><ns0:argument><ns0:variable name="BufferCapacity" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:expression><ns0:parallel_statements stmt_handle="858"><ns0:process_method_call method_name="ReceiveFromNode" stmt_handle="859" /><ns0:process_method_call method_name="ForwardToBus" stmt_handle="860" /><ns0:process_method_call method_name="TransferBus2Node" stmt_handle="861" /></ns0:parallel_statements></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method><ns0:process_method name="ForwardToBus"><ns0:local_variable name="ID" type="Integer" /><ns0:local_variable name="p" type="Packet" /><ns0:body_statement><ns0:sequence_of_statements stmt_handle="862"><ns0:guard stmt_handle="863"><ns0:expression><ns0:data_method_call method_name="not" stmt_handle="865" super="false"><ns0:receiver><ns0:data_method_call method_name="isEmpty" stmt_handle="866" super="false"><ns0:receiver><ns0:variable name="InputBuffer" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:expression><ns0:statement><ns0:message_send message_name="Request" stmt_handle="864"><ns0:argument><ns0:variable name="MyID" /></ns0:argument><ns0:port>Arbiter</ns0:port></ns0:message_send></ns0:statement></ns0:guard><ns0:message_receive message_name="Grant" stmt_handle="867"><ns0:variable>ID</ns0:variable><ns0:condition><ns0:binary_operation operator="=" stmt_handle="869"><ns0:left_operand><ns0:variable name="ID" /></ns0:left_operand><ns0:right_operand><ns0:variable name="MyID" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:atomic_expression><ns0:assignment variable_name="p"><ns0:data_method_call method_name="inspect" stmt_handle="868" super="false"><ns0:receiver><ns0:variable name="InputBuffer" /></ns0:receiver></ns0:data_method_call></ns0:assignment></ns0:atomic_expression><ns0:port>Arbiter</ns0:port></ns0:message_receive><ns0:message_send message_name="Packet" stmt_handle="870"><ns0:argument><ns0:data_method_call method_name="getDestination" stmt_handle="871" super="false"><ns0:receiver><ns0:variable name="p" /></ns0:receiver></ns0:data_method_call></ns0:argument><ns0:argument><ns0:variable name="p" /></ns0:argument><ns0:port>Bus</ns0:port></ns0:message_send><ns0:delay stmt_handle="872"><ns0:sequence_of_expressions><ns0:variable name="TransferDelay" /></ns0:sequence_of_expressions></ns0:delay><ns0:expression stmt_handle="874"><ns0:data_method_call method_name="remove" stmt_handle="873" super="false"><ns0:receiver><ns0:variable name="InputBuffer" /></ns0:receiver></ns0:data_method_call></ns0:expression><ns0:message_send message_name="Release" stmt_handle="875"><ns0:port>Arbiter</ns0:port></ns0:message_send><ns0:process_method_call method_name="ForwardToBus" stmt_handle="876" /></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method><ns0:process_method name="ReceiveFromNode"><ns0:local_variable name="p" type="Packet" /><ns0:body_statement><ns0:sequence_of_statements stmt_handle="877"><ns0:guard stmt_handle="878"><ns0:expression><ns0:data_method_call method_name="not" stmt_handle="882" super="false"><ns0:receiver><ns0:data_method_call method_name="isFull" stmt_handle="883" super="false"><ns0:receiver><ns0:variable name="InputBuffer" /></ns0:receiver></ns0:data_method_call></ns0:receiver></ns0:data_method_call></ns0:expression><ns0:statement><ns0:message_receive message_name="Packet" stmt_handle="879"><ns0:variable>p</ns0:variable><ns0:atomic_expression><ns0:data_method_call method_name="add" stmt_handle="880" super="false"><ns0:receiver><ns0:variable name="InputBuffer" /></ns0:receiver><ns0:argument><ns0:data_method_call method_name="setEntranceTime" stmt_handle="881" super="false"><ns0:receiver><ns0:variable name="p" /></ns0:receiver><ns0:argument><ns0:current_time /></ns0:argument></ns0:data_method_call></ns0:argument></ns0:data_method_call></ns0:atomic_expression><ns0:port>Node</ns0:port></ns0:message_receive></ns0:statement></ns0:guard><ns0:process_method_call method_name="ReceiveFromNode" stmt_handle="884" /></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method><ns0:process_method name="TransferBus2Node"><ns0:local_variable name="p" type="Packet" /><ns0:local_variable name="Destination" type="Integer" /><ns0:body_statement><ns0:sequence_of_statements stmt_handle="885"><ns0:message_receive message_name="Packet" stmt_handle="886"><ns0:variable>Destination</ns0:variable><ns0:variable>p</ns0:variable><ns0:condition><ns0:binary_operation operator="=" stmt_handle="887"><ns0:left_operand><ns0:variable name="Destination" /></ns0:left_operand><ns0:right_operand><ns0:variable name="MyID" /></ns0:right_operand></ns0:binary_operation></ns0:condition><ns0:port>Bus</ns0:port></ns0:message_receive><ns0:message_send message_name="Packet" stmt_handle="888"><ns0:argument><ns0:variable name="p" /></ns0:argument><ns0:port>Node</ns0:port></ns0:message_send><ns0:process_method_call method_name="TransferBus2Node" stmt_handle="889" /></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method></ns0:process_class><ns0:process_class name="Arbiter"><ns0:interface><ns0:port name="NI"><ns0:message name="Grant" type="write"><ns0:argument type="Integer" /></ns0:message><ns0:message name="Release" type="read" /><ns0:message name="Request" type="read"><ns0:argument type="Integer" /></ns0:message></ns0:port></ns0:interface><ns0:instantiation_parameter name="NumberOfNIs" type="Integer" /><ns0:instantiation_parameter name="ProcessingTime" type="Real" /><ns0:instance_variable name="Policy" type="RoundRobinArbiterPolicy" /><ns0:instance_variable name="Requests" type="BusRequests" /><ns0:initial_method_call><ns0:process_method_call method_name="Initialise" stmt_handle="912" /></ns0:initial_method_call><ns0:process_method name="Arbitrate"><ns0:local_variable name="NI_ID" type="Integer" /><ns0:body_statement><ns0:sequence_of_statements stmt_handle="891"><ns0:guard stmt_handle="892"><ns0:expression><ns0:data_method_call method_name="notIdle" stmt_handle="895" super="false"><ns0:receiver><ns0:variable name="Requests" /></ns0:receiver></ns0:data_method_call></ns0:expression><ns0:statement><ns0:expression stmt_handle="894"><ns0:assignment variable_name="NI_ID"><ns0:data_method_call method_name="next" stmt_handle="893" super="false"><ns0:receiver><ns0:variable name="Policy" /></ns0:receiver><ns0:argument><ns0:variable name="Requests" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:expression></ns0:statement></ns0:guard><ns0:delay stmt_handle="896"><ns0:variable name="ProcessingTime" /></ns0:delay><ns0:message_send message_name="Grant" stmt_handle="897"><ns0:argument><ns0:variable name="NI_ID" /></ns0:argument><ns0:atomic_expression><ns0:data_method_call method_name="clear" stmt_handle="898" super="false"><ns0:receiver><ns0:variable name="Requests" /></ns0:receiver><ns0:argument><ns0:variable name="NI_ID" /></ns0:argument></ns0:data_method_call></ns0:atomic_expression><ns0:port>NI</ns0:port></ns0:message_send><ns0:message_receive message_name="Release" stmt_handle="899"><ns0:port>NI</ns0:port></ns0:message_receive><ns0:process_method_call method_name="Arbitrate" stmt_handle="900" /></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method><ns0:process_method name="HandleRequests"><ns0:local_variable name="NI_ID" type="Integer" /><ns0:body_statement><ns0:sequence_of_statements stmt_handle="901"><ns0:message_receive message_name="Request" stmt_handle="902"><ns0:variable>NI_ID</ns0:variable><ns0:atomic_expression><ns0:data_method_call method_name="add" stmt_handle="903" super="false"><ns0:receiver><ns0:variable name="Requests" /></ns0:receiver><ns0:argument><ns0:variable name="NI_ID" /></ns0:argument></ns0:data_method_call></ns0:atomic_expression><ns0:port>NI</ns0:port></ns0:message_receive><ns0:process_method_call method_name="HandleRequests" stmt_handle="904" /></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method><ns0:process_method name="Initialise"><ns0:body_statement><ns0:sequence_of_statements stmt_handle="905"><ns0:expression stmt_handle="907"><ns0:assignment variable_name="Requests"><ns0:data_method_call method_name="init" stmt_handle="906" super="false"><ns0:receiver><ns0:new data_class="BusRequests" /></ns0:receiver><ns0:argument><ns0:variable name="NumberOfNIs" /></ns0:argument></ns0:data_method_call></ns0:assignment></ns0:expression><ns0:expression stmt_handle="908"><ns0:assignment variable_name="Policy"><ns0:new data_class="RoundRobinArbiterPolicy" /></ns0:assignment></ns0:expression><ns0:parallel_statements stmt_handle="909"><ns0:process_method_call method_name="HandleRequests" stmt_handle="910" /><ns0:process_method_call method_name="Arbitrate" stmt_handle="911" /></ns0:parallel_statements></ns0:sequence_of_statements></ns0:body_statement></ns0:process_method></ns0:process_class></ns0:process_classes><ns0:cluster_classes><ns0:cluster_class name="BusBasedNetwork"><ns0:interface><ns0:port name="Node1" /><ns0:port name="Node2" /><ns0:port name="Node3" /><ns0:port name="Node4" /></ns0:interface><ns0:instantiation_parameter name="ArbiterProcessingTime" type="Real" /><ns0:instantiation_parameter name="BusTransferDelay" type="Real" /><ns0:instantiation_parameter name="NIBufferCapacity" type="Integer" /><ns0:instantiation_parameter name="NumberOfNodes" type="Integer" /><ns0:channel name="0" /><ns0:channel name="1" /><ns0:channel name="2" output_port="Node1" /><ns0:channel name="3" output_port="Node2" /><ns0:channel name="4" output_port="Node3" /><ns0:channel name="5" output_port="Node4" /><ns0:instance class="Arbiter" name="Arbiter" type="process"><ns0:instantiation_expression parameter_name="NumberOfNIs"><ns0:body_expression><ns0:variable name="NumberOfNodes" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="ProcessingTime"><ns0:body_expression><ns0:variable name="ArbiterProcessingTime" /></ns0:body_expression></ns0:instantiation_expression><ns0:connection channel="0" port="NI" /></ns0:instance><ns0:instance class="NetworkInterface" name="NI1" type="process"><ns0:instantiation_expression parameter_name="BufferCapacity"><ns0:body_expression><ns0:variable name="NIBufferCapacity" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MyID"><ns0:body_expression><ns0:constant type="integer">1</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="TransferDelay"><ns0:body_expression><ns0:variable name="BusTransferDelay" /></ns0:body_expression></ns0:instantiation_expression><ns0:connection channel="0" port="Arbiter" /><ns0:connection channel="1" port="Bus" /><ns0:connection channel="2" port="Node" /></ns0:instance><ns0:instance class="NetworkInterface" name="NI2" type="process"><ns0:instantiation_expression parameter_name="BufferCapacity"><ns0:body_expression><ns0:variable name="NIBufferCapacity" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MyID"><ns0:body_expression><ns0:constant type="integer">2</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="TransferDelay"><ns0:body_expression><ns0:variable name="BusTransferDelay" /></ns0:body_expression></ns0:instantiation_expression><ns0:connection channel="0" port="Arbiter" /><ns0:connection channel="1" port="Bus" /><ns0:connection channel="3" port="Node" /></ns0:instance><ns0:instance class="NetworkInterface" name="NI3" type="process"><ns0:instantiation_expression parameter_name="BufferCapacity"><ns0:body_expression><ns0:variable name="NIBufferCapacity" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MyID"><ns0:body_expression><ns0:constant type="integer">3</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="TransferDelay"><ns0:body_expression><ns0:variable name="BusTransferDelay" /></ns0:body_expression></ns0:instantiation_expression><ns0:connection channel="0" port="Arbiter" /><ns0:connection channel="1" port="Bus" /><ns0:connection channel="4" port="Node" /></ns0:instance><ns0:instance class="NetworkInterface" name="NI4" type="process"><ns0:instantiation_expression parameter_name="BufferCapacity"><ns0:body_expression><ns0:variable name="NIBufferCapacity" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MyID"><ns0:body_expression><ns0:constant type="integer">4</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="TransferDelay"><ns0:body_expression><ns0:variable name="BusTransferDelay" /></ns0:body_expression></ns0:instantiation_expression><ns0:connection channel="0" port="Arbiter" /><ns0:connection channel="1" port="Bus" /><ns0:connection channel="5" port="Node" /></ns0:instance></ns0:cluster_class><ns0:cluster_class name="SoC_Bus"><ns0:interface /><ns0:instantiation_parameter name="AccuracyCheckInterval" type="Real" /><ns0:instantiation_parameter name="ArbiterProcessingTime" type="Real" /><ns0:instantiation_parameter name="BusTransferDelay" type="Real" /><ns0:instantiation_parameter name="LinkCapacity" type="Real" /><ns0:instantiation_parameter name="Load" type="Real" /><ns0:instantiation_parameter name="MeanBurstSize" type="Real" /><ns0:instantiation_parameter name="NIBufferCapacity" type="Integer" /><ns0:instantiation_parameter name="NumberOfNodes" type="Integer" /><ns0:channel name="0" /><ns0:channel name="1" /><ns0:channel name="2" /><ns0:channel name="3" /><ns0:instance class="Node" name="N1" type="process"><ns0:instantiation_expression parameter_name="AccuracyCheckInterval"><ns0:body_expression><ns0:variable name="AccuracyCheckInterval" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="LinkCapacity"><ns0:body_expression><ns0:variable name="LinkCapacity" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="Load"><ns0:body_expression><ns0:variable name="Load" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MeanBurstSize"><ns0:body_expression><ns0:variable name="MeanBurstSize" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MyID"><ns0:body_expression><ns0:constant type="integer">1</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="NumberOfNodes"><ns0:body_expression><ns0:variable name="NumberOfNodes" /></ns0:body_expression></ns0:instantiation_expression><ns0:connection channel="0" port="NI" /></ns0:instance><ns0:instance class="Node" name="N2" type="process"><ns0:instantiation_expression parameter_name="AccuracyCheckInterval"><ns0:body_expression><ns0:variable name="AccuracyCheckInterval" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="LinkCapacity"><ns0:body_expression><ns0:variable name="LinkCapacity" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="Load"><ns0:body_expression><ns0:variable name="Load" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MeanBurstSize"><ns0:body_expression><ns0:variable name="MeanBurstSize" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MyID"><ns0:body_expression><ns0:constant type="integer">2</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="NumberOfNodes"><ns0:body_expression><ns0:variable name="NumberOfNodes" /></ns0:body_expression></ns0:instantiation_expression><ns0:connection channel="1" port="NI" /></ns0:instance><ns0:instance class="Node" name="N3" type="process"><ns0:instantiation_expression parameter_name="AccuracyCheckInterval"><ns0:body_expression><ns0:variable name="AccuracyCheckInterval" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="LinkCapacity"><ns0:body_expression><ns0:variable name="LinkCapacity" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="Load"><ns0:body_expression><ns0:variable name="Load" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MeanBurstSize"><ns0:body_expression><ns0:variable name="MeanBurstSize" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MyID"><ns0:body_expression><ns0:constant type="integer">3</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="NumberOfNodes"><ns0:body_expression><ns0:variable name="NumberOfNodes" /></ns0:body_expression></ns0:instantiation_expression><ns0:connection channel="2" port="NI" /></ns0:instance><ns0:instance class="Node" name="N4" type="process"><ns0:instantiation_expression parameter_name="AccuracyCheckInterval"><ns0:body_expression><ns0:variable name="AccuracyCheckInterval" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="LinkCapacity"><ns0:body_expression><ns0:variable name="LinkCapacity" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="Load"><ns0:body_expression><ns0:variable name="Load" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MeanBurstSize"><ns0:body_expression><ns0:variable name="MeanBurstSize" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MyID"><ns0:body_expression><ns0:constant type="integer">4</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="NumberOfNodes"><ns0:body_expression><ns0:variable name="NumberOfNodes" /></ns0:body_expression></ns0:instantiation_expression><ns0:connection channel="3" port="NI" /></ns0:instance><ns0:instance class="BusBasedNetwork" name="Network" type="cluster"><ns0:instantiation_expression parameter_name="ArbiterProcessingTime"><ns0:body_expression><ns0:variable name="ArbiterProcessingTime" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="BusTransferDelay"><ns0:body_expression><ns0:variable name="BusTransferDelay" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="NIBufferCapacity"><ns0:body_expression><ns0:variable name="NIBufferCapacity" /></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="NumberOfNodes"><ns0:body_expression><ns0:variable name="NumberOfNodes" /></ns0:body_expression></ns0:instantiation_expression><ns0:connection channel="0" port="Node1" /><ns0:connection channel="1" port="Node2" /><ns0:connection channel="2" port="Node3" /><ns0:connection channel="3" port="Node4" /></ns0:instance></ns0:cluster_class></ns0:cluster_classes><ns0:top_level_specification><ns0:instance class="SoC_Bus" name="SoC_Topology" type="cluster"><ns0:instantiation_expression parameter_name="AccuracyCheckInterval"><ns0:body_expression><ns0:constant type="real">1.0</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="ArbiterProcessingTime"><ns0:body_expression><ns0:constant type="real">0.001</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="BusTransferDelay"><ns0:body_expression><ns0:constant type="real">0.0005</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="LinkCapacity"><ns0:body_expression><ns0:constant type="real">225.0</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="Load"><ns0:body_expression><ns0:constant type="real">0.95</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="MeanBurstSize"><ns0:body_expression><ns0:constant type="real">7.0</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="NIBufferCapacity"><ns0:body_expression><ns0:constant type="integer">2</ns0:constant></ns0:body_expression></ns0:instantiation_expression><ns0:instantiation_expression parameter_name="NumberOfNodes"><ns0:body_expression><ns0:constant type="integer">4</ns0:constant></ns0:body_expression></ns0:instantiation_expression></ns0:instance></ns0:top_level_specification></ns0:poosl_specification>