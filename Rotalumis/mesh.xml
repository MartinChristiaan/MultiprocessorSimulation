<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?><poosl_specification xmlns="uri:poosl"><data_classes><data_class name="Object" native="true"><data_method name="deepCopy" native="true"><return_type>Object</return_type></data_method><data_method name="error" native="true"><return_type>Object</return_type><argument name="s" type="String"/></data_method><data_method name="assert" native="true"><return_type>Object</return_type><argument name="b" type="Boolean"/><argument name="s" type="String"/></data_method><data_method name="marshal" native="true"><return_type>String</return_type></data_method><data_method name="printString" native="true"><return_type>String</return_type></data_method><data_method name="shallowCopy" native="true"><return_type>Object</return_type></data_method><data_method name="isOfType" native="true"><return_type>Boolean</return_type><argument name="s" type="String"/></data_method><data_method name="!=" native="true"><return_type>Boolean</return_type><argument name="o" type="Object"/></data_method><data_method name="!==" native="true"><return_type>Boolean</return_type><argument name="o" type="Object"/></data_method><data_method name="=" native="true"><return_type>Boolean</return_type><argument name="o" type="Object"/></data_method><data_method name="==" native="true"><return_type>Boolean</return_type><argument name="o" type="Object"/></data_method></data_class><data_class name="Array" native="true"><super_class>Object</super_class><data_method name="deepCopy" native="true"><return_type>Object</return_type></data_method><data_method name="shallowCopy" native="true"><return_type>Object</return_type></data_method><data_method name="printString" native="true"><return_type>String</return_type></data_method><data_method name="at" native="true"><return_type>Object</return_type><argument name="i" type="Integer"/></data_method><data_method name="size" native="true"><return_type>Integer</return_type></data_method><data_method name="putAt" native="true"><return_type>Array</return_type><argument name="i" type="Integer"/><argument name="o" type="Object"/></data_method><data_method name="putAll" native="true"><return_type>Array</return_type><argument name="o" type="Object"/></data_method><data_method name="resize" native="true"><return_type>Array</return_type><argument name="i" type="Integer"/></data_method><data_method name="concat" native="true"><return_type>Array</return_type><argument name="a" type="Array"/></data_method><data_method name="find" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/><argument name="o" type="Object"/></data_method><data_method name="subArray" native="true"><return_type>Array</return_type><argument name="i" type="Integer"/><argument name="l" type="Integer"/></data_method><data_method name="=" native="true"><return_type>Boolean</return_type><argument name="o" type="Object"/></data_method><data_method name="+" native="true"><return_type>Array</return_type><argument name="a" type="Array"/></data_method></data_class><data_class name="String" native="true"><super_class>Object</super_class><data_method name="deepCopy" native="true"><return_type>Object</return_type></data_method><data_method name="shallowCopy" native="true"><return_type>Object</return_type></data_method><data_method name="concat" native="true"><return_type>String</return_type><argument name="s" type="String"/></data_method><data_method name="cr" native="true"><return_type>String</return_type></data_method><data_method name="lf" native="true"><return_type>String</return_type></data_method><data_method name="tab" native="true"><return_type>String</return_type></data_method><data_method name="find" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/><argument name="s" type="String"/></data_method><data_method name="at" native="true"><return_type>Char</return_type><argument name="i" type="Integer"/></data_method><data_method name="size" native="true"><return_type>Integer</return_type></data_method><data_method name="putAt" native="true"><return_type>String</return_type><argument name="i" type="Integer"/><argument name="c" type="Char"/></data_method><data_method name="subString" native="true"><return_type>String</return_type><argument name="i" type="Integer"/><argument name="l" type="Integer"/></data_method><data_method name="unmarshal" native="true"><return_type>Object</return_type></data_method><data_method name="splitOn" native="true"><return_type>Array</return_type><argument name="c" type="Char"/></data_method><data_method name="splitOnWhiteSpace" native="true"><return_type>Array</return_type></data_method><data_method name="splitOnString" native="true"><return_type>Array</return_type><argument name="s" type="String"/></data_method><data_method name="splitOnAny" native="true"><return_type>Array</return_type><argument name="c" type="String"/></data_method><data_method name="trim" native="true"><return_type>String</return_type></data_method><data_method name="isBoolean" native="true"><return_type>Boolean</return_type></data_method><data_method name="isChar" native="true"><return_type>Boolean</return_type></data_method><data_method name="isNumber" native="true"><return_type>Boolean</return_type></data_method><data_method name="isInteger" native="true"><return_type>Boolean</return_type></data_method><data_method name="isReal" native="true"><return_type>Boolean</return_type></data_method><data_method name="parseAsInteger" native="true"><return_type>Integer</return_type></data_method><data_method name="parseAsReal" native="true"><return_type>Real</return_type></data_method><data_method name="toBoolean" native="true"><return_type>Boolean</return_type></data_method><data_method name="toChar" native="true"><return_type>Char</return_type></data_method><data_method name="toReal" native="true"><return_type>Real</return_type></data_method><data_method name="toInteger" native="true"><return_type>Integer</return_type></data_method><data_method name="=" native="true"><return_type>Boolean</return_type><argument name="o" type="Object"/></data_method><data_method name="+" native="true"><return_type>String</return_type><argument name="s" type="String"/></data_method></data_class><data_class name="Nil" native="true"><super_class>Object</super_class></data_class><data_class name="Boolean" native="true"><super_class>Object</super_class><data_method name="not" native="true"><return_type>Boolean</return_type></data_method><data_method name="xor" native="true"><return_type>Boolean</return_type><argument name="b" type="Boolean"/></data_method><data_method name="&amp;" native="true"><return_type>Boolean</return_type><argument name="b" type="Boolean"/></data_method><data_method name="|" native="true"><return_type>Boolean</return_type><argument name="b" type="Boolean"/></data_method><data_method name="!" native="true"><return_type>Boolean</return_type></data_method></data_class><data_class name="Char" native="true"><super_class>Object</super_class><data_method name="asciiIndex" native="true"><return_type>Integer</return_type></data_method><data_method name="asString" native="true"><return_type>String</return_type></data_method></data_class><data_class name="Integer" native="true"><super_class>Object</super_class><data_method name="abs" native="true"><return_type>Integer</return_type></data_method><data_method name="asAsciiChar" native="true"><return_type>Char</return_type></data_method><data_method name="asInteger" native="true"><return_type>Integer</return_type></data_method><data_method name="asReal" native="true"><return_type>Real</return_type></data_method><data_method name="div" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="fac" native="true"><return_type>Integer</return_type></data_method><data_method name="modulo" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="monus" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="power" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="sqr" native="true"><return_type>Integer</return_type></data_method><data_method name="max" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="not" native="true"><return_type>Integer</return_type></data_method><data_method name="min" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="xor" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="-" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="*" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="/" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="&amp;" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="+" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="&lt;" native="true"><return_type>Boolean</return_type><argument name="i" type="Integer"/></data_method><data_method name="&lt;=" native="true"><return_type>Boolean</return_type><argument name="i" type="Integer"/></data_method><data_method name="&gt;" native="true"><return_type>Boolean</return_type><argument name="i" type="Integer"/></data_method><data_method name="&gt;=" native="true"><return_type>Boolean</return_type><argument name="i" type="Integer"/></data_method><data_method name="|" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="-" native="true"><return_type>Integer</return_type></data_method></data_class><data_class name="Real" native="true"><super_class>Object</super_class><data_method name="abs" native="true"><return_type>Real</return_type></data_method><data_method name="acos" native="true"><return_type>Real</return_type></data_method><data_method name="asin" native="true"><return_type>Real</return_type></data_method><data_method name="asInteger" native="true"><return_type>Integer</return_type></data_method><data_method name="asReal" native="true"><return_type>Real</return_type></data_method><data_method name="atan" native="true"><return_type>Real</return_type></data_method><data_method name="atan2" native="true"><return_type>Real</return_type><argument name="r" type="Real"/></data_method><data_method name="ceiling" native="true"><return_type>Real</return_type></data_method><data_method name="cos" native="true"><return_type>Real</return_type></data_method><data_method name="exp" native="true"><return_type>Real</return_type></data_method><data_method name="floor" native="true"><return_type>Real</return_type></data_method><data_method name="ln" native="true"><return_type>Real</return_type></data_method><data_method name="log" native="true"><return_type>Real</return_type></data_method><data_method name="monus" native="true"><return_type>Real</return_type><argument name="r" type="Real"/></data_method><data_method name="power" native="true"><return_type>Real</return_type><argument name="r" type="Real"/></data_method><data_method name="round" native="true"><return_type>Real</return_type></data_method><data_method name="sin" native="true"><return_type>Real</return_type></data_method><data_method name="sqr" native="true"><return_type>Real</return_type></data_method><data_method name="sqrt" native="true"><return_type>Real</return_type></data_method><data_method name="tan" native="true"><return_type>Real</return_type></data_method><data_method name="max" native="true"><return_type>Real</return_type><argument name="r" type="Real"/></data_method><data_method name="min" native="true"><return_type>Real</return_type><argument name="r" type="Real"/></data_method><data_method name="-" native="true"><return_type>Real</return_type><argument name="r" type="Real"/></data_method><data_method name="*" native="true"><return_type>Real</return_type><argument name="r" type="Real"/></data_method><data_method name="/" native="true"><return_type>Real</return_type><argument name="r" type="Real"/></data_method><data_method name="+" native="true"><return_type>Real</return_type><argument name="r" type="Real"/></data_method><data_method name="&lt;" native="true"><return_type>Boolean</return_type><argument name="r" type="Real"/></data_method><data_method name="&lt;=" native="true"><return_type>Boolean</return_type><argument name="r" type="Real"/></data_method><data_method name="&gt;" native="true"><return_type>Boolean</return_type><argument name="r" type="Real"/></data_method><data_method name="&gt;=" native="true"><return_type>Boolean</return_type><argument name="r" type="Real"/></data_method><data_method name="-" native="true"><return_type>Real</return_type></data_method></data_class><data_class name="RandomGenerator" native="true"><super_class>Object</super_class><data_method name="random" native="true"><return_type>Real</return_type></data_method><data_method name="randomInt" native="true"><return_type>Integer</return_type><argument name="i" type="Integer"/></data_method><data_method name="randomiseSeed" native="true"><return_type>RandomGenerator</return_type></data_method><data_method name="seed" native="true"><return_type>RandomGenerator</return_type><argument name="i" type="Integer"/></data_method></data_class><data_class name="Console" native="true"><super_class>Object</super_class><data_method name="write" native="true"><return_type>FileOut</return_type><argument name="s" type="String"/></data_method><data_method name="writeLine" native="true"><return_type>FileOut</return_type><argument name="s" type="String"/></data_method><data_method name="writeError" native="true"><return_type>FileOut</return_type><argument name="s" type="String"/></data_method><data_method name="writeLineError" native="true"><return_type>FileOut</return_type><argument name="s" type="String"/></data_method></data_class><data_class name="FileIn" native="true"><super_class>Object</super_class><data_method name="source" native="true"><return_type>FileIn</return_type><argument name="s" type="String"/></data_method><data_method name="open" native="true"><return_type>FileIn</return_type></data_method><data_method name="atEndOfFile" native="true"><return_type>Boolean</return_type></data_method><data_method name="close" native="true"><return_type>FileIn</return_type></data_method><data_method name="read" native="true"><return_type>String</return_type><argument name="i" type="Integer"/></data_method><data_method name="readUntil" native="true"><return_type>String</return_type><argument name="c" type="Char"/></data_method><data_method name="readWord" native="true"><return_type>String</return_type></data_method><data_method name="readLine" native="true"><return_type>String</return_type></data_method><data_method name="readString" native="true"><return_type>String</return_type></data_method></data_class><data_class name="FileOut" native="true"><super_class>Object</super_class><data_method name="destination" native="true"><return_type>FileOut</return_type><argument name="s" type="String"/></data_method><data_method name="open" native="true"><return_type>FileOut</return_type></data_method><data_method name="append" native="true"><return_type>FileOut</return_type></data_method><data_method name="flush" native="true"><return_type>FileOut</return_type></data_method><data_method name="close" native="true"><return_type>FileOut</return_type></data_method><data_method name="write" native="true"><return_type>FileOut</return_type><argument name="s" type="String"/></data_method><data_method name="writeLine" native="true"><return_type>FileOut</return_type><argument name="s" type="String"/></data_method><data_method name="writeString" native="true"><return_type>FileOut</return_type><argument name="s" type="String"/></data_method></data_class><data_class name="Socket" native="true"><super_class>Object</super_class><data_method name="acceptFrom" native="true"><return_type>Socket</return_type><argument name="i" type="Integer"/></data_method><data_method name="connectTo" native="true"><return_type>Socket</return_type><argument name="s" type="String"/><argument name="i" type="Integer"/></data_method><data_method name="isConnected" native="true"><return_type>Boolean</return_type></data_method><data_method name="isDisconnected" native="true"><return_type>Boolean</return_type></data_method><data_method name="close" native="true"><return_type>Socket</return_type></data_method><data_method name="hasCharacters" native="true"><return_type>Boolean</return_type><argument name="i" type="Integer"/></data_method><data_method name="read" native="true"><return_type>String</return_type><argument name="i" type="Integer"/></data_method><data_method name="hasCharacter" native="true"><return_type>Boolean</return_type><argument name="c" type="Char"/></data_method><data_method name="readUntil" native="true"><return_type>String</return_type><argument name="c" type="Char"/></data_method><data_method name="hasWord" native="true"><return_type>Boolean</return_type></data_method><data_method name="readWord" native="true"><return_type>String</return_type></data_method><data_method name="hasLine" native="true"><return_type>Boolean</return_type></data_method><data_method name="readLine" native="true"><return_type>String</return_type></data_method><data_method name="hasString" native="true"><return_type>Boolean</return_type></data_method><data_method name="readString" native="true"><return_type>String</return_type></data_method><data_method name="write" native="true"><return_type>Socket</return_type><argument name="s" type="String"/></data_method><data_method name="writeLine" native="true"><return_type>Socket</return_type><argument name="s" type="String"/></data_method><data_method name="writeString" native="true"><return_type>Socket</return_type><argument name="s" type="String"/></data_method></data_class><data_class name="Observer" native="true"><super_class>Object</super_class><data_method name="identifyWith" native="true"><return_type>Observer</return_type><argument name="s" type="String"/></data_method><data_method name="identity" native="true"><return_type>String</return_type></data_method><data_method name="result" native="true"><return_type>String</return_type></data_method><data_method name="register" native="true"><return_type>Observer</return_type></data_method><data_method name="deregister" native="true"><return_type>Observer</return_type></data_method><data_method name="complete" native="true"><return_type>Observer</return_type></data_method><data_method name="halt" native="true"><return_type>Observer</return_type></data_method><data_method name="isLast" native="true"><return_type>Boolean</return_type></data_method></data_class><data_class name="Distribution" native="false"><super_class>Object</super_class><instance_variable name="Random" type="RandomGenerator"/><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><constant type="string">"Unspecified Distribution"</constant></return></body_expression></data_method><data_method name="initialise" native="false"><return_type>Distribution</return_type><body_expression><sequence_of_expressions><assignment variable_name="Random"><data_method_call method_name="randomiseSeed" super="false" stmt_handle="5"><receiver><new data_class="RandomGenerator"/></receiver></data_method_call></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Bernoulli" native="false"><super_class>Distribution</super_class><instance_variable name="SuccessProbability" type="Real"/><data_method name="withParameter" native="false"><return_type>Bernoulli</return_type><argument name="S" type="Object"/><body_expression><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="6"><receiver><self/></receiver></data_method_call><if><condition><binary_operation operator="|" stmt_handle="7"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="8"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="9"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="10"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="11"><receiver><variable name="S"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="12"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="13"><receiver><variable name="S"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="14"><receiver><self/></receiver><argument><constant type="string">"Parameter of Bernoulli distribution must be an Integer or Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="15"><receiver><variable name="S"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="S"><data_method_call method_name="asReal" super="false" stmt_handle="16"><receiver><variable name="S"/></receiver></data_method_call></assignment></then></if><if><condition><binary_operation operator="|" stmt_handle="17"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="18"><left_operand><variable name="S"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="19"><left_operand><variable name="S"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="20"><receiver><self/></receiver><argument><constant type="string">"Parameter for Bernoulli distribution must be within the interval [0, 1]"</constant></argument></data_method_call></then></if><assignment variable_name="SuccessProbability"><variable name="S"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Boolean</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="21"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="&lt;" stmt_handle="22"><left_operand><data_method_call method_name="random" super="false" stmt_handle="23"><receiver><variable name="Random"/></receiver></data_method_call></left_operand><right_operand><variable name="SuccessProbability"/></right_operand></binary_operation></then><else><nil/></else></if></return></body_expression></data_method><data_method name="yieldsSuccess" native="false"><return_type>Boolean</return_type><body_expression><return><data_method_call method_name="sample" super="false" stmt_handle="24"><receiver><self/></receiver></data_method_call></return></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="25"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="26"><left_operand><binary_operation operator="+" stmt_handle="27"><left_operand><constant type="string">"Bernoulli("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="28"><receiver><variable name="SuccessProbability"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></then><else><constant type="string">"Uninitialized Bernoulli"</constant></else></if></return></body_expression></data_method></data_class><data_class name="Beta" native="false"><super_class>Distribution</super_class><instance_variable name="GammaA" type="Gamma"/><instance_variable name="GammaB" type="Gamma"/><instance_variable name="Alpha" type="Real"/><instance_variable name="Beta" type="Real"/><data_method name="withParameters" native="false"><return_type>Beta</return_type><argument name="A" type="Object"/><argument name="B" type="Object"/><body_expression><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="29"><receiver><self/></receiver></data_method_call><if><condition><binary_operation operator="|" stmt_handle="30"><left_operand><binary_operation operator="|" stmt_handle="31"><left_operand><binary_operation operator="|" stmt_handle="32"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="33"><left_operand><variable name="A"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="34"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="35"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="36"><receiver><variable name="A"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="37"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="38"><receiver><variable name="A"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="39"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="40"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="41"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="42"><receiver><variable name="B"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="43"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="44"><receiver><variable name="B"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="45"><receiver><self/></receiver><argument><constant type="string">"Shape parameters of Beta distribution must be Integers or Reals"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="46"><receiver><variable name="A"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="A"><data_method_call method_name="asReal" super="false" stmt_handle="47"><receiver><variable name="A"/></receiver></data_method_call></assignment></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="48"><receiver><variable name="B"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="B"><data_method_call method_name="asReal" super="false" stmt_handle="49"><receiver><variable name="B"/></receiver></data_method_call></assignment></then></if><if><condition><binary_operation operator="|" stmt_handle="50"><left_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="51"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="52"><left_operand><variable name="B"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="53"><receiver><self/></receiver><argument><constant type="string">"Shape parameters of Beta distribution should be larger than 0.0"</constant></argument></data_method_call></then></if><assignment variable_name="Alpha"><variable name="A"/></assignment><assignment variable_name="Beta"><variable name="B"/></assignment><assignment variable_name="GammaA"><data_method_call method_name="withParameters" super="false" stmt_handle="54"><receiver><new data_class="Gamma"/></receiver><argument><variable name="Alpha"/></argument><argument><constant type="real">1.0</constant></argument></data_method_call></assignment><assignment variable_name="GammaB"><data_method_call method_name="withParameters" super="false" stmt_handle="55"><receiver><new data_class="Gamma"/></receiver><argument><variable name="Beta"/></argument><argument><constant type="real">1.0</constant></argument></data_method_call></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Real</return_type><local_variable name="Sample" type="Real"/><body_expression><if><condition><binary_operation operator="!=" stmt_handle="56"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Sample"><data_method_call method_name="sample" super="false" stmt_handle="57"><receiver><variable name="GammaA"/></receiver></data_method_call></assignment><return><binary_operation operator="/" stmt_handle="58"><left_operand><variable name="Sample"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="59"><left_operand><variable name="Sample"/></left_operand><right_operand><data_method_call method_name="sample" super="false" stmt_handle="60"><receiver><variable name="GammaB"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></return></sequence_of_expressions></then><else><return><nil/></return></else></if></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="61"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="62"><left_operand><binary_operation operator="+" stmt_handle="63"><left_operand><binary_operation operator="+" stmt_handle="64"><left_operand><binary_operation operator="+" stmt_handle="65"><left_operand><constant type="string">"Beta("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="66"><receiver><variable name="Alpha"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="67"><receiver><variable name="Beta"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></then><else><constant type="string">"Uninitialized Beta"</constant></else></if></return></body_expression></data_method></data_class><data_class name="Beta4" native="false"><super_class>Distribution</super_class><instance_variable name="GammaA" type="Gamma"/><instance_variable name="GammaB" type="Gamma"/><instance_variable name="Alpha" type="Real"/><instance_variable name="Beta" type="Real"/><instance_variable name="LowerBound" type="Real"/><instance_variable name="UpperBound" type="Real"/><instance_variable name="Fixed" type="Boolean"/><data_method name="withParameters" native="false"><return_type>Beta4</return_type><argument name="A" type="Object"/><argument name="B" type="Object"/><argument name="L" type="Object"/><argument name="U" type="Object"/><local_variable name="Temp" type="Real"/><body_expression><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="68"><receiver><self/></receiver></data_method_call><if><condition><binary_operation operator="|" stmt_handle="69"><left_operand><binary_operation operator="|" stmt_handle="70"><left_operand><binary_operation operator="|" stmt_handle="71"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="72"><left_operand><variable name="A"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="73"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="74"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="75"><receiver><variable name="A"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="76"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="77"><receiver><variable name="A"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="78"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="79"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="80"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="81"><receiver><variable name="B"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="82"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="83"><receiver><variable name="B"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="84"><receiver><self/></receiver><argument><constant type="string">"Shape parameters of Beta4 distribution must be Integers or Reals"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="85"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="86"><left_operand><variable name="L"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="87"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="88"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="89"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="90"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="91"><receiver><variable name="L"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="92"><receiver><self/></receiver><argument><constant type="string">"Lower Bound for Beta4 distribution must be an Integer or Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="93"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="94"><left_operand><variable name="U"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="95"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="96"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="97"><receiver><variable name="U"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="98"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="99"><receiver><variable name="U"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="100"><receiver><self/></receiver><argument><constant type="string">"Upper Bound for Beta4 distribution must be an Integer or Real"</constant></argument></data_method_call></then></if><assignment variable_name="Alpha"><variable name="A"/></assignment><assignment variable_name="Beta"><variable name="B"/></assignment><assignment variable_name="LowerBound"><variable name="L"/></assignment><assignment variable_name="UpperBound"><variable name="U"/></assignment><assignment variable_name="Fixed"><binary_operation operator="=" stmt_handle="101"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></assignment><if><condition><data_method_call method_name="not" super="false" stmt_handle="102"><receiver><variable name="Fixed"/></receiver></data_method_call></condition><then><sequence_of_expressions><if><condition><binary_operation operator="&gt;=" stmt_handle="103"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Temp"><variable name="LowerBound"/></assignment><assignment variable_name="LowerBound"><variable name="UpperBound"/></assignment><assignment variable_name="UpperBound"><variable name="Temp"/></assignment></sequence_of_expressions></then></if><if><condition><binary_operation operator="|" stmt_handle="104"><left_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="105"><left_operand><variable name="Alpha"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="106"><left_operand><variable name="Beta"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="107"><receiver><self/></receiver><argument><constant type="string">"Shape parameters of Beta4 distribution should be larger than 0.0"</constant></argument></data_method_call></then></if><assignment variable_name="GammaA"><data_method_call method_name="withParameters" super="false" stmt_handle="108"><receiver><new data_class="Gamma"/></receiver><argument><variable name="Alpha"/></argument><argument><constant type="real">1.0</constant></argument></data_method_call></assignment><assignment variable_name="GammaB"><data_method_call method_name="withParameters" super="false" stmt_handle="109"><receiver><new data_class="Gamma"/></receiver><argument><variable name="Beta"/></argument><argument><constant type="real">1.0</constant></argument></data_method_call></assignment></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Real</return_type><local_variable name="Sample" type="Real"/><body_expression><if><condition><binary_operation operator="!=" stmt_handle="110"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><if><condition><variable name="Fixed"/></condition><then><return><variable name="LowerBound"/></return></then><else><sequence_of_expressions><assignment variable_name="Sample"><data_method_call method_name="sample" super="false" stmt_handle="111"><receiver><variable name="GammaA"/></receiver></data_method_call></assignment><if><condition><binary_operation operator="=" stmt_handle="112"><left_operand><variable name="Sample"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><then><return><variable name="LowerBound"/></return></then><else><return><binary_operation operator="+" stmt_handle="113"><left_operand><variable name="LowerBound"/></left_operand><right_operand><binary_operation operator="*" stmt_handle="114"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="115"><left_operand><variable name="UpperBound"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="/" stmt_handle="116"><left_operand><variable name="Sample"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="117"><left_operand><variable name="Sample"/></left_operand><right_operand><data_method_call method_name="sample" super="false" stmt_handle="118"><receiver><variable name="GammaB"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></right_operand></binary_operation></return></else></if></sequence_of_expressions></else></if></then><else><return><nil/></return></else></if></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="119"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="120"><left_operand><binary_operation operator="+" stmt_handle="121"><left_operand><binary_operation operator="+" stmt_handle="122"><left_operand><binary_operation operator="+" stmt_handle="123"><left_operand><binary_operation operator="+" stmt_handle="124"><left_operand><binary_operation operator="+" stmt_handle="125"><left_operand><binary_operation operator="+" stmt_handle="126"><left_operand><binary_operation operator="+" stmt_handle="127"><left_operand><constant type="string">"Beta4("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="128"><receiver><variable name="Alpha"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="129"><receiver><variable name="Beta"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="130"><receiver><variable name="LowerBound"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="131"><receiver><variable name="UpperBound"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></then><else><constant type="string">"Uninitialized Beta4"</constant></else></if></return></body_expression></data_method></data_class><data_class name="DiscreteUniform" native="false"><super_class>Distribution</super_class><instance_variable name="LowerBound" type="Integer"/><instance_variable name="IntervalLength" type="Integer"/><instance_variable name="Fixed" type="Boolean"/><data_method name="withParameters" native="false"><return_type>DiscreteUniform</return_type><argument name="L" type="Object"/><argument name="U" type="Object"/><local_variable name="Temp" type="Integer"/><body_expression><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="132"><receiver><self/></receiver></data_method_call><assignment variable_name="Fixed"><binary_operation operator="=" stmt_handle="133"><left_operand><variable name="L"/></left_operand><right_operand><variable name="U"/></right_operand></binary_operation></assignment><if><condition><binary_operation operator="|" stmt_handle="134"><left_operand><binary_operation operator="|" stmt_handle="135"><left_operand><binary_operation operator="|" stmt_handle="136"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="137"><left_operand><variable name="L"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="138"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="139"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="140"><left_operand><variable name="U"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="141"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="142"><receiver><variable name="U"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="143"><receiver><self/></receiver><argument><constant type="string">"Parameters of Discrete Uniform distribution must be Integers"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&gt;" stmt_handle="144"><left_operand><variable name="L"/></left_operand><right_operand><variable name="U"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Temp"><variable name="L"/></assignment><assignment variable_name="L"><variable name="U"/></assignment><assignment variable_name="U"><variable name="Temp"/></assignment></sequence_of_expressions></then></if><assignment variable_name="LowerBound"><variable name="L"/></assignment><assignment variable_name="IntervalLength"><binary_operation operator="+" stmt_handle="145"><left_operand><binary_operation operator="-" stmt_handle="146"><left_operand><variable name="U"/></left_operand><right_operand><variable name="L"/></right_operand></binary_operation></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Integer</return_type><body_expression><if><condition><binary_operation operator="!=" stmt_handle="147"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><return><if><condition><variable name="Fixed"/></condition><then><variable name="LowerBound"/></then><else><binary_operation operator="+" stmt_handle="148"><left_operand><variable name="LowerBound"/></left_operand><right_operand><data_method_call method_name="asInteger" super="false" stmt_handle="149"><receiver><data_method_call method_name="floor" super="false" stmt_handle="150"><receiver><sequence_of_expressions><binary_operation operator="*" stmt_handle="151"><left_operand><data_method_call method_name="random" super="false" stmt_handle="152"><receiver><variable name="Random"/></receiver></data_method_call></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="asReal" super="false" stmt_handle="153"><receiver><variable name="IntervalLength"/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></receiver></data_method_call></right_operand></binary_operation></else></if></return></then><else><return><nil/></return></else></if></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="154"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="155"><left_operand><binary_operation operator="+" stmt_handle="156"><left_operand><binary_operation operator="+" stmt_handle="157"><left_operand><binary_operation operator="+" stmt_handle="158"><left_operand><constant type="string">"DiscreteUniform("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="159"><receiver><variable name="LowerBound"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="160"><receiver><sequence_of_expressions><binary_operation operator="-" stmt_handle="161"><left_operand><binary_operation operator="+" stmt_handle="162"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="IntervalLength"/></right_operand></binary_operation></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></then><else><constant type="string">"Uninitialized Discrete Uniform"</constant></else></if></return></body_expression></data_method></data_class><data_class name="Exponential" native="false"><super_class>Distribution</super_class><instance_variable name="Lambda" type="Real"/><data_method name="withParameter" native="false"><return_type>Exponential</return_type><argument name="L" type="Object"/><body_expression><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="163"><receiver><self/></receiver></data_method_call><if><condition><binary_operation operator="|" stmt_handle="164"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="165"><left_operand><variable name="L"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="166"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="167"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="168"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="169"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="170"><receiver><variable name="L"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="171"><receiver><self/></receiver><argument><constant type="string">"Parameter for Exponential distribution must be an Integer or Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="172"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="L"><data_method_call method_name="asReal" super="false" stmt_handle="173"><receiver><variable name="L"/></receiver></data_method_call></assignment></then></if><if><condition><binary_operation operator="&lt;=" stmt_handle="174"><left_operand><variable name="L"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="175"><receiver><self/></receiver><argument><constant type="string">"Parameter for Exponential distribution must be positive"</constant></argument></data_method_call></then></if><assignment variable_name="Lambda"><variable name="L"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Real</return_type><local_variable name="Sample" type="Real"/><body_expression><if><condition><binary_operation operator="!=" stmt_handle="176"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Sample"><binary_operation operator="/" stmt_handle="177"><left_operand><unary_operation operator="-" stmt_handle="178"><operand><sequence_of_expressions><data_method_call method_name="ln" super="false" stmt_handle="179"><receiver><data_method_call method_name="random" super="false" stmt_handle="180"><receiver><variable name="Random"/></receiver></data_method_call></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></left_operand><right_operand><variable name="Lambda"/></right_operand></binary_operation></assignment><return><if><condition><binary_operation operator="&gt;" stmt_handle="181"><left_operand><variable name="Sample"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><then><variable name="Sample"/></then><else><data_method_call method_name="sample" super="false" stmt_handle="182"><receiver><self/></receiver></data_method_call></else></if></return></sequence_of_expressions></then><else><return><nil/></return></else></if></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="183"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="184"><left_operand><binary_operation operator="+" stmt_handle="185"><left_operand><constant type="string">"Exponential("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="186"><receiver><variable name="Lambda"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></then><else><constant type="string">"Uninitialized Exponential Distribution"</constant></else></if></return></body_expression></data_method></data_class><data_class name="Gamma" native="false"><super_class>Distribution</super_class><instance_variable name="Alpha" type="Real"/><instance_variable name="Beta" type="Real"/><data_method name="withParameters" native="false"><return_type>Gamma</return_type><argument name="A" type="Object"/><argument name="B" type="Object"/><body_expression><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="187"><receiver><self/></receiver></data_method_call><if><condition><binary_operation operator="|" stmt_handle="188"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="189"><left_operand><variable name="A"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="190"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="191"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="192"><receiver><variable name="A"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="193"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="194"><receiver><variable name="A"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="195"><receiver><self/></receiver><argument><constant type="string">"Shape parameter of Gamma distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="196"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="197"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="198"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="199"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="200"><receiver><variable name="B"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="201"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="202"><receiver><variable name="B"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="203"><receiver><self/></receiver><argument><constant type="string">"Scale parameter of Gamma distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="204"><receiver><variable name="A"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="A"><data_method_call method_name="asReal" super="false" stmt_handle="205"><receiver><variable name="A"/></receiver></data_method_call></assignment></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="206"><receiver><variable name="B"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="B"><data_method_call method_name="asReal" super="false" stmt_handle="207"><receiver><variable name="B"/></receiver></data_method_call></assignment></then></if><if><condition><binary_operation operator="&lt;=" stmt_handle="208"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="209"><receiver><self/></receiver><argument><constant type="string">"Shape parameter of Gamma distribution should be larger than 0.0"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&lt;=" stmt_handle="210"><left_operand><variable name="B"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="211"><receiver><self/></receiver><argument><constant type="string">"Scale parameter of Gamma distribution should be larger than 0.0"</constant></argument></data_method_call></then></if><assignment variable_name="Alpha"><variable name="A"/></assignment><assignment variable_name="Beta"><variable name="B"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Real</return_type><local_variable name="T" type="Real"/><local_variable name="ainv" type="Real"/><local_variable name="e" type="Real"/><local_variable name="b" type="Real"/><local_variable name="p" type="Real"/><local_variable name="bbb" type="Real"/><local_variable name="ccc" type="Real"/><local_variable name="u" type="Real"/><local_variable name="u1" type="Real"/><local_variable name="u2" type="Real"/><local_variable name="v" type="Real"/><local_variable name="x" type="Real"/><local_variable name="z" type="Real"/><local_variable name="r" type="Real"/><local_variable name="MAGICCONST" type="Real"/><body_expression><if><condition><binary_operation operator="!=" stmt_handle="212"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="MAGICCONST"><binary_operation operator="+" stmt_handle="213"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><data_method_call method_name="ln" super="false" stmt_handle="214"><receiver><constant type="real">4.5</constant></receiver></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="T"><constant type="real">-1.0</constant></assignment><if><condition><binary_operation operator="&gt;" stmt_handle="215"><left_operand><variable name="Alpha"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="ainv"><data_method_call method_name="sqrt" super="false" stmt_handle="216"><receiver><sequence_of_expressions><binary_operation operator="-" stmt_handle="217"><left_operand><binary_operation operator="*" stmt_handle="218"><left_operand><constant type="real">2.0</constant></left_operand><right_operand><variable name="Alpha"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></assignment><assignment variable_name="bbb"><binary_operation operator="-" stmt_handle="219"><left_operand><variable name="Alpha"/></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="log" super="false" stmt_handle="220"><receiver><constant type="real">4.0</constant></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></assignment><assignment variable_name="ccc"><binary_operation operator="+" stmt_handle="221"><left_operand><variable name="Alpha"/></left_operand><right_operand><variable name="ainv"/></right_operand></binary_operation></assignment><while><condition><binary_operation operator="&lt;" stmt_handle="222"><left_operand><variable name="T"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="u1"><data_method_call method_name="random" super="false" stmt_handle="223"><receiver><variable name="Random"/></receiver></data_method_call></assignment><if><condition><binary_operation operator="&amp;" stmt_handle="224"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="225"><left_operand><constant type="real">1.0e-7</constant></left_operand><right_operand><variable name="u1"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="226"><left_operand><variable name="u1"/></left_operand><right_operand><constant type="real">0.9999999</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="u2"><binary_operation operator="-" stmt_handle="227"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><data_method_call method_name="random" super="false" stmt_handle="228"><receiver><variable name="Random"/></receiver></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="v"><binary_operation operator="/" stmt_handle="229"><left_operand><sequence_of_expressions><data_method_call method_name="ln" super="false" stmt_handle="230"><receiver><sequence_of_expressions><binary_operation operator="/" stmt_handle="231"><left_operand><variable name="u1"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="232"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="u1"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><variable name="ainv"/></right_operand></binary_operation></assignment><assignment variable_name="x"><binary_operation operator="*" stmt_handle="233"><left_operand><variable name="Alpha"/></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="exp" super="false" stmt_handle="234"><receiver><variable name="v"/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></assignment><assignment variable_name="z"><binary_operation operator="*" stmt_handle="235"><left_operand><binary_operation operator="*" stmt_handle="236"><left_operand><variable name="u1"/></left_operand><right_operand><variable name="u1"/></right_operand></binary_operation></left_operand><right_operand><variable name="u2"/></right_operand></binary_operation></assignment><assignment variable_name="r"><binary_operation operator="-" stmt_handle="237"><left_operand><binary_operation operator="+" stmt_handle="238"><left_operand><variable name="bbb"/></left_operand><right_operand><binary_operation operator="*" stmt_handle="239"><left_operand><variable name="ccc"/></left_operand><right_operand><variable name="v"/></right_operand></binary_operation></right_operand></binary_operation></left_operand><right_operand><variable name="x"/></right_operand></binary_operation></assignment><if><condition><binary_operation operator="|" stmt_handle="240"><left_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="241"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="242"><left_operand><binary_operation operator="+" stmt_handle="243"><left_operand><variable name="r"/></left_operand><right_operand><variable name="MAGICCONST"/></right_operand></binary_operation></left_operand><right_operand><binary_operation operator="*" stmt_handle="244"><left_operand><constant type="real">4.5</constant></left_operand><right_operand><variable name="z"/></right_operand></binary_operation></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="245"><left_operand><variable name="r"/></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="ln" super="false" stmt_handle="246"><receiver><variable name="z"/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><assignment variable_name="T"><binary_operation operator="*" stmt_handle="247"><left_operand><variable name="x"/></left_operand><right_operand><variable name="Beta"/></right_operand></binary_operation></assignment></then></if></sequence_of_expressions></then></if></sequence_of_expressions></body></while></sequence_of_expressions></then></if><if><condition><binary_operation operator="=" stmt_handle="248"><left_operand><variable name="Alpha"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="u"><data_method_call method_name="random" super="false" stmt_handle="249"><receiver><variable name="Random"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="250"><left_operand><variable name="u"/></left_operand><right_operand><constant type="real">1.0e-7</constant></right_operand></binary_operation></condition><body><assignment variable_name="u"><data_method_call method_name="random" super="false" stmt_handle="251"><receiver><variable name="Random"/></receiver></data_method_call></assignment></body></while><assignment variable_name="T"><binary_operation operator="*" stmt_handle="252"><left_operand><unary_operation operator="-" stmt_handle="253"><operand><sequence_of_expressions><data_method_call method_name="ln" super="false" stmt_handle="254"><receiver><variable name="u"/></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></left_operand><right_operand><variable name="Beta"/></right_operand></binary_operation></assignment></sequence_of_expressions></then></if><if><condition><binary_operation operator="&lt;" stmt_handle="255"><left_operand><variable name="Alpha"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></condition><then><while><condition><binary_operation operator="&lt;" stmt_handle="256"><left_operand><variable name="T"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="u"><data_method_call method_name="random" super="false" stmt_handle="257"><receiver><variable name="Random"/></receiver></data_method_call></assignment><assignment variable_name="e"><data_method_call method_name="exp" super="false" stmt_handle="258"><receiver><constant type="real">1.0</constant></receiver></data_method_call></assignment><assignment variable_name="b"><binary_operation operator="/" stmt_handle="259"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="260"><left_operand><variable name="e"/></left_operand><right_operand><variable name="Alpha"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="e"/></right_operand></binary_operation></assignment><assignment variable_name="p"><binary_operation operator="*" stmt_handle="261"><left_operand><variable name="b"/></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></assignment><if><condition><binary_operation operator="&lt;=" stmt_handle="262"><left_operand><variable name="p"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></condition><then><assignment variable_name="x"><data_method_call method_name="power" super="false" stmt_handle="267"><receiver><variable name="p"/></receiver><argument><binary_operation operator="/" stmt_handle="268"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="Alpha"/></right_operand></binary_operation></argument></data_method_call></assignment></then><else><assignment variable_name="x"><unary_operation operator="-" stmt_handle="263"><operand><sequence_of_expressions><data_method_call method_name="ln" super="false" stmt_handle="264"><receiver><sequence_of_expressions><binary_operation operator="/" stmt_handle="265"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="266"><left_operand><variable name="b"/></left_operand><right_operand><variable name="p"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="Alpha"/></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></assignment></else></if><assignment variable_name="u1"><data_method_call method_name="random" super="false" stmt_handle="269"><receiver><variable name="Random"/></receiver></data_method_call></assignment><if><condition><binary_operation operator="&gt;" stmt_handle="270"><left_operand><variable name="p"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></condition><then><if><condition><binary_operation operator="&lt;=" stmt_handle="275"><left_operand><variable name="u1"/></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="power" super="false" stmt_handle="276"><receiver><variable name="x"/></receiver><argument><binary_operation operator="-" stmt_handle="277"><left_operand><variable name="Alpha"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></argument></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><assignment variable_name="T"><binary_operation operator="*" stmt_handle="278"><left_operand><variable name="x"/></left_operand><right_operand><variable name="Beta"/></right_operand></binary_operation></assignment></then></if></then><else><if><condition><binary_operation operator="&lt;=" stmt_handle="271"><left_operand><variable name="u1"/></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="exp" super="false" stmt_handle="272"><receiver><sequence_of_expressions><unary_operation operator="-" stmt_handle="273"><operand><variable name="x"/></operand></unary_operation></sequence_of_expressions></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><assignment variable_name="T"><binary_operation operator="*" stmt_handle="274"><left_operand><variable name="x"/></left_operand><right_operand><variable name="Beta"/></right_operand></binary_operation></assignment></then></if></else></if></sequence_of_expressions></body></while></then></if><return><variable name="T"/></return></sequence_of_expressions></then><else><return><nil/></return></else></if></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="279"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="280"><left_operand><binary_operation operator="+" stmt_handle="281"><left_operand><binary_operation operator="+" stmt_handle="282"><left_operand><binary_operation operator="+" stmt_handle="283"><left_operand><constant type="string">"Gamma("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="284"><receiver><variable name="Alpha"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="285"><receiver><variable name="Beta"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></then><else><constant type="string">"Uninitialized Gamma Distribution"</constant></else></if></return></body_expression></data_method></data_class><data_class name="Discrete" native="false"><super_class>Distribution</super_class><instance_variable name="Samples" type="Array"/><instance_variable name="LowerBounds" type="Array"/><instance_variable name="UpperBounds" type="Array"/><instance_variable name="Weights" type="Array"/><data_method name="withParameters" native="false"><return_type>Discrete</return_type><argument name="Value" type="Object"/><argument name="Weight" type="Object"/><local_variable name="Index" type="Integer"/><local_variable name="Size" type="Integer"/><local_variable name="CumulativeWeight" type="Real"/><local_variable name="Total" type="Real"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="286"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="287"><receiver><self/></receiver></data_method_call><assignment variable_name="Samples"><new data_class="Array"/></assignment><assignment variable_name="Weights"><new data_class="Array"/></assignment><assignment variable_name="LowerBounds"><new data_class="Array"/></assignment><assignment variable_name="UpperBounds"><new data_class="Array"/></assignment></sequence_of_expressions></then></if><if><condition><binary_operation operator="|" stmt_handle="288"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="289"><left_operand><variable name="Weight"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="290"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="291"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="292"><receiver><variable name="Weight"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="293"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="294"><receiver><variable name="Weight"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="295"><receiver><self/></receiver><argument><constant type="string">"Weight parameter of Discrete distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="296"><receiver><variable name="Weight"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="Weight"><data_method_call method_name="asReal" super="false" stmt_handle="297"><receiver><variable name="Weight"/></receiver></data_method_call></assignment></then></if><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="298"><left_operand><data_method_call method_name="size" super="false" stmt_handle="299"><receiver><variable name="Samples"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><data_method_call method_name="resize" super="false" stmt_handle="300"><receiver><variable name="Samples"/></receiver><argument><variable name="Size"/></argument></data_method_call><data_method_call method_name="resize" super="false" stmt_handle="301"><receiver><variable name="Weights"/></receiver><argument><variable name="Size"/></argument></data_method_call><data_method_call method_name="putAt" super="false" stmt_handle="302"><receiver><variable name="Samples"/></receiver><argument><variable name="Size"/></argument><argument><variable name="Value"/></argument></data_method_call><data_method_call method_name="putAt" super="false" stmt_handle="303"><receiver><variable name="Weights"/></receiver><argument><variable name="Size"/></argument><argument><variable name="Weight"/></argument></data_method_call><data_method_call method_name="resize" super="false" stmt_handle="304"><receiver><variable name="LowerBounds"/></receiver><argument><variable name="Size"/></argument></data_method_call><data_method_call method_name="resize" super="false" stmt_handle="305"><receiver><variable name="UpperBounds"/></receiver><argument><variable name="Size"/></argument></data_method_call><assignment variable_name="Index"><constant type="integer">1</constant></assignment><assignment variable_name="Total"><constant type="real">0.0</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="306"><left_operand><variable name="Index"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="Total"><binary_operation operator="+" stmt_handle="307"><left_operand><variable name="Total"/></left_operand><right_operand><data_method_call method_name="at" super="false" stmt_handle="308"><receiver><variable name="Weights"/></receiver><argument><variable name="Index"/></argument></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="Index"><binary_operation operator="+" stmt_handle="309"><left_operand><variable name="Index"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><assignment variable_name="Index"><constant type="integer">1</constant></assignment><assignment variable_name="CumulativeWeight"><constant type="real">0.0</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="310"><left_operand><variable name="Index"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="putAt" super="false" stmt_handle="311"><receiver><variable name="LowerBounds"/></receiver><argument><variable name="Index"/></argument><argument><binary_operation operator="/" stmt_handle="312"><left_operand><variable name="CumulativeWeight"/></left_operand><right_operand><variable name="Total"/></right_operand></binary_operation></argument></data_method_call><assignment variable_name="CumulativeWeight"><binary_operation operator="+" stmt_handle="313"><left_operand><variable name="CumulativeWeight"/></left_operand><right_operand><data_method_call method_name="at" super="false" stmt_handle="314"><receiver><variable name="Weights"/></receiver><argument><variable name="Index"/></argument></data_method_call></right_operand></binary_operation></assignment><data_method_call method_name="putAt" super="false" stmt_handle="315"><receiver><variable name="UpperBounds"/></receiver><argument><variable name="Index"/></argument><argument><binary_operation operator="/" stmt_handle="316"><left_operand><variable name="CumulativeWeight"/></left_operand><right_operand><variable name="Total"/></right_operand></binary_operation></argument></data_method_call><assignment variable_name="Index"><binary_operation operator="+" stmt_handle="317"><left_operand><variable name="Index"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Object</return_type><local_variable name="Sample" type="Real"/><local_variable name="Result" type="Object"/><local_variable name="Index" type="Integer"/><body_expression><if><condition><binary_operation operator="!=" stmt_handle="318"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Sample"><data_method_call method_name="random" super="false" stmt_handle="319"><receiver><variable name="Random"/></receiver></data_method_call></assignment><assignment variable_name="Index"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="320"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="321"><left_operand><variable name="Result"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="322"><left_operand><variable name="Index"/></left_operand><right_operand><data_method_call method_name="size" super="false" stmt_handle="323"><receiver><variable name="Samples"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><if><condition><binary_operation operator="&amp;" stmt_handle="324"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="325"><left_operand><data_method_call method_name="at" super="false" stmt_handle="326"><receiver><variable name="LowerBounds"/></receiver><argument><variable name="Index"/></argument></data_method_call></left_operand><right_operand><variable name="Sample"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="327"><left_operand><variable name="Sample"/></left_operand><right_operand><data_method_call method_name="at" super="false" stmt_handle="328"><receiver><variable name="UpperBounds"/></receiver><argument><variable name="Index"/></argument></data_method_call></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><assignment variable_name="Result"><data_method_call method_name="at" super="false" stmt_handle="330"><receiver><variable name="Samples"/></receiver><argument><variable name="Index"/></argument></data_method_call></assignment></then><else><assignment variable_name="Index"><binary_operation operator="+" stmt_handle="329"><left_operand><variable name="Index"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></else></if></body></while><return><variable name="Result"/></return></sequence_of_expressions></then><else><return><nil/></return></else></if></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="PrintOut" type="String"/><local_variable name="Index" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="!=" stmt_handle="331"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="PrintOut"><constant type="string">"Discrete Distribution\n"</constant></assignment><assignment variable_name="Index"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="332"><left_operand><variable name="Index"/></left_operand><right_operand><data_method_call method_name="size" super="false" stmt_handle="333"><receiver><variable name="Samples"/></receiver></data_method_call></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="PrintOut"><binary_operation operator="+" stmt_handle="334"><left_operand><binary_operation operator="+" stmt_handle="335"><left_operand><binary_operation operator="+" stmt_handle="336"><left_operand><binary_operation operator="+" stmt_handle="337"><left_operand><variable name="PrintOut"/></left_operand><right_operand><constant type="string">"Value: "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="338"><receiver><data_method_call method_name="at" super="false" stmt_handle="339"><receiver><variable name="Samples"/></receiver><argument><variable name="Index"/></argument></data_method_call></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">" Probability: "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="cr" super="false" stmt_handle="340"><receiver><data_method_call method_name="printString" super="false" stmt_handle="341"><receiver><sequence_of_expressions><binary_operation operator="-" stmt_handle="342"><left_operand><data_method_call method_name="at" super="false" stmt_handle="343"><receiver><variable name="UpperBounds"/></receiver><argument><variable name="Index"/></argument></data_method_call></left_operand><right_operand><data_method_call method_name="at" super="false" stmt_handle="344"><receiver><variable name="LowerBounds"/></receiver><argument><variable name="Index"/></argument></data_method_call></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></receiver></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="Index"><binary_operation operator="+" stmt_handle="345"><left_operand><variable name="Index"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while></sequence_of_expressions></then><else><assignment variable_name="PrintOut"><constant type="string">"Uninitialized Discrete Distribution"</constant></assignment></else></if><return><variable name="PrintOut"/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Normal" native="false"><super_class>Distribution</super_class><instance_variable name="Mean" type="Real"/><instance_variable name="StandardDeviation" type="Real"/><data_method name="withParameters" native="false"><return_type>Normal</return_type><argument name="M" type="Object"/><argument name="V" type="Object"/><body_expression><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="346"><receiver><self/></receiver></data_method_call><if><condition><binary_operation operator="|" stmt_handle="347"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="348"><left_operand><variable name="M"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="349"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="350"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="351"><receiver><variable name="M"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="352"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="353"><receiver><variable name="M"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="354"><receiver><self/></receiver><argument><constant type="string">"Mean parameter of Normal distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="355"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="356"><left_operand><variable name="V"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="357"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="358"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="359"><receiver><variable name="V"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="360"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="361"><receiver><variable name="V"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="362"><receiver><self/></receiver><argument><constant type="string">"Variance parameter of Normal distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="363"><receiver><variable name="M"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="M"><data_method_call method_name="asReal" super="false" stmt_handle="364"><receiver><variable name="M"/></receiver></data_method_call></assignment></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="365"><receiver><variable name="V"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="V"><data_method_call method_name="asReal" super="false" stmt_handle="366"><receiver><variable name="V"/></receiver></data_method_call></assignment></then></if><assignment variable_name="Mean"><variable name="M"/></assignment><assignment variable_name="StandardDeviation"><data_method_call method_name="sqrt" super="false" stmt_handle="367"><receiver><variable name="V"/></receiver></data_method_call></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Real</return_type><local_variable name="S" type="Real"/><local_variable name="U" type="Real"/><local_variable name="X" type="Real"/><local_variable name="Y" type="Real"/><body_expression><if><condition><binary_operation operator="!=" stmt_handle="368"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="S"><constant type="real">1.0</constant></assignment><while><condition><binary_operation operator="&gt;=" stmt_handle="369"><left_operand><variable name="S"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="X"><binary_operation operator="-" stmt_handle="370"><left_operand><binary_operation operator="*" stmt_handle="371"><left_operand><constant type="real">2.0</constant></left_operand><right_operand><data_method_call method_name="random" super="false" stmt_handle="372"><receiver><variable name="Random"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></assignment><assignment variable_name="Y"><binary_operation operator="-" stmt_handle="373"><left_operand><binary_operation operator="*" stmt_handle="374"><left_operand><constant type="real">2.0</constant></left_operand><right_operand><data_method_call method_name="random" super="false" stmt_handle="375"><receiver><variable name="Random"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></assignment><assignment variable_name="S"><binary_operation operator="+" stmt_handle="376"><left_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="377"><left_operand><variable name="X"/></left_operand><right_operand><variable name="X"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="378"><left_operand><variable name="Y"/></left_operand><right_operand><variable name="Y"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><assignment variable_name="U"><data_method_call method_name="sqrt" super="false" stmt_handle="379"><receiver><sequence_of_expressions><binary_operation operator="/" stmt_handle="380"><left_operand><binary_operation operator="*" stmt_handle="381"><left_operand><constant type="real">-2.0</constant></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="ln" super="false" stmt_handle="382"><receiver><variable name="S"/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><variable name="S"/></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></assignment><return><binary_operation operator="+" stmt_handle="383"><left_operand><variable name="Mean"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="384"><left_operand><binary_operation operator="*" stmt_handle="385"><left_operand><variable name="X"/></left_operand><right_operand><variable name="U"/></right_operand></binary_operation></left_operand><right_operand><variable name="StandardDeviation"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></return></sequence_of_expressions></then><else><return><nil/></return></else></if></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="386"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="387"><left_operand><binary_operation operator="+" stmt_handle="388"><left_operand><binary_operation operator="+" stmt_handle="389"><left_operand><binary_operation operator="+" stmt_handle="390"><left_operand><constant type="string">"Normal("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="391"><receiver><variable name="Mean"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="392"><receiver><data_method_call method_name="sqr" super="false" stmt_handle="393"><receiver><variable name="StandardDeviation"/></receiver></data_method_call></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></then><else><constant type="string">"Uninitialized Normal Distribution"</constant></else></if></return></body_expression></data_method></data_class><data_class name="PERT" native="false"><super_class>Beta4</super_class><instance_variable name="Mode" type="Real"/><data_method name="withParameters" native="false"><return_type>PERT</return_type><argument name="L" type="Object"/><argument name="M" type="Object"/><argument name="U" type="Object"/><local_variable name="Mean" type="Real"/><local_variable name="Std" type="Real"/><local_variable name="Temp" type="Real"/><body_expression><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="394"><receiver><self/></receiver></data_method_call><if><condition><binary_operation operator="|" stmt_handle="395"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="396"><left_operand><variable name="L"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="397"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="398"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="399"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="400"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="401"><receiver><variable name="L"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="402"><receiver><self/></receiver><argument><constant type="string">"Lower Bound for PERT distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="403"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="404"><left_operand><variable name="M"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="405"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="406"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="407"><receiver><variable name="M"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="408"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="409"><receiver><variable name="M"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="410"><receiver><self/></receiver><argument><constant type="string">"Mode Bound for PERT distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="411"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="412"><left_operand><variable name="U"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="413"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="414"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="415"><receiver><variable name="U"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="416"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="417"><receiver><variable name="U"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="418"><receiver><self/></receiver><argument><constant type="string">"Upper Bound for PERT distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="419"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="L"><data_method_call method_name="asReal" super="false" stmt_handle="420"><receiver><variable name="L"/></receiver></data_method_call></assignment></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="421"><receiver><variable name="M"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="M"><data_method_call method_name="asReal" super="false" stmt_handle="422"><receiver><variable name="M"/></receiver></data_method_call></assignment></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="423"><receiver><variable name="U"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="U"><data_method_call method_name="asReal" super="false" stmt_handle="424"><receiver><variable name="U"/></receiver></data_method_call></assignment></then></if><assignment variable_name="LowerBound"><variable name="L"/></assignment><assignment variable_name="UpperBound"><variable name="U"/></assignment><assignment variable_name="Mode"><variable name="M"/></assignment><assignment variable_name="Fixed"><binary_operation operator="=" stmt_handle="425"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></assignment><if><condition><data_method_call method_name="not" super="false" stmt_handle="426"><receiver><variable name="Fixed"/></receiver></data_method_call></condition><then><sequence_of_expressions><if><condition><binary_operation operator="&gt;" stmt_handle="427"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Temp"><variable name="LowerBound"/></assignment><assignment variable_name="LowerBound"><variable name="UpperBound"/></assignment><assignment variable_name="UpperBound"><variable name="Temp"/></assignment></sequence_of_expressions></then></if><if><condition><binary_operation operator="|" stmt_handle="428"><left_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="429"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="Mode"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="430"><left_operand><variable name="Mode"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="431"><receiver><self/></receiver><argument><constant type="string">"Parameters of PERT distribution do not satisfy LowerBound &lt; Mode &lt; UpperBound or LowerBound = UpperBound"</constant></argument></data_method_call></then></if><assignment variable_name="Mean"><binary_operation operator="/" stmt_handle="432"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="433"><left_operand><binary_operation operator="+" stmt_handle="434"><left_operand><variable name="LowerBound"/></left_operand><right_operand><binary_operation operator="*" stmt_handle="435"><left_operand><constant type="real">4.0</constant></left_operand><right_operand><variable name="Mode"/></right_operand></binary_operation></right_operand></binary_operation></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">6.0</constant></right_operand></binary_operation></assignment><assignment variable_name="Std"><binary_operation operator="/" stmt_handle="436"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="437"><left_operand><variable name="UpperBound"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">6.0</constant></right_operand></binary_operation></assignment><assignment variable_name="Alpha"><binary_operation operator="*" stmt_handle="438"><left_operand><sequence_of_expressions><binary_operation operator="/" stmt_handle="439"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="440"><left_operand><variable name="Mean"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="441"><left_operand><variable name="UpperBound"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="442"><left_operand><sequence_of_expressions><binary_operation operator="/" stmt_handle="443"><left_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="444"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="445"><left_operand><variable name="Mean"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="446"><left_operand><variable name="UpperBound"/></left_operand><right_operand><variable name="Mean"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="sqr" super="false" stmt_handle="447"><receiver><variable name="Std"/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment><assignment variable_name="Beta"><binary_operation operator="*" stmt_handle="448"><left_operand><sequence_of_expressions><binary_operation operator="/" stmt_handle="449"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="450"><left_operand><variable name="UpperBound"/></left_operand><right_operand><variable name="Mean"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="451"><left_operand><variable name="Mean"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="Alpha"/></right_operand></binary_operation></assignment><assignment variable_name="GammaA"><data_method_call method_name="withParameters" super="false" stmt_handle="452"><receiver><new data_class="Gamma"/></receiver><argument><variable name="Alpha"/></argument><argument><constant type="real">1.0</constant></argument></data_method_call></assignment><assignment variable_name="GammaB"><data_method_call method_name="withParameters" super="false" stmt_handle="453"><receiver><new data_class="Gamma"/></receiver><argument><variable name="Beta"/></argument><argument><constant type="real">1.0</constant></argument></data_method_call></assignment></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="454"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="455"><left_operand><binary_operation operator="+" stmt_handle="456"><left_operand><binary_operation operator="+" stmt_handle="457"><left_operand><binary_operation operator="+" stmt_handle="458"><left_operand><binary_operation operator="+" stmt_handle="459"><left_operand><binary_operation operator="+" stmt_handle="460"><left_operand><constant type="string">"PERT("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="461"><receiver><variable name="LowerBound"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="462"><receiver><variable name="Mode"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="463"><receiver><variable name="UpperBound"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></then><else><constant type="string">"Uninitialized PERT Distribution"</constant></else></if></return></body_expression></data_method></data_class><data_class name="Triangle" native="false"><super_class>Distribution</super_class><instance_variable name="LowerBound" type="Real"/><instance_variable name="Mode" type="Real"/><instance_variable name="UpperBound" type="Real"/><instance_variable name="Fixed" type="Boolean"/><data_method name="withParameters" native="false"><return_type>Triangle</return_type><argument name="L" type="Object"/><argument name="M" type="Object"/><argument name="U" type="Object"/><local_variable name="Temp" type="Real"/><body_expression><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="464"><receiver><self/></receiver></data_method_call><if><condition><binary_operation operator="|" stmt_handle="465"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="466"><left_operand><variable name="L"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="467"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="468"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="469"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="470"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="471"><receiver><variable name="L"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="472"><receiver><self/></receiver><argument><constant type="string">"Lower Bound for Triangle distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="473"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="474"><left_operand><variable name="M"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="475"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="476"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="477"><receiver><variable name="M"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="478"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="479"><receiver><variable name="M"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="480"><receiver><self/></receiver><argument><constant type="string">"Mode Bound for Triangle distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="481"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="482"><left_operand><variable name="U"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="483"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="484"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="485"><receiver><variable name="U"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="486"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="487"><receiver><variable name="U"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="488"><receiver><self/></receiver><argument><constant type="string">"Upper Bound for Triangle distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="489"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="L"><data_method_call method_name="asReal" super="false" stmt_handle="490"><receiver><variable name="L"/></receiver></data_method_call></assignment></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="491"><receiver><variable name="M"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="M"><data_method_call method_name="asReal" super="false" stmt_handle="492"><receiver><variable name="M"/></receiver></data_method_call></assignment></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="493"><receiver><variable name="U"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="U"><data_method_call method_name="asReal" super="false" stmt_handle="494"><receiver><variable name="U"/></receiver></data_method_call></assignment></then></if><assignment variable_name="LowerBound"><variable name="L"/></assignment><assignment variable_name="UpperBound"><variable name="U"/></assignment><assignment variable_name="Mode"><variable name="M"/></assignment><assignment variable_name="Fixed"><binary_operation operator="=" stmt_handle="495"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></assignment><if><condition><data_method_call method_name="not" super="false" stmt_handle="496"><receiver><variable name="Fixed"/></receiver></data_method_call></condition><then><sequence_of_expressions><if><condition><binary_operation operator="&gt;" stmt_handle="497"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Temp"><variable name="LowerBound"/></assignment><assignment variable_name="LowerBound"><variable name="UpperBound"/></assignment><assignment variable_name="UpperBound"><variable name="Temp"/></assignment></sequence_of_expressions></then></if><if><condition><binary_operation operator="|" stmt_handle="498"><left_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="499"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="Mode"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="500"><left_operand><variable name="Mode"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="501"><receiver><self/></receiver><argument><constant type="string">"Parameters of Triangle distribution do not satisfy LowerBound &lt; Mode &lt; UpperBound or LowerBound = UpperBound"</constant></argument></data_method_call></then></if></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Real</return_type><local_variable name="Sample" type="Real"/><body_expression><if><condition><binary_operation operator="!=" stmt_handle="502"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><if><condition><variable name="Fixed"/></condition><then><return><variable name="LowerBound"/></return></then><else><sequence_of_expressions><assignment variable_name="Sample"><data_method_call method_name="random" super="false" stmt_handle="503"><receiver><variable name="Random"/></receiver></data_method_call></assignment><if><condition><binary_operation operator="&lt;=" stmt_handle="504"><left_operand><variable name="Sample"/></left_operand><right_operand><binary_operation operator="/" stmt_handle="505"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="506"><left_operand><variable name="Mode"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="507"><left_operand><variable name="UpperBound"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></right_operand></binary_operation></condition><then><return><binary_operation operator="+" stmt_handle="515"><left_operand><variable name="LowerBound"/></left_operand><right_operand><data_method_call method_name="sqrt" super="false" stmt_handle="516"><receiver><sequence_of_expressions><binary_operation operator="*" stmt_handle="517"><left_operand><binary_operation operator="*" stmt_handle="518"><left_operand><variable name="Sample"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="519"><left_operand><variable name="UpperBound"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="520"><left_operand><variable name="Mode"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></right_operand></binary_operation></return></then><else><return><binary_operation operator="-" stmt_handle="508"><left_operand><variable name="UpperBound"/></left_operand><right_operand><data_method_call method_name="sqrt" super="false" stmt_handle="509"><receiver><sequence_of_expressions><binary_operation operator="*" stmt_handle="510"><left_operand><binary_operation operator="*" stmt_handle="511"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="512"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="Sample"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="513"><left_operand><variable name="UpperBound"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="514"><left_operand><variable name="UpperBound"/></left_operand><right_operand><variable name="Mode"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></right_operand></binary_operation></return></else></if></sequence_of_expressions></else></if></then><else><return><nil/></return></else></if></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="521"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="522"><left_operand><binary_operation operator="+" stmt_handle="523"><left_operand><binary_operation operator="+" stmt_handle="524"><left_operand><binary_operation operator="+" stmt_handle="525"><left_operand><binary_operation operator="+" stmt_handle="526"><left_operand><binary_operation operator="+" stmt_handle="527"><left_operand><constant type="string">"Triangle("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="528"><receiver><variable name="LowerBound"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="529"><receiver><variable name="Mode"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="530"><receiver><variable name="UpperBound"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></then><else><constant type="string">"Uninitialized Trangle Distribution"</constant></else></if></return></body_expression></data_method></data_class><data_class name="Uniform" native="false"><super_class>Distribution</super_class><instance_variable name="LowerBound" type="Real"/><instance_variable name="IntervalLength" type="Real"/><data_method name="withParameters" native="false"><return_type>Uniform</return_type><argument name="L" type="Object"/><argument name="U" type="Object"/><local_variable name="Temp" type="Real"/><body_expression><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="531"><receiver><self/></receiver></data_method_call><if><condition><binary_operation operator="|" stmt_handle="532"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="533"><left_operand><variable name="L"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="534"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="535"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="536"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="537"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="538"><receiver><variable name="L"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="539"><receiver><self/></receiver><argument><constant type="string">"Lower Bound for Uniform distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="540"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="541"><left_operand><variable name="U"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="542"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="543"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="544"><receiver><variable name="U"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="545"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="546"><receiver><variable name="U"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="547"><receiver><self/></receiver><argument><constant type="string">"Upper Bound for Uniform distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="548"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="L"><data_method_call method_name="asReal" super="false" stmt_handle="549"><receiver><variable name="L"/></receiver></data_method_call></assignment></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="550"><receiver><variable name="U"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="U"><data_method_call method_name="asReal" super="false" stmt_handle="551"><receiver><variable name="U"/></receiver></data_method_call></assignment></then></if><if><condition><binary_operation operator="&gt;" stmt_handle="552"><left_operand><variable name="L"/></left_operand><right_operand><variable name="U"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Temp"><variable name="L"/></assignment><assignment variable_name="L"><variable name="U"/></assignment><assignment variable_name="U"><variable name="Temp"/></assignment></sequence_of_expressions></then></if><assignment variable_name="LowerBound"><variable name="L"/></assignment><assignment variable_name="IntervalLength"><binary_operation operator="-" stmt_handle="553"><left_operand><variable name="U"/></left_operand><right_operand><variable name="L"/></right_operand></binary_operation></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Real</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="554"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="555"><left_operand><variable name="LowerBound"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="556"><left_operand><data_method_call method_name="random" super="false" stmt_handle="557"><receiver><variable name="Random"/></receiver></data_method_call></left_operand><right_operand><variable name="IntervalLength"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></then><else><nil/></else></if></return></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="558"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="559"><left_operand><binary_operation operator="+" stmt_handle="560"><left_operand><binary_operation operator="+" stmt_handle="561"><left_operand><binary_operation operator="+" stmt_handle="562"><left_operand><constant type="string">"Uniform("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="563"><receiver><variable name="LowerBound"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="564"><receiver><sequence_of_expressions><binary_operation operator="+" stmt_handle="565"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="IntervalLength"/></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></then><else><constant type="string">"Uninitialized Uniform Distribution"</constant></else></if></return></body_expression></data_method></data_class><data_class name="Weibull" native="false"><super_class>Distribution</super_class><instance_variable name="Shape" type="Real"/><instance_variable name="Scale" type="Real"/><data_method name="withParameters" native="false"><return_type>Weibull</return_type><argument name="K" type="Object"/><argument name="L" type="Object"/><body_expression><sequence_of_expressions><data_method_call method_name="initialise" super="false" stmt_handle="566"><receiver><self/></receiver></data_method_call><if><condition><binary_operation operator="|" stmt_handle="567"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="568"><left_operand><variable name="K"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="569"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="570"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="571"><receiver><variable name="K"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="572"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="573"><receiver><variable name="K"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="574"><receiver><self/></receiver><argument><constant type="string">"Scale parameter for Weibull distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="575"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="576"><left_operand><variable name="L"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="577"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="578"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="579"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="580"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="581"><receiver><variable name="L"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="582"><receiver><self/></receiver><argument><constant type="string">"Shape parameter for Weibull distribution must be an Integer or a Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="583"><receiver><variable name="K"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="K"><data_method_call method_name="asReal" super="false" stmt_handle="584"><receiver><variable name="K"/></receiver></data_method_call></assignment></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="585"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="L"><data_method_call method_name="asReal" super="false" stmt_handle="586"><receiver><variable name="L"/></receiver></data_method_call></assignment></then></if><if><condition><binary_operation operator="|" stmt_handle="587"><left_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="588"><left_operand><variable name="K"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="589"><left_operand><variable name="L"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="590"><receiver><self/></receiver><argument><constant type="string">"Parameters for Weibull distribution must be larger than 0.0"</constant></argument></data_method_call></then></if><assignment variable_name="Scale"><binary_operation operator="/" stmt_handle="591"><left_operand><variable name="L"/></left_operand><right_operand><data_method_call method_name="gamma" super="false" stmt_handle="592"><receiver><self/></receiver><argument><binary_operation operator="+" stmt_handle="593"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><binary_operation operator="/" stmt_handle="594"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="K"/></right_operand></binary_operation></right_operand></binary_operation></argument></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="Shape"><variable name="K"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Real</return_type><local_variable name="Sample" type="Real"/><body_expression><if><condition><binary_operation operator="!=" stmt_handle="595"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Sample"><binary_operation operator="*" stmt_handle="596"><left_operand><data_method_call method_name="exp" super="false" stmt_handle="597"><receiver><sequence_of_expressions><binary_operation operator="/" stmt_handle="598"><left_operand><data_method_call method_name="ln" super="false" stmt_handle="599"><receiver><unary_operation operator="-" stmt_handle="600"><operand><sequence_of_expressions><data_method_call method_name="ln" super="false" stmt_handle="601"><receiver><data_method_call method_name="random" super="false" stmt_handle="602"><receiver><variable name="Random"/></receiver></data_method_call></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></receiver></data_method_call></left_operand><right_operand><variable name="Shape"/></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></left_operand><right_operand><variable name="Scale"/></right_operand></binary_operation></assignment><if><condition><binary_operation operator="&gt;" stmt_handle="603"><left_operand><variable name="Sample"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><then><return><variable name="Sample"/></return></then><else><return><data_method_call method_name="sample" super="false" stmt_handle="604"><receiver><self/></receiver></data_method_call></return></else></if></sequence_of_expressions></then><else><return><nil/></return></else></if></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><if><condition><binary_operation operator="!=" stmt_handle="605"><left_operand><variable name="Random"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><binary_operation operator="+" stmt_handle="606"><left_operand><binary_operation operator="+" stmt_handle="607"><left_operand><binary_operation operator="+" stmt_handle="608"><left_operand><binary_operation operator="+" stmt_handle="609"><left_operand><constant type="string">"Weibull("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="610"><receiver><variable name="Shape"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="611"><receiver><variable name="Scale"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></then><else><constant type="string">"Uninitialized Weibull Distribution"</constant></else></if></return></body_expression></data_method><data_method name="gamma" native="false"><return_type>Real</return_type><argument name="z" type="Real"/><local_variable name="pi" type="Real"/><local_variable name="t" type="Real"/><local_variable name="x" type="Real"/><local_variable name="g" type="Integer"/><local_variable name="i" type="Integer"/><local_variable name="lanczos_coef" type="Array"/><body_expression><sequence_of_expressions><assignment variable_name="g"><constant type="integer">7</constant></assignment><assignment variable_name="lanczos_coef"><data_method_call method_name="putAt" super="false" stmt_handle="612"><receiver><data_method_call method_name="putAt" super="false" stmt_handle="613"><receiver><data_method_call method_name="putAt" super="false" stmt_handle="614"><receiver><data_method_call method_name="putAt" super="false" stmt_handle="615"><receiver><data_method_call method_name="putAt" super="false" stmt_handle="616"><receiver><data_method_call method_name="putAt" super="false" stmt_handle="617"><receiver><data_method_call method_name="putAt" super="false" stmt_handle="618"><receiver><data_method_call method_name="putAt" super="false" stmt_handle="619"><receiver><data_method_call method_name="putAt" super="false" stmt_handle="620"><receiver><data_method_call method_name="resize" super="false" stmt_handle="621"><receiver><new data_class="Array"/></receiver><argument><constant type="integer">9</constant></argument></data_method_call></receiver><argument><constant type="integer">1</constant></argument><argument><constant type="real">0.99999999999980993</constant></argument></data_method_call></receiver><argument><constant type="integer">2</constant></argument><argument><constant type="real">676.5203681218851</constant></argument></data_method_call></receiver><argument><constant type="integer">3</constant></argument><argument><constant type="real">-1259.1392167224028</constant></argument></data_method_call></receiver><argument><constant type="integer">4</constant></argument><argument><constant type="real">771.32342877765313</constant></argument></data_method_call></receiver><argument><constant type="integer">5</constant></argument><argument><constant type="real">-176.61502916214059</constant></argument></data_method_call></receiver><argument><constant type="integer">6</constant></argument><argument><constant type="real">12.507343278686905</constant></argument></data_method_call></receiver><argument><constant type="integer">7</constant></argument><argument><constant type="real">-0.13857109526572012</constant></argument></data_method_call></receiver><argument><constant type="integer">8</constant></argument><argument><constant type="real">9.9843695780195716e-6</constant></argument></data_method_call></receiver><argument><constant type="integer">9</constant></argument><argument><constant type="real">1.5056327351493116e-7</constant></argument></data_method_call></assignment><assignment variable_name="pi"><constant type="real">3.14159265358979323846264338327950288419716939937510</constant></assignment><if><condition><binary_operation operator="&lt;" stmt_handle="622"><left_operand><variable name="z"/></left_operand><right_operand><constant type="real">0.5</constant></right_operand></binary_operation></condition><then><return><binary_operation operator="*" stmt_handle="646"><left_operand><binary_operation operator="/" stmt_handle="647"><left_operand><variable name="pi"/></left_operand><right_operand><data_method_call method_name="sin" super="false" stmt_handle="648"><receiver><sequence_of_expressions><binary_operation operator="*" stmt_handle="649"><left_operand><variable name="pi"/></left_operand><right_operand><variable name="z"/></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="gamma" super="false" stmt_handle="650"><receiver><self/></receiver><argument><binary_operation operator="-" stmt_handle="651"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="z"/></right_operand></binary_operation></argument></data_method_call></right_operand></binary_operation></return></then><else><sequence_of_expressions><assignment variable_name="z"><binary_operation operator="-" stmt_handle="623"><left_operand><variable name="z"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></assignment><assignment variable_name="i"><constant type="integer">1</constant></assignment><assignment variable_name="x"><data_method_call method_name="at" super="false" stmt_handle="624"><receiver><variable name="lanczos_coef"/></receiver><argument><constant type="integer">1</constant></argument></data_method_call></assignment><while><condition><binary_operation operator="&lt;" stmt_handle="625"><left_operand><variable name="i"/></left_operand><right_operand><binary_operation operator="+" stmt_handle="626"><left_operand><variable name="g"/></left_operand><right_operand><constant type="integer">2</constant></right_operand></binary_operation></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="x"><binary_operation operator="+" stmt_handle="627"><left_operand><variable name="x"/></left_operand><right_operand><binary_operation operator="/" stmt_handle="628"><left_operand><data_method_call method_name="at" super="false" stmt_handle="629"><receiver><variable name="lanczos_coef"/></receiver><argument><binary_operation operator="+" stmt_handle="630"><left_operand><variable name="i"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></argument></data_method_call></left_operand><right_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="631"><left_operand><variable name="z"/></left_operand><right_operand><data_method_call method_name="asReal" super="false" stmt_handle="632"><receiver><variable name="i"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></right_operand></binary_operation></assignment><assignment variable_name="i"><binary_operation operator="+" stmt_handle="633"><left_operand><variable name="i"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><assignment variable_name="t"><binary_operation operator="+" stmt_handle="634"><left_operand><binary_operation operator="+" stmt_handle="635"><left_operand><variable name="z"/></left_operand><right_operand><data_method_call method_name="asReal" super="false" stmt_handle="636"><receiver><variable name="g"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.5</constant></right_operand></binary_operation></assignment><return><binary_operation operator="*" stmt_handle="637"><left_operand><binary_operation operator="*" stmt_handle="638"><left_operand><binary_operation operator="*" stmt_handle="639"><left_operand><data_method_call method_name="sqrt" super="false" stmt_handle="640"><receiver><sequence_of_expressions><binary_operation operator="*" stmt_handle="641"><left_operand><constant type="real">2.0</constant></left_operand><right_operand><variable name="pi"/></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="power" super="false" stmt_handle="642"><receiver><variable name="t"/></receiver><argument><binary_operation operator="+" stmt_handle="643"><left_operand><variable name="z"/></left_operand><right_operand><constant type="real">0.5</constant></right_operand></binary_operation></argument></data_method_call></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="exp" super="false" stmt_handle="644"><receiver><sequence_of_expressions><unary_operation operator="-" stmt_handle="645"><operand><variable name="t"/></operand></unary_operation></sequence_of_expressions></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><variable name="x"/></right_operand></binary_operation></return></sequence_of_expressions></else></if></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Histogram" native="false"><super_class>Object</super_class><instance_variable name="NumberOfSamples" type="Integer"/><instance_variable name="NumberOfBins" type="Integer"/><instance_variable name="Histogram" type="Array"/><instance_variable name="Minimum" type="Real"/><instance_variable name="Maximum" type="Real"/><instance_variable name="IntervalSize" type="Real"/><instance_variable name="Start" type="Real"/><data_method name="withParameters" native="false"><return_type>Histogram</return_type><argument name="L" type="Object"/><argument name="U" type="Object"/><argument name="N" type="Integer"/><local_variable name="Temp" type="Real"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="652"><left_operand><binary_operation operator="|" stmt_handle="653"><left_operand><binary_operation operator="|" stmt_handle="654"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="655"><left_operand><variable name="L"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="656"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="657"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="658"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="659"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="660"><receiver><variable name="L"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="661"><left_operand><variable name="U"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="662"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="663"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="664"><receiver><variable name="U"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="665"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="666"><receiver><variable name="U"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="667"><receiver><self/></receiver><argument><constant type="string">"Bounds for Histogram must be Integers or Reals"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="668"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="L"><data_method_call method_name="asReal" super="false" stmt_handle="669"><receiver><variable name="L"/></receiver></data_method_call></assignment></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="670"><receiver><variable name="U"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="U"><data_method_call method_name="asReal" super="false" stmt_handle="671"><receiver><variable name="U"/></receiver></data_method_call></assignment></then></if><if><condition><binary_operation operator="|" stmt_handle="672"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="673"><left_operand><variable name="N"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="674"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="675"><receiver><variable name="N"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="676"><receiver><self/></receiver><argument><constant type="string">"Number of bins for Histogram must be an Integer"</constant></argument></data_method_call></then></if><assignment variable_name="Minimum"><variable name="L"/></assignment><assignment variable_name="Maximum"><variable name="U"/></assignment><assignment variable_name="NumberOfBins"><variable name="N"/></assignment><if><condition><binary_operation operator="&gt;=" stmt_handle="677"><left_operand><variable name="Minimum"/></left_operand><right_operand><variable name="Maximum"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Temp"><variable name="Minimum"/></assignment><assignment variable_name="Minimum"><variable name="Maximum"/></assignment><assignment variable_name="Maximum"><variable name="Temp"/></assignment></sequence_of_expressions></then></if><if><condition><binary_operation operator="&lt;=" stmt_handle="678"><left_operand><variable name="NumberOfBins"/></left_operand><right_operand><constant type="integer">2</constant></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="679"><receiver><self/></receiver><argument><constant type="string">"Number Of Slots for Histogram must be larger than 2"</constant></argument></data_method_call></then></if><assignment variable_name="Histogram"><data_method_call method_name="putAll" super="false" stmt_handle="680"><receiver><data_method_call method_name="resize" super="false" stmt_handle="681"><receiver><new data_class="Array"/></receiver><argument><variable name="NumberOfBins"/></argument></data_method_call></receiver><argument><constant type="integer">0</constant></argument></data_method_call></assignment><assignment variable_name="NumberOfSamples"><constant type="integer">0</constant></assignment><assignment variable_name="IntervalSize"><binary_operation operator="/" stmt_handle="682"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="683"><left_operand><variable name="Maximum"/></left_operand><right_operand><variable name="Minimum"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><data_method_call method_name="asReal" super="false" stmt_handle="684"><receiver><sequence_of_expressions><binary_operation operator="-" stmt_handle="685"><left_operand><variable name="NumberOfBins"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="Start"><binary_operation operator="-" stmt_handle="686"><left_operand><variable name="Minimum"/></left_operand><right_operand><binary_operation operator="*" stmt_handle="687"><left_operand><constant type="real">0.5</constant></left_operand><right_operand><variable name="IntervalSize"/></right_operand></binary_operation></right_operand></binary_operation></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="sample" native="false"><return_type>Histogram</return_type><argument name="Value" type="Real"/><local_variable name="i" type="Integer"/><local_variable name="b" type="Boolean"/><body_expression><sequence_of_expressions><assignment variable_name="NumberOfSamples"><binary_operation operator="+" stmt_handle="688"><left_operand><variable name="NumberOfSamples"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><if><condition><binary_operation operator="&amp;" stmt_handle="689"><left_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="690"><left_operand><variable name="Value"/></left_operand><right_operand><variable name="Minimum"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="691"><left_operand><variable name="Value"/></left_operand><right_operand><variable name="Maximum"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="b"><constant type="boolean">true</constant></assignment><assignment variable_name="i"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="692"><left_operand><variable name="b"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="693"><left_operand><variable name="i"/></left_operand><right_operand><variable name="NumberOfBins"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="&amp;" stmt_handle="694"><left_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="695"><left_operand><variable name="Value"/></left_operand><right_operand><binary_operation operator="+" stmt_handle="696"><left_operand><variable name="Start"/></left_operand><right_operand><binary_operation operator="*" stmt_handle="697"><left_operand><data_method_call method_name="asReal" super="false" stmt_handle="698"><receiver><sequence_of_expressions><binary_operation operator="-" stmt_handle="699"><left_operand><variable name="i"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></left_operand><right_operand><variable name="IntervalSize"/></right_operand></binary_operation></right_operand></binary_operation></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="700"><left_operand><variable name="Value"/></left_operand><right_operand><binary_operation operator="+" stmt_handle="701"><left_operand><variable name="Start"/></left_operand><right_operand><binary_operation operator="*" stmt_handle="702"><left_operand><data_method_call method_name="asReal" super="false" stmt_handle="703"><receiver><variable name="i"/></receiver></data_method_call></left_operand><right_operand><variable name="IntervalSize"/></right_operand></binary_operation></right_operand></binary_operation></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><sequence_of_expressions><data_method_call method_name="putAt" super="false" stmt_handle="704"><receiver><variable name="Histogram"/></receiver><argument><variable name="i"/></argument><argument><binary_operation operator="+" stmt_handle="705"><left_operand><data_method_call method_name="at" super="false" stmt_handle="706"><receiver><variable name="Histogram"/></receiver><argument><variable name="i"/></argument></data_method_call></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></argument></data_method_call><assignment variable_name="b"><constant type="boolean">false</constant></assignment></sequence_of_expressions></then></if><assignment variable_name="i"><binary_operation operator="+" stmt_handle="707"><left_operand><variable name="i"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="i" type="Integer"/><local_variable name="Result" type="String"/><body_expression><sequence_of_expressions><assignment variable_name="Result"><constant type="string">"Probability\t\tSample Value Range\n"</constant></assignment><if><condition><binary_operation operator="!=" stmt_handle="708"><left_operand><variable name="NumberOfSamples"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="i"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="709"><left_operand><variable name="i"/></left_operand><right_operand><variable name="NumberOfBins"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="Result"><binary_operation operator="+" stmt_handle="710"><left_operand><binary_operation operator="+" stmt_handle="711"><left_operand><binary_operation operator="+" stmt_handle="712"><left_operand><binary_operation operator="+" stmt_handle="713"><left_operand><binary_operation operator="+" stmt_handle="714"><left_operand><binary_operation operator="+" stmt_handle="715"><left_operand><variable name="Result"/></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="716"><receiver><sequence_of_expressions><binary_operation operator="/" stmt_handle="717"><left_operand><data_method_call method_name="asReal" super="false" stmt_handle="718"><receiver><data_method_call method_name="at" super="false" stmt_handle="719"><receiver><variable name="Histogram"/></receiver><argument><variable name="i"/></argument></data_method_call></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="asReal" super="false" stmt_handle="720"><receiver><variable name="NumberOfSamples"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">"\t["</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="721"><receiver><sequence_of_expressions><binary_operation operator="+" stmt_handle="722"><left_operand><variable name="Start"/></left_operand><right_operand><binary_operation operator="*" stmt_handle="723"><left_operand><data_method_call method_name="asReal" super="false" stmt_handle="724"><receiver><sequence_of_expressions><binary_operation operator="-" stmt_handle="725"><left_operand><variable name="i"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></left_operand><right_operand><variable name="IntervalSize"/></right_operand></binary_operation></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="726"><receiver><sequence_of_expressions><binary_operation operator="+" stmt_handle="727"><left_operand><variable name="Start"/></left_operand><right_operand><binary_operation operator="*" stmt_handle="728"><left_operand><data_method_call method_name="asReal" super="false" stmt_handle="729"><receiver><variable name="i"/></receiver></data_method_call></left_operand><right_operand><variable name="IntervalSize"/></right_operand></binary_operation></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">"]\n"</constant></right_operand></binary_operation></assignment><assignment variable_name="i"><binary_operation operator="+" stmt_handle="730"><left_operand><variable name="i"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while></sequence_of_expressions></then></if><return><variable name="Result"/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Array2D" native="false"><super_class>Object</super_class><instance_variable name="RowArray" type="Array"/><instance_variable name="Rows" type="Integer"/><instance_variable name="Columns" type="Integer"/><data_method name="size" native="false"><return_type>Integer</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="731"><left_operand><variable name="RowArray"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="resize" super="false" stmt_handle="732"><receiver><self/></receiver><argument><constant type="integer">0</constant></argument><argument><constant type="integer">0</constant></argument></data_method_call></then></if><return><binary_operation operator="*" stmt_handle="733"><left_operand><variable name="Rows"/></left_operand><right_operand><variable name="Columns"/></right_operand></binary_operation></return></sequence_of_expressions></body_expression></data_method><data_method name="rows" native="false"><return_type>Integer</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="734"><left_operand><variable name="RowArray"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="resize" super="false" stmt_handle="735"><receiver><self/></receiver><argument><constant type="integer">0</constant></argument><argument><constant type="integer">0</constant></argument></data_method_call></then></if><return><variable name="Rows"/></return></sequence_of_expressions></body_expression></data_method><data_method name="columns" native="false"><return_type>Integer</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="736"><left_operand><variable name="RowArray"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="resize" super="false" stmt_handle="737"><receiver><self/></receiver><argument><constant type="integer">0</constant></argument><argument><constant type="integer">0</constant></argument></data_method_call></then></if><return><variable name="Columns"/></return></sequence_of_expressions></body_expression></data_method><data_method name="resize" native="false"><return_type>Array2D</return_type><argument name="R" type="Integer"/><argument name="C" type="Integer"/><local_variable name="I" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="738"><left_operand><binary_operation operator="|" stmt_handle="739"><left_operand><binary_operation operator="|" stmt_handle="740"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="741"><left_operand><variable name="R"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="742"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="743"><receiver><variable name="R"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="744"><left_operand><variable name="C"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="745"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="746"><receiver><variable name="C"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="747"><receiver><self/></receiver><argument><constant type="string">"Parameters for method \"resize\" of Array2D must be Integers"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="748"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="749"><left_operand><variable name="R"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="750"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="751"><receiver><self/></receiver><argument><constant type="string">"Parameters for method \"resize\" of Array2D must not be negative"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="=" stmt_handle="752"><left_operand><variable name="RowArray"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="RowArray"><new data_class="Array"/></assignment><assignment variable_name="Rows"><constant type="integer">0</constant></assignment></sequence_of_expressions></then></if><assignment variable_name="Columns"><variable name="C"/></assignment><data_method_call method_name="resize" super="false" stmt_handle="753"><receiver><variable name="RowArray"/></receiver><argument><variable name="R"/></argument></data_method_call><if><condition><binary_operation operator="&gt;" stmt_handle="754"><left_operand><variable name="Rows"/></left_operand><right_operand><variable name="R"/></right_operand></binary_operation></condition><then><assignment variable_name="Rows"><variable name="R"/></assignment></then></if><assignment variable_name="I"><constant type="integer">0</constant></assignment><while><condition><binary_operation operator="&lt;" stmt_handle="755"><left_operand><variable name="I"/></left_operand><right_operand><variable name="Rows"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="I"><binary_operation operator="+" stmt_handle="756"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><data_method_call method_name="resize" super="false" stmt_handle="757"><receiver><data_method_call method_name="at" super="false" stmt_handle="758"><receiver><variable name="RowArray"/></receiver><argument><variable name="I"/></argument></data_method_call></receiver><argument><variable name="Columns"/></argument></data_method_call></sequence_of_expressions></body></while><while><condition><binary_operation operator="&lt;" stmt_handle="759"><left_operand><variable name="Rows"/></left_operand><right_operand><variable name="R"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="Rows"><binary_operation operator="+" stmt_handle="760"><left_operand><variable name="Rows"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><data_method_call method_name="putAt" super="false" stmt_handle="761"><receiver><variable name="RowArray"/></receiver><argument><variable name="Rows"/></argument><argument><data_method_call method_name="resize" super="false" stmt_handle="762"><receiver><new data_class="Array"/></receiver><argument><variable name="Columns"/></argument></data_method_call></argument></data_method_call></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="at" native="false"><return_type>Object</return_type><argument name="R" type="Integer"/><argument name="C" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="763"><left_operand><variable name="RowArray"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="resize" super="false" stmt_handle="764"><receiver><self/></receiver><argument><constant type="integer">0</constant></argument><argument><constant type="integer">0</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="765"><left_operand><binary_operation operator="|" stmt_handle="766"><left_operand><binary_operation operator="|" stmt_handle="767"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="768"><left_operand><variable name="R"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="769"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="770"><receiver><variable name="R"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="771"><left_operand><variable name="C"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="772"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="773"><receiver><variable name="C"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="774"><receiver><self/></receiver><argument><constant type="string">"Parameters for method \"at\" of Array2D must be Integers"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="775"><left_operand><binary_operation operator="|" stmt_handle="776"><left_operand><binary_operation operator="|" stmt_handle="777"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="778"><left_operand><variable name="R"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="779"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="780"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Rows"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="781"><left_operand><variable name="C"/></left_operand><right_operand><variable name="Columns"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="782"><receiver><self/></receiver><argument><constant type="string">"Index out of bounds for method \"at\" of Array2D"</constant></argument></data_method_call></then></if><return><data_method_call method_name="at" super="false" stmt_handle="783"><receiver><data_method_call method_name="at" super="false" stmt_handle="784"><receiver><variable name="RowArray"/></receiver><argument><variable name="R"/></argument></data_method_call></receiver><argument><variable name="C"/></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="putAt" native="false"><return_type>Array2D</return_type><argument name="R" type="Integer"/><argument name="C" type="Integer"/><argument name="anObject" type="Object"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="785"><left_operand><variable name="RowArray"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="resize" super="false" stmt_handle="786"><receiver><self/></receiver><argument><constant type="integer">0</constant></argument><argument><constant type="integer">0</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="787"><left_operand><binary_operation operator="|" stmt_handle="788"><left_operand><binary_operation operator="|" stmt_handle="789"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="790"><left_operand><variable name="R"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="791"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="792"><receiver><variable name="R"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="793"><left_operand><variable name="C"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="794"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="795"><receiver><variable name="C"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="796"><receiver><self/></receiver><argument><constant type="string">"Firt and second parameters for method \"putAt\" of Array2D must be Integers"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="797"><left_operand><binary_operation operator="|" stmt_handle="798"><left_operand><binary_operation operator="|" stmt_handle="799"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="800"><left_operand><variable name="R"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="801"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="802"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Rows"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="803"><left_operand><variable name="C"/></left_operand><right_operand><variable name="Columns"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="804"><receiver><self/></receiver><argument><constant type="string">"Index out of bounds for method \"putAt\" of Array2D"</constant></argument></data_method_call></then></if><data_method_call method_name="putAt" super="false" stmt_handle="805"><receiver><data_method_call method_name="at" super="false" stmt_handle="806"><receiver><variable name="RowArray"/></receiver><argument><variable name="R"/></argument></data_method_call></receiver><argument><variable name="C"/></argument><argument><variable name="anObject"/></argument></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="putAll" native="false"><return_type>Array2D</return_type><argument name="O" type="Object"/><local_variable name="I" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="807"><left_operand><variable name="RowArray"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="resize" super="false" stmt_handle="808"><receiver><self/></receiver><argument><constant type="integer">0</constant></argument><argument><constant type="integer">0</constant></argument></data_method_call></then></if><assignment variable_name="I"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="809"><left_operand><variable name="I"/></left_operand><right_operand><variable name="Rows"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="putAll" super="false" stmt_handle="810"><receiver><data_method_call method_name="at" super="false" stmt_handle="811"><receiver><variable name="RowArray"/></receiver><argument><variable name="I"/></argument></data_method_call></receiver><argument><variable name="O"/></argument></data_method_call><assignment variable_name="I"><binary_operation operator="+" stmt_handle="812"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="Out" type="String"/><local_variable name="I" type="Integer"/><local_variable name="J" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="813"><left_operand><variable name="RowArray"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="resize" super="false" stmt_handle="814"><receiver><self/></receiver><argument><constant type="integer">0</constant></argument><argument><constant type="integer">0</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&amp;" stmt_handle="815"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="816"><left_operand><variable name="Rows"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="817"><left_operand><variable name="Columns"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Out"><data_method_call method_name="concat" super="false" stmt_handle="818"><receiver><data_method_call method_name="concat" super="false" stmt_handle="819"><receiver><data_method_call method_name="concat" super="false" stmt_handle="820"><receiver><data_method_call method_name="concat" super="false" stmt_handle="821"><receiver><constant type="string">"Array2D["</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="822"><receiver><variable name="Rows"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">","</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="823"><receiver><variable name="Columns"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]:\n"</constant></argument></data_method_call></assignment><assignment variable_name="I"><constant type="integer">0</constant></assignment><while><condition><binary_operation operator="&lt;" stmt_handle="824"><left_operand><variable name="I"/></left_operand><right_operand><variable name="Rows"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="I"><binary_operation operator="+" stmt_handle="825"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><assignment variable_name="J"><constant type="integer">0</constant></assignment><data_method_call method_name="concat" super="false" stmt_handle="826"><receiver><variable name="Out"/></receiver><argument><constant type="string">"["</constant></argument></data_method_call><while><condition><binary_operation operator="&lt;" stmt_handle="827"><left_operand><variable name="J"/></left_operand><right_operand><variable name="Columns"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="J"><binary_operation operator="+" stmt_handle="828"><left_operand><variable name="J"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><data_method_call method_name="concat" super="false" stmt_handle="829"><receiver><variable name="Out"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="830"><receiver><data_method_call method_name="at" super="false" stmt_handle="831"><receiver><data_method_call method_name="at" super="false" stmt_handle="832"><receiver><variable name="RowArray"/></receiver><argument><variable name="I"/></argument></data_method_call></receiver><argument><variable name="J"/></argument></data_method_call></receiver></data_method_call></argument></data_method_call><if><condition><binary_operation operator="&lt;" stmt_handle="833"><left_operand><variable name="J"/></left_operand><right_operand><variable name="Columns"/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="834"><receiver><variable name="Out"/></receiver><argument><constant type="string">", "</constant></argument></data_method_call></then></if></sequence_of_expressions></body></while><data_method_call method_name="concat" super="false" stmt_handle="835"><receiver><variable name="Out"/></receiver><argument><constant type="string">"]\n"</constant></argument></data_method_call></sequence_of_expressions></body></while></sequence_of_expressions></then><else><assignment variable_name="Out"><constant type="string">"Array2D[0,0]"</constant></assignment></else></if><return><variable name="Out"/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Queue" native="false"><super_class>Object</super_class><instance_variable name="Occupation" type="Integer"/><instance_variable name="Size" type="Integer"/><instance_variable name="Root" type="StructureElement"/><data_method name="clear" native="false"><return_type>Queue</return_type><body_expression><sequence_of_expressions><assignment variable_name="Root"><new data_class="StructureElement"/></assignment><data_method_call method_name="setPrevious" super="false" stmt_handle="836"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="837"><receiver><variable name="Root"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><variable name="Root"/></argument></data_method_call><assignment variable_name="Occupation"><constant type="integer">0</constant></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="resize" native="false"><return_type>Queue</return_type><argument name="S" type="Integer"/><local_variable name="R" type="StructureElement"/><local_variable name="C" type="Integer"/><body_expression><sequence_of_expressions><if><condition><data_method_call method_name="not" super="false" stmt_handle="838"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="839"><receiver><variable name="S"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></condition><then><data_method_call method_name="error" super="false" stmt_handle="840"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"resize\" of Queue must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="=" stmt_handle="841"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="842"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="843"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="&lt;" stmt_handle="844"><left_operand><variable name="S"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="845"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"resize\" of Queue must be positive"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&lt;" stmt_handle="846"><left_operand><variable name="S"/></left_operand><right_operand><variable name="Occupation"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Occupation"><variable name="S"/></assignment><assignment variable_name="C"><variable name="S"/></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="847"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="C"><binary_operation operator="-" stmt_handle="848"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><while><condition><binary_operation operator="!=" stmt_handle="849"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="850"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="C"><binary_operation operator="-" stmt_handle="851"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><data_method_call method_name="setNext" super="false" stmt_handle="852"><receiver><variable name="R"/></receiver><argument><variable name="Root"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="853"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call></sequence_of_expressions></then></if></sequence_of_expressions></then></if><assignment variable_name="Size"><variable name="S"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="size" native="false"><return_type>Integer</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="854"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="855"><receiver><self/></receiver></data_method_call></then></if><return><variable name="Size"/></return></sequence_of_expressions></body_expression></data_method><data_method name="occupation" native="false"><return_type>Integer</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="856"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="857"><receiver><self/></receiver></data_method_call></then></if><return><variable name="Occupation"/></return></sequence_of_expressions></body_expression></data_method><data_method name="isEmpty" native="false"><return_type>Boolean</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="858"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="859"><receiver><self/></receiver></data_method_call></then></if><return><binary_operation operator="=" stmt_handle="860"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></return></sequence_of_expressions></body_expression></data_method><data_method name="isFull" native="false"><return_type>Boolean</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="861"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="862"><receiver><self/></receiver></data_method_call></then></if><return><if><condition><binary_operation operator="=" stmt_handle="863"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><constant type="boolean">false</constant></then><else><binary_operation operator="=" stmt_handle="864"><left_operand><variable name="Occupation"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></else></if></return></sequence_of_expressions></body_expression></data_method><data_method name="excludes" native="false"><return_type>Boolean</return_type><argument name="O" type="Object"/><body_expression><return><data_method_call method_name="not" super="false" stmt_handle="865"><receiver><data_method_call method_name="includes" super="false" stmt_handle="866"><receiver><self/></receiver><argument><variable name="O"/></argument></data_method_call></receiver></data_method_call></return></body_expression></data_method><data_method name="includes" native="false"><return_type>Boolean</return_type><argument name="O" type="Object"/><local_variable name="R" type="StructureElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="867"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="868"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="869"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="870"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="871"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="872"><left_operand><data_method_call method_name="element" super="false" stmt_handle="873"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="O"/></right_operand></binary_operation></condition><then><assignment variable_name="NF"><constant type="boolean">false</constant></assignment></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="874"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><data_method_call method_name="not" super="false" stmt_handle="875"><receiver><variable name="NF"/></receiver></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="count" native="false"><return_type>Integer</return_type><argument name="O" type="Object"/><local_variable name="R" type="StructureElement"/><local_variable name="C" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="876"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="877"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="C"><constant type="integer">0</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="878"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="879"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="880"><left_operand><data_method_call method_name="element" super="false" stmt_handle="881"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="O"/></right_operand></binary_operation></condition><then><assignment variable_name="C"><binary_operation operator="+" stmt_handle="882"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="883"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="C"/></return></sequence_of_expressions></body_expression></data_method><data_method name="add" native="false"><return_type>Queue</return_type><argument name="O" type="Object"/><local_variable name="R" type="StructureElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="884"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="885"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="886"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><if><condition><binary_operation operator="&lt;" stmt_handle="895"><left_operand><variable name="Occupation"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="setElement" super="false" stmt_handle="896"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="897"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="898"><receiver><new data_class="StructureElement"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="899"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></receiver><argument><variable name="O"/></argument></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="900"><receiver><data_method_call method_name="previous" super="false" stmt_handle="901"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="902"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call><assignment variable_name="Occupation"><binary_operation operator="+" stmt_handle="903"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then></if></then><else><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="setElement" super="false" stmt_handle="887"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="888"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="889"><receiver><new data_class="StructureElement"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="890"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></receiver><argument><variable name="O"/></argument></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="891"><receiver><data_method_call method_name="previous" super="false" stmt_handle="892"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="893"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call><assignment variable_name="Occupation"><binary_operation operator="+" stmt_handle="894"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="inspect" native="false"><return_type>Object</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="904"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="905"><receiver><self/></receiver></data_method_call></then></if><return><if><condition><binary_operation operator="!=" stmt_handle="906"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><data_method_call method_name="element" super="false" stmt_handle="907"><receiver><data_method_call method_name="next" super="false" stmt_handle="908"><receiver><variable name="Root"/></receiver></data_method_call></receiver></data_method_call></then><else><nil/></else></if></return></sequence_of_expressions></body_expression></data_method><data_method name="remove" native="false"><return_type>Object</return_type><local_variable name="R" type="StructureElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="909"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="910"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="911"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Occupation"><binary_operation operator="-" stmt_handle="912"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="913"><receiver><variable name="Root"/></receiver></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="914"><receiver><variable name="Root"/></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="915"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="916"><receiver><data_method_call method_name="next" super="false" stmt_handle="917"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><variable name="Root"/></argument></data_method_call><return><data_method_call method_name="element" super="false" stmt_handle="918"><receiver><variable name="R"/></receiver></data_method_call></return></sequence_of_expressions></then><else><return><nil/></return></else></if></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="PrintOut" type="String"/><local_variable name="R" type="StructureElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="919"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="920"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="=" stmt_handle="921"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="PrintOut"><constant type="string">"Empty "</constant></assignment><if><condition><binary_operation operator="=" stmt_handle="940"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="941"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"Unbounded "</constant></argument></data_method_call></then></if><data_method_call method_name="concat" super="false" stmt_handle="942"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"Queue"</constant></argument></data_method_call><if><condition><binary_operation operator="!=" stmt_handle="943"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="944"><receiver><data_method_call method_name="concat" super="false" stmt_handle="945"><receiver><data_method_call method_name="concat" super="false" stmt_handle="946"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">" [Size = "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="947"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></then></if></sequence_of_expressions></then><else><sequence_of_expressions><assignment variable_name="PrintOut"><constant type="string">""</constant></assignment><if><condition><binary_operation operator="=" stmt_handle="922"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="923"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"Unbounded "</constant></argument></data_method_call></then></if><data_method_call method_name="concat" super="false" stmt_handle="924"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"Queue"</constant></argument></data_method_call><if><condition><binary_operation operator="!=" stmt_handle="925"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="927"><receiver><data_method_call method_name="concat" super="false" stmt_handle="928"><receiver><data_method_call method_name="concat" super="false" stmt_handle="929"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">" [Size = "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="930"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"] {"</constant></argument></data_method_call></then><else><data_method_call method_name="concat" super="false" stmt_handle="926"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">" {"</constant></argument></data_method_call></else></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="931"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="932"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="concat" super="false" stmt_handle="933"><receiver><variable name="PrintOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="934"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><if><condition><binary_operation operator="!=" stmt_handle="935"><left_operand><data_method_call method_name="next" super="false" stmt_handle="936"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="937"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">", "</constant></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="938"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><data_method_call method_name="concat" super="false" stmt_handle="939"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"}"</constant></argument></data_method_call></sequence_of_expressions></else></if><return><variable name="PrintOut"/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Stack" native="false"><super_class>Object</super_class><instance_variable name="Occupation" type="Integer"/><instance_variable name="Size" type="Integer"/><instance_variable name="Root" type="StructureElement"/><data_method name="clear" native="false"><return_type>Stack</return_type><body_expression><sequence_of_expressions><assignment variable_name="Root"><new data_class="StructureElement"/></assignment><data_method_call method_name="setPrevious" super="false" stmt_handle="948"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="949"><receiver><variable name="Root"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><variable name="Root"/></argument></data_method_call><assignment variable_name="Occupation"><constant type="integer">0</constant></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="resize" native="false"><return_type>Stack</return_type><argument name="S" type="Integer"/><local_variable name="R" type="StructureElement"/><local_variable name="C" type="Integer"/><body_expression><sequence_of_expressions><if><condition><data_method_call method_name="not" super="false" stmt_handle="950"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="951"><receiver><variable name="S"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></condition><then><data_method_call method_name="error" super="false" stmt_handle="952"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"resize\" of Stack must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="=" stmt_handle="953"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="954"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="955"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="&lt;" stmt_handle="956"><left_operand><variable name="S"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="957"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"resize\" of Stack must be positive"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&lt;" stmt_handle="958"><left_operand><variable name="S"/></left_operand><right_operand><variable name="Occupation"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Occupation"><variable name="S"/></assignment><assignment variable_name="C"><variable name="S"/></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="959"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="C"><binary_operation operator="-" stmt_handle="960"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><while><condition><binary_operation operator="!=" stmt_handle="961"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="962"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="C"><binary_operation operator="-" stmt_handle="963"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><data_method_call method_name="setNext" super="false" stmt_handle="964"><receiver><variable name="R"/></receiver><argument><variable name="Root"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="965"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call></sequence_of_expressions></then></if></sequence_of_expressions></then></if><assignment variable_name="Size"><variable name="S"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="size" native="false"><return_type>Integer</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="966"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="967"><receiver><self/></receiver></data_method_call></then></if><return><variable name="Size"/></return></sequence_of_expressions></body_expression></data_method><data_method name="occupation" native="false"><return_type>Integer</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="968"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="969"><receiver><self/></receiver></data_method_call></then></if><return><variable name="Occupation"/></return></sequence_of_expressions></body_expression></data_method><data_method name="isEmpty" native="false"><return_type>Boolean</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="970"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="971"><receiver><self/></receiver></data_method_call></then></if><return><binary_operation operator="=" stmt_handle="972"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></return></sequence_of_expressions></body_expression></data_method><data_method name="isFull" native="false"><return_type>Boolean</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="973"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="974"><receiver><self/></receiver></data_method_call></then></if><return><if><condition><binary_operation operator="=" stmt_handle="975"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><constant type="boolean">false</constant></then><else><binary_operation operator="=" stmt_handle="976"><left_operand><variable name="Occupation"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></else></if></return></sequence_of_expressions></body_expression></data_method><data_method name="excludes" native="false"><return_type>Boolean</return_type><argument name="O" type="Object"/><body_expression><return><data_method_call method_name="not" super="false" stmt_handle="977"><receiver><data_method_call method_name="includes" super="false" stmt_handle="978"><receiver><self/></receiver><argument><variable name="O"/></argument></data_method_call></receiver></data_method_call></return></body_expression></data_method><data_method name="includes" native="false"><return_type>Boolean</return_type><argument name="O" type="Object"/><local_variable name="R" type="StructureElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="979"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="980"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="981"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="982"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="983"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="984"><left_operand><data_method_call method_name="element" super="false" stmt_handle="985"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="O"/></right_operand></binary_operation></condition><then><assignment variable_name="NF"><constant type="boolean">false</constant></assignment></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="986"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><data_method_call method_name="not" super="false" stmt_handle="987"><receiver><variable name="NF"/></receiver></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="count" native="false"><return_type>Integer</return_type><argument name="O" type="Object"/><local_variable name="R" type="StructureElement"/><local_variable name="C" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="988"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="989"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="C"><constant type="integer">0</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="990"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="991"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="992"><left_operand><data_method_call method_name="element" super="false" stmt_handle="993"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="O"/></right_operand></binary_operation></condition><then><assignment variable_name="C"><binary_operation operator="+" stmt_handle="994"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="995"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="C"/></return></sequence_of_expressions></body_expression></data_method><data_method name="push" native="false"><return_type>Stack</return_type><argument name="O" type="Object"/><local_variable name="R" type="StructureElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="996"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="997"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="998"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><if><condition><binary_operation operator="&lt;" stmt_handle="1007"><left_operand><variable name="Occupation"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="setElement" super="false" stmt_handle="1008"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="1009"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="1010"><receiver><new data_class="StructureElement"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1011"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></receiver><argument><variable name="O"/></argument></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="1012"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1013"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1014"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call><assignment variable_name="Occupation"><binary_operation operator="+" stmt_handle="1015"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then></if></then><else><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="setElement" super="false" stmt_handle="999"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="1000"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="1001"><receiver><new data_class="StructureElement"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1002"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></receiver><argument><variable name="O"/></argument></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="1003"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1004"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1005"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call><assignment variable_name="Occupation"><binary_operation operator="+" stmt_handle="1006"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="inspect" native="false"><return_type>Object</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1016"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1017"><receiver><self/></receiver></data_method_call></then></if><return><if><condition><binary_operation operator="!=" stmt_handle="1018"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><data_method_call method_name="element" super="false" stmt_handle="1019"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1020"><receiver><variable name="Root"/></receiver></data_method_call></receiver></data_method_call></then><else><nil/></else></if></return></sequence_of_expressions></body_expression></data_method><data_method name="pop" native="false"><return_type>Object</return_type><local_variable name="R" type="StructureElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1021"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1022"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="1023"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Occupation"><binary_operation operator="-" stmt_handle="1024"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><assignment variable_name="R"><data_method_call method_name="previous" super="false" stmt_handle="1025"><receiver><variable name="Root"/></receiver></data_method_call></assignment><data_method_call method_name="setPrevious" super="false" stmt_handle="1026"><receiver><variable name="Root"/></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1027"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1028"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1029"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><variable name="Root"/></argument></data_method_call><return><data_method_call method_name="element" super="false" stmt_handle="1030"><receiver><variable name="R"/></receiver></data_method_call></return></sequence_of_expressions></then><else><return><nil/></return></else></if></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="PrintOut" type="String"/><local_variable name="R" type="StructureElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1031"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1032"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="=" stmt_handle="1033"><left_operand><variable name="Occupation"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="PrintOut"><constant type="string">"Empty "</constant></assignment><if><condition><binary_operation operator="=" stmt_handle="1052"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="1053"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"Unbounded "</constant></argument></data_method_call></then></if><data_method_call method_name="concat" super="false" stmt_handle="1054"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"Stack"</constant></argument></data_method_call><if><condition><binary_operation operator="!=" stmt_handle="1055"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="1056"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1057"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1058"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">" [Size = "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="1059"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></then></if></sequence_of_expressions></then><else><sequence_of_expressions><assignment variable_name="PrintOut"><constant type="string">""</constant></assignment><if><condition><binary_operation operator="=" stmt_handle="1034"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="1035"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"Unbounded "</constant></argument></data_method_call></then></if><data_method_call method_name="concat" super="false" stmt_handle="1036"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"Stack"</constant></argument></data_method_call><if><condition><binary_operation operator="!=" stmt_handle="1037"><left_operand><variable name="Size"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="1039"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1040"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1041"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">" [Size = "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="1042"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"] {"</constant></argument></data_method_call></then><else><data_method_call method_name="concat" super="false" stmt_handle="1038"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">" {"</constant></argument></data_method_call></else></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1043"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1044"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="concat" super="false" stmt_handle="1045"><receiver><variable name="PrintOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="1046"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><if><condition><binary_operation operator="!=" stmt_handle="1047"><left_operand><data_method_call method_name="next" super="false" stmt_handle="1048"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="1049"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">", "</constant></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1050"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><data_method_call method_name="concat" super="false" stmt_handle="1051"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"}"</constant></argument></data_method_call></sequence_of_expressions></else></if><return><variable name="PrintOut"/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Map" native="false"><super_class>Object</super_class><instance_variable name="Size" type="Integer"/><instance_variable name="Root" type="MapElement"/><data_method name="clear" native="false"><return_type>Map</return_type><local_variable name="R" type="MapElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="!=" stmt_handle="1060"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1062"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1063"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="setRemoved" super="false" stmt_handle="1064"><receiver><variable name="R"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1065"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while></sequence_of_expressions></then><else><assignment variable_name="Root"><data_method_call method_name="setRemoved" super="false" stmt_handle="1061"><receiver><new data_class="MapElement"/></receiver><argument><constant type="boolean">false</constant></argument></data_method_call></assignment></else></if><data_method_call method_name="setPrevious" super="false" stmt_handle="1066"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="1067"><receiver><variable name="Root"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><variable name="Root"/></argument></data_method_call><assignment variable_name="Size"><constant type="integer">0</constant></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="isEmpty" native="false"><return_type>Boolean</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1068"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1069"><receiver><self/></receiver></data_method_call></then></if><return><binary_operation operator="=" stmt_handle="1070"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></return></sequence_of_expressions></body_expression></data_method><data_method name="size" native="false"><return_type>Integer</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1071"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1072"><receiver><self/></receiver></data_method_call></then></if><return><variable name="Size"/></return></sequence_of_expressions></body_expression></data_method><data_method name="iterator" native="false"><return_type>MapIterator</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1073"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1074"><receiver><self/></receiver></data_method_call></then></if><return><data_method_call method_name="referringTo" super="false" stmt_handle="1075"><receiver><new data_class="MapIterator"/></receiver><argument><self/></argument><argument><data_method_call method_name="next" super="false" stmt_handle="1076"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="includesKey" native="false"><return_type>Boolean</return_type><argument name="K" type="Object"/><local_variable name="R" type="MapElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1077"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1078"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1079"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1080"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1081"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1082"><left_operand><data_method_call method_name="key" super="false" stmt_handle="1083"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="K"/></right_operand></binary_operation></condition><then><assignment variable_name="NF"><constant type="boolean">false</constant></assignment></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1084"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><data_method_call method_name="not" super="false" stmt_handle="1085"><receiver><variable name="NF"/></receiver></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="includesValue" native="false"><return_type>Boolean</return_type><argument name="V" type="Object"/><local_variable name="R" type="MapElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1086"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1087"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1088"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1089"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1090"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1091"><left_operand><data_method_call method_name="value" super="false" stmt_handle="1092"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="V"/></right_operand></binary_operation></condition><then><assignment variable_name="NF"><constant type="boolean">false</constant></assignment></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1093"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><data_method_call method_name="not" super="false" stmt_handle="1094"><receiver><variable name="NF"/></receiver></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="keys" native="false"><return_type>Set</return_type><local_variable name="R" type="MapElement"/><local_variable name="S" type="Set"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1095"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1096"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1097"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="S"><data_method_call method_name="clear" super="false" stmt_handle="1098"><receiver><new data_class="Set"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1099"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="add" super="false" stmt_handle="1100"><receiver><variable name="S"/></receiver><argument><data_method_call method_name="key" super="false" stmt_handle="1101"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1102"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="S"/></return></sequence_of_expressions></body_expression></data_method><data_method name="values" native="false"><return_type>Bag</return_type><local_variable name="R" type="MapElement"/><local_variable name="B" type="Bag"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1103"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1104"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1105"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="B"><data_method_call method_name="clear" super="false" stmt_handle="1106"><receiver><new data_class="Bag"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1107"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="add" super="false" stmt_handle="1108"><receiver><variable name="B"/></receiver><argument><data_method_call method_name="value" super="false" stmt_handle="1109"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1110"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="B"/></return></sequence_of_expressions></body_expression></data_method><data_method name="putAt" native="false"><return_type>Map</return_type><argument name="Key" type="Object"/><argument name="Value" type="Object"/><local_variable name="R" type="MapElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1111"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1112"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1113"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1114"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1115"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1116"><left_operand><data_method_call method_name="key" super="false" stmt_handle="1117"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="Key"/></right_operand></binary_operation></condition><then><sequence_of_expressions><data_method_call method_name="setValue" super="false" stmt_handle="1118"><receiver><variable name="R"/></receiver><argument><variable name="Value"/></argument></data_method_call><assignment variable_name="NF"><constant type="boolean">false</constant></assignment></sequence_of_expressions></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1119"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><if><condition><variable name="NF"/></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="setValue" super="false" stmt_handle="1120"><receiver><data_method_call method_name="setKey" super="false" stmt_handle="1121"><receiver><data_method_call method_name="setRemoved" super="false" stmt_handle="1122"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="1123"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="1124"><receiver><new data_class="MapElement"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1125"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="boolean">false</constant></argument></data_method_call></receiver><argument><variable name="Key"/></argument></data_method_call></receiver><argument><variable name="Value"/></argument></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="1126"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1127"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1128"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="1129"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="at" native="false"><return_type>Object</return_type><argument name="Key" type="Object"/><local_variable name="R" type="MapElement"/><local_variable name="NF" type="Boolean"/><local_variable name="Value" type="Object"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1130"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1131"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><assignment variable_name="Value"><nil/></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1132"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1133"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1134"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1135"><left_operand><data_method_call method_name="key" super="false" stmt_handle="1136"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="Key"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Value"><data_method_call method_name="value" super="false" stmt_handle="1137"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="NF"><constant type="boolean">false</constant></assignment></sequence_of_expressions></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1138"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="Value"/></return></sequence_of_expressions></body_expression></data_method><data_method name="removeAt" native="false"><return_type>Map</return_type><argument name="Key" type="Object"/><local_variable name="R" type="MapElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1139"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1140"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1141"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1142"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1143"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1144"><left_operand><data_method_call method_name="key" super="false" stmt_handle="1145"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="Key"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="NF"><constant type="boolean">false</constant></assignment><data_method_call method_name="setRemoved" super="false" stmt_handle="1146"><receiver><variable name="R"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1147"><receiver><data_method_call method_name="next" super="false" stmt_handle="1148"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1149"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1150"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1151"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="1152"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="-" stmt_handle="1153"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1154"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="R" type="MapElement"/><local_variable name="PrintOut" type="String"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1155"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1156"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="=" stmt_handle="1157"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><assignment variable_name="PrintOut"><constant type="string">"Empty Map"</constant></assignment></then><else><sequence_of_expressions><assignment variable_name="PrintOut"><constant type="string">"Map{"</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1158"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1159"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="concat" super="false" stmt_handle="1160"><receiver><variable name="PrintOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="1161"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><if><condition><binary_operation operator="!=" stmt_handle="1162"><left_operand><data_method_call method_name="next" super="false" stmt_handle="1163"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="1164"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">", "</constant></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1165"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><data_method_call method_name="concat" super="false" stmt_handle="1166"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"}"</constant></argument></data_method_call></sequence_of_expressions></else></if><return><variable name="PrintOut"/></return></sequence_of_expressions></body_expression></data_method><data_method name="resize" native="false"><return_type>Map</return_type><argument name="S" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1167"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1168"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="Size"><variable name="S"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="root" native="false"><return_type>MapElement</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1169"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1170"><receiver><self/></receiver></data_method_call></then></if><return><variable name="Root"/></return></sequence_of_expressions></body_expression></data_method><data_method name="=" native="false"><return_type>Boolean</return_type><argument name="M" type="Object"/><local_variable name="R" type="MapElement"/><local_variable name="NF" type="Boolean"/><body_expression><if><condition><binary_operation operator="&amp;" stmt_handle="1171"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1172"><left_operand><variable name="M"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><data_method_call method_name="isOfType" super="false" stmt_handle="1173"><receiver><variable name="M"/></receiver><argument><constant type="string">"Map"</constant></argument></data_method_call></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1174"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1175"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="NF"><binary_operation operator="=" stmt_handle="1176"><left_operand><variable name="Size"/></left_operand><right_operand><data_method_call method_name="size" super="false" stmt_handle="1177"><receiver><variable name="M"/></receiver></data_method_call></right_operand></binary_operation></assignment><if><condition><binary_operation operator="&amp;" stmt_handle="1178"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1179"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1180"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1181"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1182"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="!=" stmt_handle="1183"><left_operand><data_method_call method_name="value" super="false" stmt_handle="1184"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><assignment variable_name="NF"><binary_operation operator="=" stmt_handle="1191"><left_operand><data_method_call method_name="at" super="false" stmt_handle="1192"><receiver><variable name="M"/></receiver><argument><data_method_call method_name="key" super="false" stmt_handle="1193"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></left_operand><right_operand><data_method_call method_name="value" super="false" stmt_handle="1194"><receiver><variable name="R"/></receiver></data_method_call></right_operand></binary_operation></assignment></then><else><assignment variable_name="NF"><binary_operation operator="&amp;" stmt_handle="1185"><left_operand><data_method_call method_name="includesKey" super="false" stmt_handle="1186"><receiver><variable name="M"/></receiver><argument><data_method_call method_name="key" super="false" stmt_handle="1187"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1188"><left_operand><data_method_call method_name="at" super="false" stmt_handle="1189"><receiver><variable name="M"/></receiver><argument><data_method_call method_name="key" super="false" stmt_handle="1190"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment></else></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1195"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while></sequence_of_expressions></then></if><return><variable name="NF"/></return></sequence_of_expressions></then><else><return><constant type="boolean">false</constant></return></else></if></body_expression></data_method><data_method name="!=" native="false"><return_type>Boolean</return_type><argument name="M" type="Object"/><body_expression><return><unary_operation operator="!" stmt_handle="1196"><operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1197"><left_operand><self/></left_operand><right_operand><variable name="M"/></right_operand></binary_operation></sequence_of_expressions></operand></unary_operation></return></body_expression></data_method></data_class><data_class name="Collection" native="false"><super_class>Object</super_class><instance_variable name="Root" type="CollectionElement"/><instance_variable name="Size" type="Integer"/><data_method name="clear" native="false"><return_type>Collection</return_type><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="!=" stmt_handle="1198"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1201"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1202"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="setRemoved" super="false" stmt_handle="1203"><receiver><variable name="R"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1204"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while></sequence_of_expressions></then><else><assignment variable_name="Root"><data_method_call method_name="setRemoved" super="false" stmt_handle="1199"><receiver><data_method_call method_name="setCount" super="false" stmt_handle="1200"><receiver><new data_class="CollectionElement"/></receiver><argument><constant type="integer">0</constant></argument></data_method_call></receiver><argument><constant type="boolean">false</constant></argument></data_method_call></assignment></else></if><data_method_call method_name="setPrevious" super="false" stmt_handle="1205"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="1206"><receiver><variable name="Root"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><variable name="Root"/></argument></data_method_call><assignment variable_name="Size"><constant type="integer">0</constant></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="isEmpty" native="false"><return_type>Boolean</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1207"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1208"><receiver><self/></receiver></data_method_call></then></if><return><binary_operation operator="=" stmt_handle="1209"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></return></sequence_of_expressions></body_expression></data_method><data_method name="size" native="false"><return_type>Integer</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1210"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1211"><receiver><self/></receiver></data_method_call></then></if><return><variable name="Size"/></return></sequence_of_expressions></body_expression></data_method><data_method name="excludes" native="false"><return_type>Boolean</return_type><argument name="O" type="Object"/><body_expression><return><data_method_call method_name="not" super="false" stmt_handle="1212"><receiver><data_method_call method_name="includes" super="false" stmt_handle="1213"><receiver><self/></receiver><argument><variable name="O"/></argument></data_method_call></receiver></data_method_call></return></body_expression></data_method><data_method name="excludesAll" native="false"><return_type>Boolean</return_type><argument name="C" type="Collection"/><local_variable name="I" type="CollectionIterator"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1214"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1215"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1216"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1217"><left_operand><variable name="C"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1218"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1219"><receiver><variable name="C"/></receiver><argument><constant type="string">"Collection"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1220"><receiver><self/></receiver><argument><constant type="string">"Parameter of method \"excludesAll\" for Collection should be a Collection"</constant></argument></data_method_call></then></if><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><if><condition><binary_operation operator="!=" stmt_handle="1221"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="I"><data_method_call method_name="iterator" super="false" stmt_handle="1222"><receiver><variable name="C"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1223"><left_operand><variable name="NF"/></left_operand><right_operand><unary_operation operator="!" stmt_handle="1224"><operand><sequence_of_expressions><data_method_call method_name="isDone" super="false" stmt_handle="1225"><receiver><variable name="I"/></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="NF"><data_method_call method_name="excludes" super="false" stmt_handle="1226"><receiver><self/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1227"><receiver><variable name="I"/></receiver></data_method_call></argument></data_method_call></assignment><data_method_call method_name="advance" super="false" stmt_handle="1228"><receiver><variable name="I"/></receiver></data_method_call></sequence_of_expressions></body></while></sequence_of_expressions></then></if><return><variable name="NF"/></return></sequence_of_expressions></body_expression></data_method><data_method name="includes" native="false"><return_type>Boolean</return_type><argument name="O" type="Object"/><local_variable name="R" type="CollectionElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1229"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1230"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1231"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1232"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1233"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="NF"><binary_operation operator="!=" stmt_handle="1234"><left_operand><data_method_call method_name="element" super="false" stmt_handle="1235"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="O"/></right_operand></binary_operation></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1236"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><data_method_call method_name="not" super="false" stmt_handle="1237"><receiver><variable name="NF"/></receiver></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="includesAll" native="false"><return_type>Boolean</return_type><argument name="C" type="Collection"/><local_variable name="I" type="CollectionIterator"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1238"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1239"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1240"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1241"><left_operand><variable name="C"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1242"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1243"><receiver><variable name="C"/></receiver><argument><constant type="string">"Collection"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1244"><receiver><self/></receiver><argument><constant type="string">"Parameter of method \"includesAll\" for Collection should be a Collection"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="1245"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="I"><data_method_call method_name="iterator" super="false" stmt_handle="1248"><receiver><variable name="C"/></receiver></data_method_call></assignment><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1249"><left_operand><variable name="NF"/></left_operand><right_operand><unary_operation operator="!" stmt_handle="1250"><operand><sequence_of_expressions><data_method_call method_name="isDone" super="false" stmt_handle="1251"><receiver><variable name="I"/></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="NF"><data_method_call method_name="includes" super="false" stmt_handle="1252"><receiver><self/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1253"><receiver><variable name="I"/></receiver></data_method_call></argument></data_method_call></assignment><data_method_call method_name="advance" super="false" stmt_handle="1254"><receiver><variable name="I"/></receiver></data_method_call></sequence_of_expressions></body></while><return><variable name="NF"/></return></sequence_of_expressions></then><else><return><binary_operation operator="=" stmt_handle="1246"><left_operand><data_method_call method_name="size" super="false" stmt_handle="1247"><receiver><variable name="C"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></return></else></if></sequence_of_expressions></body_expression></data_method><data_method name="toArray" native="false"><return_type>Array</return_type><local_variable name="R" type="CollectionElement"/><local_variable name="I" type="Integer"/><local_variable name="J" type="Integer"/><local_variable name="A" type="Array"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1255"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1256"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="A"><data_method_call method_name="resize" super="false" stmt_handle="1257"><receiver><new data_class="Array"/></receiver><argument><variable name="Size"/></argument></data_method_call></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1258"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="I"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="!=" stmt_handle="1259"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="J"><data_method_call method_name="count" super="false" stmt_handle="1260"><receiver><variable name="R"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1261"><left_operand><variable name="J"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="putAt" super="false" stmt_handle="1262"><receiver><variable name="A"/></receiver><argument><variable name="I"/></argument><argument><data_method_call method_name="element" super="false" stmt_handle="1263"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="I"><binary_operation operator="+" stmt_handle="1264"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><assignment variable_name="J"><binary_operation operator="-" stmt_handle="1265"><left_operand><variable name="J"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1266"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="A"/></return></sequence_of_expressions></body_expression></data_method><data_method name="toBag" native="false"><return_type>Bag</return_type><local_variable name="R" type="CollectionElement"/><local_variable name="B" type="Bag"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1267"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1268"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="B"><data_method_call method_name="clear" super="false" stmt_handle="1269"><receiver><new data_class="Bag"/></receiver></data_method_call></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1270"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1271"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="addMultiple" super="false" stmt_handle="1272"><receiver><variable name="B"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1273"><receiver><variable name="R"/></receiver></data_method_call></argument><argument><data_method_call method_name="count" super="false" stmt_handle="1274"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1275"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="B"/></return></sequence_of_expressions></body_expression></data_method><data_method name="toSet" native="false"><return_type>Set</return_type><local_variable name="R" type="CollectionElement"/><local_variable name="S" type="Set"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1276"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1277"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="S"><data_method_call method_name="clear" super="false" stmt_handle="1278"><receiver><new data_class="Set"/></receiver></data_method_call></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1279"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1280"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="add" super="false" stmt_handle="1281"><receiver><variable name="S"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1282"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1283"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="S"/></return></sequence_of_expressions></body_expression></data_method><data_method name="toSequence" native="false"><return_type>Sequence</return_type><local_variable name="R" type="CollectionElement"/><local_variable name="I" type="Integer"/><local_variable name="S" type="Sequence"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1284"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1285"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="S"><data_method_call method_name="clear" super="false" stmt_handle="1286"><receiver><new data_class="Sequence"/></receiver></data_method_call></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1287"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1288"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="I"><data_method_call method_name="count" super="false" stmt_handle="1289"><receiver><variable name="R"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1290"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="append" super="false" stmt_handle="1291"><receiver><variable name="S"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1292"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="I"><binary_operation operator="-" stmt_handle="1293"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1294"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="S"/></return></sequence_of_expressions></body_expression></data_method><data_method name="resize" native="false"><return_type>Collection</return_type><argument name="S" type="Integer"/><body_expression><sequence_of_expressions><assignment variable_name="Size"><variable name="S"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="root" native="false"><return_type>CollectionElement</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1295"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1296"><receiver><self/></receiver></data_method_call></then></if><return><variable name="Root"/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Bag" native="false"><super_class>Collection</super_class><data_method name="iterator" native="false"><return_type>BagIterator</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1297"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1298"><receiver><self/></receiver></data_method_call></then></if><return><data_method_call method_name="referringTo" super="false" stmt_handle="1299"><receiver><new data_class="BagIterator"/></receiver><argument><self/></argument><argument><data_method_call method_name="next" super="false" stmt_handle="1300"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="fromArray" native="false"><return_type>Bag</return_type><argument name="A" type="Array"/><local_variable name="I" type="Integer"/><body_expression><sequence_of_expressions><data_method_call method_name="clear" super="false" stmt_handle="1301"><receiver><self/></receiver></data_method_call><assignment variable_name="I"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="1302"><left_operand><variable name="I"/></left_operand><right_operand><data_method_call method_name="size" super="false" stmt_handle="1303"><receiver><variable name="A"/></receiver></data_method_call></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="add" super="false" stmt_handle="1304"><receiver><self/></receiver><argument><data_method_call method_name="at" super="false" stmt_handle="1305"><receiver><variable name="A"/></receiver><argument><variable name="I"/></argument></data_method_call></argument></data_method_call><assignment variable_name="I"><binary_operation operator="+" stmt_handle="1306"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="isUnique" native="false"><return_type>Boolean</return_type><local_variable name="R" type="CollectionElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1307"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1308"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><if><condition><binary_operation operator="&gt;" stmt_handle="1309"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1310"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1311"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1312"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="NF"><binary_operation operator="=" stmt_handle="1313"><left_operand><data_method_call method_name="count" super="false" stmt_handle="1314"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1315"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while></sequence_of_expressions></then></if><return><variable name="NF"/></return></sequence_of_expressions></body_expression></data_method><data_method name="count" native="false"><return_type>Integer</return_type><argument name="O" type="Object"/><local_variable name="R" type="CollectionElement"/><local_variable name="C" type="Integer"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1316"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1317"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="C"><constant type="integer">0</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1318"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1319"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1320"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1321"><left_operand><data_method_call method_name="element" super="false" stmt_handle="1322"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="O"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="NF"><constant type="boolean">false</constant></assignment><assignment variable_name="C"><data_method_call method_name="count" super="false" stmt_handle="1323"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1324"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="C"/></return></sequence_of_expressions></body_expression></data_method><data_method name="add" native="false"><return_type>Bag</return_type><argument name="O" type="Object"/><body_expression><return><data_method_call method_name="addMultiple" super="false" stmt_handle="1325"><receiver><self/></receiver><argument><variable name="O"/></argument><argument><constant type="integer">1</constant></argument></data_method_call></return></body_expression></data_method><data_method name="addMultiple" native="false"><return_type>Bag</return_type><argument name="O" type="Object"/><argument name="N" type="Integer"/><local_variable name="R" type="CollectionElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1326"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1327"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1328"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1329"><left_operand><variable name="N"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1330"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1331"><receiver><variable name="N"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1332"><receiver><self/></receiver><argument><constant type="string">"Second parameter for method \"addMultiple\" of Bag must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&lt;" stmt_handle="1333"><left_operand><variable name="N"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1334"><receiver><self/></receiver><argument><constant type="string">"Second parameter for method \"addMultiple\" of Bag must not be negative"</constant></argument></data_method_call></then></if><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1335"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1336"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1337"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1338"><left_operand><data_method_call method_name="element" super="false" stmt_handle="1339"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="O"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="NF"><constant type="boolean">false</constant></assignment><data_method_call method_name="setCount" super="false" stmt_handle="1340"><receiver><variable name="R"/></receiver><argument><binary_operation operator="+" stmt_handle="1341"><left_operand><data_method_call method_name="count" super="false" stmt_handle="1342"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="N"/></right_operand></binary_operation></argument></data_method_call></sequence_of_expressions></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1343"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><if><condition><variable name="NF"/></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="setElement" super="false" stmt_handle="1344"><receiver><data_method_call method_name="setRemoved" super="false" stmt_handle="1345"><receiver><data_method_call method_name="setCount" super="false" stmt_handle="1346"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="1347"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="1348"><receiver><new data_class="CollectionElement"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1349"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></receiver><argument><variable name="N"/></argument></data_method_call></receiver><argument><constant type="boolean">false</constant></argument></data_method_call></receiver><argument><variable name="O"/></argument></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="1350"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1351"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1352"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call></sequence_of_expressions></then></if><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="1353"><left_operand><variable name="Size"/></left_operand><right_operand><variable name="N"/></right_operand></binary_operation></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="remove" native="false"><return_type>Bag</return_type><argument name="O" type="Object"/><body_expression><return><data_method_call method_name="removeMultiple" super="false" stmt_handle="1354"><receiver><self/></receiver><argument><variable name="O"/></argument><argument><constant type="integer">1</constant></argument></data_method_call></return></body_expression></data_method><data_method name="removeMultiple" native="false"><return_type>Bag</return_type><argument name="O" type="Object"/><argument name="N" type="Integer"/><local_variable name="R" type="CollectionElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1355"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1356"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1357"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1358"><left_operand><variable name="N"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1359"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1360"><receiver><variable name="N"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1361"><receiver><self/></receiver><argument><constant type="string">"Second parameter for method \"removeMultiple\" of Bag must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&lt;" stmt_handle="1362"><left_operand><variable name="N"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1363"><receiver><self/></receiver><argument><constant type="string">"Second parameter for method \"removeMultiple\" of Bag must not be negative"</constant></argument></data_method_call></then></if><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1364"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1365"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1366"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1367"><left_operand><data_method_call method_name="element" super="false" stmt_handle="1368"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="O"/></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="&lt;=" stmt_handle="1369"><left_operand><data_method_call method_name="count" super="false" stmt_handle="1370"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="N"/></right_operand></binary_operation></condition><then><sequence_of_expressions><data_method_call method_name="setRemoved" super="false" stmt_handle="1375"><receiver><variable name="R"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1376"><receiver><data_method_call method_name="next" super="false" stmt_handle="1377"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1378"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1379"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1380"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="1381"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="-" stmt_handle="1382"><left_operand><variable name="Size"/></left_operand><right_operand><data_method_call method_name="count" super="false" stmt_handle="1383"><receiver><variable name="R"/></receiver></data_method_call></right_operand></binary_operation></assignment></sequence_of_expressions></then><else><sequence_of_expressions><data_method_call method_name="setCount" super="false" stmt_handle="1371"><receiver><variable name="R"/></receiver><argument><binary_operation operator="-" stmt_handle="1372"><left_operand><data_method_call method_name="count" super="false" stmt_handle="1373"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="N"/></right_operand></binary_operation></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="-" stmt_handle="1374"><left_operand><variable name="Size"/></left_operand><right_operand><variable name="N"/></right_operand></binary_operation></assignment></sequence_of_expressions></else></if><assignment variable_name="NF"><constant type="boolean">false</constant></assignment></sequence_of_expressions></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1384"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="removeDuplicates" native="false"><return_type>Bag</return_type><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1385"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1386"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1387"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1388"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="1389"><left_operand><binary_operation operator="-" stmt_handle="1390"><left_operand><variable name="Size"/></left_operand><right_operand><data_method_call method_name="count" super="false" stmt_handle="1391"><receiver><variable name="R"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><data_method_call method_name="setCount" super="false" stmt_handle="1392"><receiver><variable name="R"/></receiver><argument><constant type="integer">1</constant></argument></data_method_call><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1393"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="union" native="false"><return_type>Bag</return_type><argument name="B" type="Bag"/><local_variable name="R" type="CollectionElement"/><local_variable name="I" type="CollectionElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1394"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1395"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1396"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1397"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1398"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1399"><receiver><variable name="B"/></receiver><argument><constant type="string">"Bag"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1400"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"union\" of Bag must be a Bag"</constant></argument></data_method_call></then></if><assignment variable_name="I"><data_method_call method_name="next" super="false" stmt_handle="1401"><receiver><data_method_call method_name="root" super="false" stmt_handle="1402"><receiver><variable name="B"/></receiver></data_method_call></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1403"><left_operand><variable name="I"/></left_operand><right_operand><data_method_call method_name="root" super="false" stmt_handle="1404"><receiver><variable name="B"/></receiver></data_method_call></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1405"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1406"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1407"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1408"><left_operand><data_method_call method_name="element" super="false" stmt_handle="1409"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="element" super="false" stmt_handle="1410"><receiver><variable name="I"/></receiver></data_method_call></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="NF"><constant type="boolean">false</constant></assignment><data_method_call method_name="setCount" super="false" stmt_handle="1411"><receiver><variable name="R"/></receiver><argument><binary_operation operator="+" stmt_handle="1412"><left_operand><data_method_call method_name="count" super="false" stmt_handle="1413"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="count" super="false" stmt_handle="1414"><receiver><variable name="I"/></receiver></data_method_call></right_operand></binary_operation></argument></data_method_call></sequence_of_expressions></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1415"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><if><condition><variable name="NF"/></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="setElement" super="false" stmt_handle="1416"><receiver><data_method_call method_name="setRemoved" super="false" stmt_handle="1417"><receiver><data_method_call method_name="setCount" super="false" stmt_handle="1418"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="1419"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="1420"><receiver><new data_class="CollectionElement"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1421"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></receiver><argument><data_method_call method_name="count" super="false" stmt_handle="1422"><receiver><variable name="I"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="boolean">false</constant></argument></data_method_call></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1423"><receiver><variable name="I"/></receiver></data_method_call></argument></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="1424"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1425"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1426"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call></sequence_of_expressions></then></if><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="1427"><left_operand><variable name="Size"/></left_operand><right_operand><data_method_call method_name="count" super="false" stmt_handle="1428"><receiver><variable name="I"/></receiver></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="I"><data_method_call method_name="next" super="false" stmt_handle="1429"><receiver><variable name="I"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="subtract" native="false"><return_type>Bag</return_type><argument name="B" type="Bag"/><local_variable name="R" type="CollectionElement"/><local_variable name="C" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1430"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1431"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1432"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1433"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1434"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1435"><receiver><variable name="B"/></receiver><argument><constant type="string">"Bag"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1436"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"subtract\" of Bag must be a Bag"</constant></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1437"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1438"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="C"><data_method_call method_name="monus" super="false" stmt_handle="1439"><receiver><data_method_call method_name="count" super="false" stmt_handle="1440"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="count" super="false" stmt_handle="1441"><receiver><variable name="B"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1442"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></argument></data_method_call></assignment><if><condition><binary_operation operator="=" stmt_handle="1443"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><data_method_call method_name="setRemoved" super="false" stmt_handle="1448"><receiver><variable name="R"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1449"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1450"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="1451"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1452"><receiver><data_method_call method_name="next" super="false" stmt_handle="1453"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1454"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="-" stmt_handle="1455"><left_operand><variable name="Size"/></left_operand><right_operand><data_method_call method_name="count" super="false" stmt_handle="1456"><receiver><variable name="R"/></receiver></data_method_call></right_operand></binary_operation></assignment></sequence_of_expressions></then><else><sequence_of_expressions><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="1444"><left_operand><binary_operation operator="-" stmt_handle="1445"><left_operand><variable name="Size"/></left_operand><right_operand><data_method_call method_name="count" super="false" stmt_handle="1446"><receiver><variable name="R"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><variable name="C"/></right_operand></binary_operation></assignment><data_method_call method_name="setCount" super="false" stmt_handle="1447"><receiver><variable name="R"/></receiver><argument><variable name="C"/></argument></data_method_call></sequence_of_expressions></else></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1457"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="difference" native="false"><return_type>Bag</return_type><argument name="B" type="Bag"/><local_variable name="R" type="CollectionElement"/><local_variable name="Intersection" type="Bag"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1458"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1459"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1460"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1461"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1462"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1463"><receiver><variable name="B"/></receiver><argument><constant type="string">"Bag"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1464"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"difference\" of Bag must be a Bag"</constant></argument></data_method_call></then></if><assignment variable_name="Intersection"><data_method_call method_name="clear" super="false" stmt_handle="1465"><receiver><new data_class="Bag"/></receiver></data_method_call></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1466"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1467"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="addMultiple" super="false" stmt_handle="1468"><receiver><variable name="Intersection"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1469"><receiver><variable name="R"/></receiver></data_method_call></argument><argument><data_method_call method_name="min" super="false" stmt_handle="1470"><receiver><data_method_call method_name="count" super="false" stmt_handle="1471"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="count" super="false" stmt_handle="1472"><receiver><variable name="B"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1473"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></argument></data_method_call></argument></data_method_call><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1474"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><data_method_call method_name="union" super="false" stmt_handle="1475"><receiver><sequence_of_expressions><data_method_call method_name="subtract" super="false" stmt_handle="1476"><receiver><self/></receiver><argument><variable name="Intersection"/></argument></data_method_call></sequence_of_expressions></receiver><argument><binary_operation operator="-" stmt_handle="1477"><left_operand><variable name="B"/></left_operand><right_operand><variable name="Intersection"/></right_operand></binary_operation></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="intersection" native="false"><return_type>Bag</return_type><argument name="B" type="Bag"/><local_variable name="R" type="CollectionElement"/><local_variable name="C" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1478"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1479"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1480"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1481"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1482"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1483"><receiver><variable name="B"/></receiver><argument><constant type="string">"Bag"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1484"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"intersection\" of Bag must be a Bag"</constant></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1485"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1486"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="C"><data_method_call method_name="min" super="false" stmt_handle="1487"><receiver><data_method_call method_name="count" super="false" stmt_handle="1488"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="count" super="false" stmt_handle="1489"><receiver><variable name="B"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1490"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></argument></data_method_call></assignment><if><condition><binary_operation operator="=" stmt_handle="1491"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><data_method_call method_name="setRemoved" super="false" stmt_handle="1496"><receiver><variable name="R"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1497"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1498"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="1499"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1500"><receiver><data_method_call method_name="next" super="false" stmt_handle="1501"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1502"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="-" stmt_handle="1503"><left_operand><variable name="Size"/></left_operand><right_operand><data_method_call method_name="count" super="false" stmt_handle="1504"><receiver><variable name="R"/></receiver></data_method_call></right_operand></binary_operation></assignment></sequence_of_expressions></then><else><sequence_of_expressions><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="1492"><left_operand><binary_operation operator="-" stmt_handle="1493"><left_operand><variable name="Size"/></left_operand><right_operand><data_method_call method_name="count" super="false" stmt_handle="1494"><receiver><variable name="R"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><variable name="C"/></right_operand></binary_operation></assignment><data_method_call method_name="setCount" super="false" stmt_handle="1495"><receiver><variable name="R"/></receiver><argument><variable name="C"/></argument></data_method_call></sequence_of_expressions></else></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1505"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="R" type="CollectionElement"/><local_variable name="PrintOut" type="String"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1506"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1507"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="=" stmt_handle="1508"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><assignment variable_name="PrintOut"><constant type="string">"Empty Bag"</constant></assignment></then><else><sequence_of_expressions><assignment variable_name="PrintOut"><constant type="string">"Bag{"</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1509"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1510"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="concat" super="false" stmt_handle="1511"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1512"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1513"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1514"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1515"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"["</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="1516"><receiver><data_method_call method_name="count" super="false" stmt_handle="1517"><receiver><variable name="R"/></receiver></data_method_call></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">" * "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="1518"><receiver><data_method_call method_name="element" super="false" stmt_handle="1519"><receiver><variable name="R"/></receiver></data_method_call></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call><if><condition><binary_operation operator="!=" stmt_handle="1520"><left_operand><data_method_call method_name="next" super="false" stmt_handle="1521"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="1522"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">", "</constant></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1523"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><data_method_call method_name="concat" super="false" stmt_handle="1524"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"}"</constant></argument></data_method_call></sequence_of_expressions></else></if><return><variable name="PrintOut"/></return></sequence_of_expressions></body_expression></data_method><data_method name="=" native="false"><return_type>Boolean</return_type><argument name="B" type="Object"/><local_variable name="R" type="CollectionElement"/><local_variable name="NF" type="Boolean"/><body_expression><if><condition><binary_operation operator="&amp;" stmt_handle="1525"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1526"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><data_method_call method_name="isOfType" super="false" stmt_handle="1527"><receiver><variable name="B"/></receiver><argument><constant type="string">"Bag"</constant></argument></data_method_call></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1528"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1529"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="NF"><binary_operation operator="=" stmt_handle="1530"><left_operand><variable name="Size"/></left_operand><right_operand><data_method_call method_name="size" super="false" stmt_handle="1531"><receiver><variable name="B"/></receiver></data_method_call></right_operand></binary_operation></assignment><if><condition><binary_operation operator="&amp;" stmt_handle="1532"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1533"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1534"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1535"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1536"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="NF"><binary_operation operator="=" stmt_handle="1537"><left_operand><data_method_call method_name="count" super="false" stmt_handle="1538"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="count" super="false" stmt_handle="1539"><receiver><variable name="B"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1540"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1541"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while></sequence_of_expressions></then></if><return><variable name="NF"/></return></sequence_of_expressions></then><else><return><constant type="boolean">false</constant></return></else></if></body_expression></data_method><data_method name="!=" native="false"><return_type>Boolean</return_type><argument name="B" type="Object"/><body_expression><return><unary_operation operator="!" stmt_handle="1542"><operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1543"><left_operand><self/></left_operand><right_operand><variable name="B"/></right_operand></binary_operation></sequence_of_expressions></operand></unary_operation></return></body_expression></data_method><data_method name="+" native="false"><return_type>Bag</return_type><argument name="B" type="Bag"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1544"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1545"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1546"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1547"><receiver><variable name="B"/></receiver><argument><constant type="string">"Bag"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1548"><receiver><self/></receiver><argument><constant type="string">"Parameter for operator \"+\" of Bag must be a Bag"</constant></argument></data_method_call></then></if><return><data_method_call method_name="union" super="false" stmt_handle="1549"><receiver><data_method_call method_name="deepCopy" super="false" stmt_handle="1550"><receiver><self/></receiver></data_method_call></receiver><argument><variable name="B"/></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="-" native="false"><return_type>Bag</return_type><argument name="B" type="Bag"/><local_variable name="R" type="CollectionElement"/><local_variable name="Subtraction" type="Bag"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1551"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1552"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1553"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1554"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1555"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1556"><receiver><variable name="B"/></receiver><argument><constant type="string">"Bag"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1557"><receiver><self/></receiver><argument><constant type="string">"Parameter for operator \"-\" of Bag must be a Bag"</constant></argument></data_method_call></then></if><assignment variable_name="Subtraction"><new data_class="Bag"/></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1558"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1559"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="addMultiple" super="false" stmt_handle="1560"><receiver><variable name="Subtraction"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1561"><receiver><variable name="R"/></receiver></data_method_call></argument><argument><data_method_call method_name="monus" super="false" stmt_handle="1562"><receiver><data_method_call method_name="count" super="false" stmt_handle="1563"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="count" super="false" stmt_handle="1564"><receiver><variable name="B"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1565"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></argument></data_method_call></argument></data_method_call><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1566"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="Subtraction"/></return></sequence_of_expressions></body_expression></data_method><data_method name="&gt;" native="false"><return_type>Boolean</return_type><argument name="B" type="Bag"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1567"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1568"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1569"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1570"><receiver><variable name="B"/></receiver><argument><constant type="string">"Bag"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1571"><receiver><self/></receiver><argument><constant type="string">"Parameter for operator \"&lt;\" of Bag must be a Bag"</constant></argument></data_method_call></then></if><return><unary_operation operator="!" stmt_handle="1572"><operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="1573"><left_operand><self/></left_operand><right_operand><variable name="B"/></right_operand></binary_operation></sequence_of_expressions></operand></unary_operation></return></sequence_of_expressions></body_expression></data_method><data_method name="&gt;=" native="false"><return_type>Boolean</return_type><argument name="B" type="Bag"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1574"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1575"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1576"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1577"><receiver><variable name="B"/></receiver><argument><constant type="string">"Bag"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1578"><receiver><self/></receiver><argument><constant type="string">"Parameter for operator \"&lt;=\" of Bag must be a Bag"</constant></argument></data_method_call></then></if><return><binary_operation operator="&lt;=" stmt_handle="1579"><left_operand><variable name="B"/></left_operand><right_operand><self/></right_operand></binary_operation></return></sequence_of_expressions></body_expression></data_method><data_method name="&lt;" native="false"><return_type>Boolean</return_type><argument name="B" type="Bag"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1580"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1581"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1582"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1583"><receiver><variable name="B"/></receiver><argument><constant type="string">"Bag"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1584"><receiver><self/></receiver><argument><constant type="string">"Parameter for operator \"&lt;\" of Bag must be a Bag"</constant></argument></data_method_call></then></if><return><unary_operation operator="!" stmt_handle="1585"><operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="1586"><left_operand><variable name="B"/></left_operand><right_operand><self/></right_operand></binary_operation></sequence_of_expressions></operand></unary_operation></return></sequence_of_expressions></body_expression></data_method><data_method name="&lt;=" native="false"><return_type>Boolean</return_type><argument name="B" type="Bag"/><local_variable name="R" type="CollectionElement"/><local_variable name="SubBag" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1587"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1588"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1589"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1590"><left_operand><variable name="B"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1591"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1592"><receiver><variable name="B"/></receiver><argument><constant type="string">"Bag"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1593"><receiver><self/></receiver><argument><constant type="string">"Parameter for operator \"&lt;=\" of Bag must be a Bag"</constant></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1594"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="SubBag"><constant type="boolean">true</constant></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1595"><left_operand><variable name="SubBag"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1596"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="SubBag"><binary_operation operator="&lt;=" stmt_handle="1597"><left_operand><data_method_call method_name="count" super="false" stmt_handle="1598"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="count" super="false" stmt_handle="1599"><receiver><variable name="B"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1600"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1601"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="SubBag"/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Set" native="false"><super_class>Collection</super_class><data_method name="iterator" native="false"><return_type>CollectionIterator</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1602"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1603"><receiver><self/></receiver></data_method_call></then></if><return><data_method_call method_name="referringTo" super="false" stmt_handle="1604"><receiver><new data_class="CollectionIterator"/></receiver><argument><self/></argument><argument><data_method_call method_name="next" super="false" stmt_handle="1605"><receiver><variable name="Root"/></receiver></data_method_call></argument><argument><constant type="string">"Set"</constant></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="fromArray" native="false"><return_type>Set</return_type><argument name="A" type="Array"/><local_variable name="I" type="Integer"/><body_expression><sequence_of_expressions><data_method_call method_name="clear" super="false" stmt_handle="1606"><receiver><self/></receiver></data_method_call><assignment variable_name="I"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="1607"><left_operand><variable name="I"/></left_operand><right_operand><data_method_call method_name="size" super="false" stmt_handle="1608"><receiver><variable name="A"/></receiver></data_method_call></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="add" super="false" stmt_handle="1609"><receiver><self/></receiver><argument><data_method_call method_name="at" super="false" stmt_handle="1610"><receiver><variable name="A"/></receiver><argument><variable name="I"/></argument></data_method_call></argument></data_method_call><assignment variable_name="I"><binary_operation operator="+" stmt_handle="1611"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="count" native="false"><return_type>Integer</return_type><argument name="O" type="Object"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1612"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1613"><receiver><self/></receiver></data_method_call></then></if><if><condition><data_method_call method_name="includes" super="false" stmt_handle="1614"><receiver><self/></receiver><argument><variable name="O"/></argument></data_method_call></condition><then><return><constant type="integer">1</constant></return></then><else><return><constant type="integer">0</constant></return></else></if></sequence_of_expressions></body_expression></data_method><data_method name="add" native="false"><return_type>Set</return_type><argument name="O" type="Object"/><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1615"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1616"><receiver><self/></receiver></data_method_call></then></if><if><condition><data_method_call method_name="excludes" super="false" stmt_handle="1617"><receiver><self/></receiver><argument><variable name="O"/></argument></data_method_call></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="setElement" super="false" stmt_handle="1618"><receiver><data_method_call method_name="setRemoved" super="false" stmt_handle="1619"><receiver><data_method_call method_name="setCount" super="false" stmt_handle="1620"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="1621"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="1622"><receiver><new data_class="CollectionElement"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1623"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="integer">1</constant></argument></data_method_call></receiver><argument><constant type="boolean">false</constant></argument></data_method_call></receiver><argument><variable name="O"/></argument></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="1624"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1625"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1626"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="1627"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="remove" native="false"><return_type>Set</return_type><argument name="O" type="Object"/><local_variable name="R" type="CollectionElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1628"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1629"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1630"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1631"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1632"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><if><condition><binary_operation operator="=" stmt_handle="1633"><left_operand><data_method_call method_name="element" super="false" stmt_handle="1634"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="O"/></right_operand></binary_operation></condition><then><sequence_of_expressions><data_method_call method_name="setRemoved" super="false" stmt_handle="1636"><receiver><variable name="R"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1637"><receiver><data_method_call method_name="next" super="false" stmt_handle="1638"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1639"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1640"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1641"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="1642"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="-" stmt_handle="1643"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><assignment variable_name="NF"><constant type="boolean">false</constant></assignment></sequence_of_expressions></then><else><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1635"><receiver><variable name="R"/></receiver></data_method_call></assignment></else></if></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="union" native="false"><return_type>Set</return_type><argument name="S" type="Set"/><local_variable name="I" type="CollectionIterator"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1644"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1645"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1646"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1647"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1648"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1649"><receiver><variable name="S"/></receiver><argument><constant type="string">"Set"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1650"><receiver><self/></receiver><argument><constant type="string">"Parameter of method \"union\" for Set must be a Set"</constant></argument></data_method_call></then></if><assignment variable_name="I"><data_method_call method_name="iterator" super="false" stmt_handle="1651"><receiver><variable name="S"/></receiver></data_method_call></assignment><while><condition><unary_operation operator="!" stmt_handle="1652"><operand><sequence_of_expressions><data_method_call method_name="isDone" super="false" stmt_handle="1653"><receiver><variable name="I"/></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></condition><body><sequence_of_expressions><data_method_call method_name="add" super="false" stmt_handle="1654"><receiver><self/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1655"><receiver><variable name="I"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="advance" super="false" stmt_handle="1656"><receiver><variable name="I"/></receiver></data_method_call></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="subtract" native="false"><return_type>Set</return_type><argument name="S" type="Set"/><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1657"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1658"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1659"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1660"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1661"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1662"><receiver><variable name="S"/></receiver><argument><constant type="string">"Set"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1663"><receiver><self/></receiver><argument><constant type="string">"Parameter of method \"subtract\" for Set must be a Set"</constant></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1664"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1665"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><data_method_call method_name="includes" super="false" stmt_handle="1666"><receiver><variable name="S"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1667"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></condition><then><sequence_of_expressions><data_method_call method_name="setRemoved" super="false" stmt_handle="1668"><receiver><variable name="R"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1669"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1670"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="1671"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1672"><receiver><data_method_call method_name="next" super="false" stmt_handle="1673"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1674"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="-" stmt_handle="1675"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1676"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="difference" native="false"><return_type>Set</return_type><argument name="S" type="Set"/><local_variable name="R" type="CollectionElement"/><local_variable name="Intersection" type="Set"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1677"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1678"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1679"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1680"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1681"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1682"><receiver><variable name="S"/></receiver><argument><constant type="string">"Set"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1683"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"difference\" of Set must be a Set"</constant></argument></data_method_call></then></if><assignment variable_name="Intersection"><data_method_call method_name="clear" super="false" stmt_handle="1684"><receiver><new data_class="Set"/></receiver></data_method_call></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1685"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1686"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><data_method_call method_name="includes" super="false" stmt_handle="1687"><receiver><variable name="S"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1688"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></condition><then><data_method_call method_name="add" super="false" stmt_handle="1689"><receiver><variable name="Intersection"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1690"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1691"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><data_method_call method_name="union" super="false" stmt_handle="1692"><receiver><sequence_of_expressions><data_method_call method_name="subtract" super="false" stmt_handle="1693"><receiver><self/></receiver><argument><variable name="Intersection"/></argument></data_method_call></sequence_of_expressions></receiver><argument><binary_operation operator="-" stmt_handle="1694"><left_operand><variable name="S"/></left_operand><right_operand><variable name="Intersection"/></right_operand></binary_operation></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="intersection" native="false"><return_type>Set</return_type><argument name="S" type="Set"/><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1695"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1696"><receiver><self/></receiver></data_method_call></then></if><if><condition><data_method_call method_name="not" super="false" stmt_handle="1697"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1698"><receiver><variable name="S"/></receiver><argument><constant type="string">"Set"</constant></argument></data_method_call></receiver></data_method_call></condition><then><data_method_call method_name="error" super="false" stmt_handle="1699"><receiver><self/></receiver><argument><constant type="string">"Parameter of method \"intersection\" for Set must be a Set"</constant></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1700"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1701"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><data_method_call method_name="excludes" super="false" stmt_handle="1702"><receiver><variable name="S"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1703"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></condition><then><sequence_of_expressions><data_method_call method_name="setRemoved" super="false" stmt_handle="1704"><receiver><variable name="R"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1705"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1706"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="1707"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1708"><receiver><data_method_call method_name="next" super="false" stmt_handle="1709"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1710"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="-" stmt_handle="1711"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1712"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="PrintOut" type="String"/><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1713"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1714"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="=" stmt_handle="1715"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><assignment variable_name="PrintOut"><constant type="string">"Empty Set"</constant></assignment></then><else><sequence_of_expressions><assignment variable_name="PrintOut"><constant type="string">"Set{"</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1716"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1717"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="concat" super="false" stmt_handle="1718"><receiver><variable name="PrintOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="1719"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><if><condition><binary_operation operator="!=" stmt_handle="1720"><left_operand><data_method_call method_name="next" super="false" stmt_handle="1721"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="1722"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">", "</constant></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1723"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><data_method_call method_name="concat" super="false" stmt_handle="1724"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"}"</constant></argument></data_method_call></sequence_of_expressions></else></if><return><variable name="PrintOut"/></return></sequence_of_expressions></body_expression></data_method><data_method name="=" native="false"><return_type>Boolean</return_type><argument name="S" type="Object"/><local_variable name="R" type="CollectionElement"/><local_variable name="NF" type="Boolean"/><body_expression><if><condition><binary_operation operator="&amp;" stmt_handle="1725"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1726"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><data_method_call method_name="isOfType" super="false" stmt_handle="1727"><receiver><variable name="S"/></receiver><argument><constant type="string">"Set"</constant></argument></data_method_call></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="NF"><binary_operation operator="=" stmt_handle="1728"><left_operand><variable name="Size"/></left_operand><right_operand><data_method_call method_name="size" super="false" stmt_handle="1729"><receiver><variable name="S"/></receiver></data_method_call></right_operand></binary_operation></assignment><if><condition><binary_operation operator="&amp;" stmt_handle="1730"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1731"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1732"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1733"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1734"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="NF"><data_method_call method_name="includes" super="false" stmt_handle="1735"><receiver><variable name="S"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1736"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1737"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while></sequence_of_expressions></then></if><return><variable name="NF"/></return></sequence_of_expressions></then><else><return><constant type="boolean">false</constant></return></else></if></body_expression></data_method><data_method name="!=" native="false"><return_type>Boolean</return_type><argument name="S" type="Object"/><body_expression><return><unary_operation operator="!" stmt_handle="1738"><operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1739"><left_operand><self/></left_operand><right_operand><variable name="S"/></right_operand></binary_operation></sequence_of_expressions></operand></unary_operation></return></body_expression></data_method><data_method name="+" native="false"><return_type>Set</return_type><argument name="S" type="Set"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1740"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1741"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1742"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1743"><receiver><variable name="S"/></receiver><argument><constant type="string">"Set"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1744"><receiver><self/></receiver><argument><constant type="string">"Parameter of operator \"+\" for Set must be a Set"</constant></argument></data_method_call></then></if><return><data_method_call method_name="union" super="false" stmt_handle="1745"><receiver><data_method_call method_name="deepCopy" super="false" stmt_handle="1746"><receiver><self/></receiver></data_method_call></receiver><argument><variable name="S"/></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="-" native="false"><return_type>Set</return_type><argument name="S" type="Set"/><local_variable name="R" type="CollectionElement"/><local_variable name="Subtraction" type="Set"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1747"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1748"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1749"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1750"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1751"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1752"><receiver><variable name="S"/></receiver><argument><constant type="string">"Set"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1753"><receiver><self/></receiver><argument><constant type="string">"Parameter of operator \"-\" for Set must be a Set"</constant></argument></data_method_call></then></if><assignment variable_name="Subtraction"><data_method_call method_name="clear" super="false" stmt_handle="1754"><receiver><new data_class="Set"/></receiver></data_method_call></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1755"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1756"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><data_method_call method_name="excludes" super="false" stmt_handle="1757"><receiver><variable name="S"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1758"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></condition><then><data_method_call method_name="add" super="false" stmt_handle="1759"><receiver><variable name="Subtraction"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1760"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1761"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="Subtraction"/></return></sequence_of_expressions></body_expression></data_method><data_method name="&gt;" native="false"><return_type>Boolean</return_type><argument name="S" type="Set"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1762"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1763"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1764"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1765"><receiver><variable name="S"/></receiver><argument><constant type="string">"Set"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1766"><receiver><self/></receiver><argument><constant type="string">"Parameter for operator \"&lt;\" of Set must be a Set"</constant></argument></data_method_call></then></if><return><unary_operation operator="!" stmt_handle="1767"><operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="1768"><left_operand><self/></left_operand><right_operand><variable name="S"/></right_operand></binary_operation></sequence_of_expressions></operand></unary_operation></return></sequence_of_expressions></body_expression></data_method><data_method name="&gt;=" native="false"><return_type>Boolean</return_type><argument name="S" type="Set"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1769"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1770"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1771"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1772"><receiver><variable name="S"/></receiver><argument><constant type="string">"Set"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1773"><receiver><self/></receiver><argument><constant type="string">"Parameter for operator \"&lt;=\" of Set must be a Set"</constant></argument></data_method_call></then></if><return><data_method_call method_name="includesAll" super="false" stmt_handle="1774"><receiver><self/></receiver><argument><variable name="S"/></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="&lt;" native="false"><return_type>Boolean</return_type><argument name="S" type="Set"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1775"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1776"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1777"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1778"><receiver><variable name="S"/></receiver><argument><constant type="string">"Set"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1779"><receiver><self/></receiver><argument><constant type="string">"Parameter for operator \"&lt;\" of Set must be a Set"</constant></argument></data_method_call></then></if><return><unary_operation operator="!" stmt_handle="1780"><operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="1781"><left_operand><self/></left_operand><right_operand><variable name="S"/></right_operand></binary_operation></sequence_of_expressions></operand></unary_operation></return></sequence_of_expressions></body_expression></data_method><data_method name="&lt;=" native="false"><return_type>Boolean</return_type><argument name="S" type="Set"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1782"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1783"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1784"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1785"><receiver><variable name="S"/></receiver><argument><constant type="string">"Set"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1786"><receiver><self/></receiver><argument><constant type="string">"Parameter for operator \"&lt;=\" of Set must be a Set"</constant></argument></data_method_call></then></if><return><data_method_call method_name="includesAll" super="false" stmt_handle="1787"><receiver><variable name="S"/></receiver><argument><self/></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Sequence" native="false"><super_class>Collection</super_class><data_method name="iterator" native="false"><return_type>SequenceIterator</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1788"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1789"><receiver><self/></receiver></data_method_call></then></if><return><data_method_call method_name="referringTo" super="false" stmt_handle="1790"><receiver><new data_class="SequenceIterator"/></receiver><argument><self/></argument><argument><data_method_call method_name="next" super="false" stmt_handle="1791"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="fromArray" native="false"><return_type>Sequence</return_type><argument name="A" type="Array"/><local_variable name="I" type="Integer"/><body_expression><sequence_of_expressions><data_method_call method_name="clear" super="false" stmt_handle="1792"><receiver><self/></receiver></data_method_call><assignment variable_name="I"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="1793"><left_operand><variable name="I"/></left_operand><right_operand><data_method_call method_name="size" super="false" stmt_handle="1794"><receiver><variable name="A"/></receiver></data_method_call></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="append" super="false" stmt_handle="1795"><receiver><self/></receiver><argument><data_method_call method_name="at" super="false" stmt_handle="1796"><receiver><variable name="A"/></receiver><argument><variable name="I"/></argument></data_method_call></argument></data_method_call><assignment variable_name="I"><binary_operation operator="+" stmt_handle="1797"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="isUnique" native="false"><return_type>Boolean</return_type><local_variable name="R" type="CollectionElement"/><local_variable name="Q" type="CollectionElement"/><local_variable name="NF" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1798"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1799"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><if><condition><binary_operation operator="&gt;" stmt_handle="1800"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1801"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1802"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1803"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="Q"><data_method_call method_name="next" super="false" stmt_handle="1804"><receiver><variable name="R"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1805"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1806"><left_operand><variable name="Q"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="NF"><binary_operation operator="!=" stmt_handle="1807"><left_operand><data_method_call method_name="element" super="false" stmt_handle="1808"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="element" super="false" stmt_handle="1809"><receiver><variable name="Q"/></receiver></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="Q"><data_method_call method_name="next" super="false" stmt_handle="1810"><receiver><variable name="Q"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1811"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while></sequence_of_expressions></then></if><return><variable name="NF"/></return></sequence_of_expressions></body_expression></data_method><data_method name="count" native="false"><return_type>Integer</return_type><argument name="O" type="Object"/><local_variable name="R" type="CollectionElement"/><local_variable name="C" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1812"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1813"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="C"><constant type="integer">0</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1814"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1815"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1816"><left_operand><data_method_call method_name="element" super="false" stmt_handle="1817"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="O"/></right_operand></binary_operation></condition><then><assignment variable_name="C"><binary_operation operator="+" stmt_handle="1818"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1819"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><return><variable name="C"/></return></sequence_of_expressions></body_expression></data_method><data_method name="append" native="false"><return_type>Sequence</return_type><argument name="O" type="Object"/><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1820"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1821"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="setElement" super="false" stmt_handle="1822"><receiver><data_method_call method_name="setRemoved" super="false" stmt_handle="1823"><receiver><data_method_call method_name="setCount" super="false" stmt_handle="1824"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="1825"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="1826"><receiver><new data_class="CollectionElement"/></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1827"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="integer">1</constant></argument></data_method_call></receiver><argument><constant type="boolean">false</constant></argument></data_method_call></receiver><argument><variable name="O"/></argument></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="1828"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1829"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1830"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="1831"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="prepend" native="false"><return_type>Sequence</return_type><argument name="O" type="Object"/><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1832"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1833"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="setElement" super="false" stmt_handle="1834"><receiver><data_method_call method_name="setRemoved" super="false" stmt_handle="1835"><receiver><data_method_call method_name="setCount" super="false" stmt_handle="1836"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="1837"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="1838"><receiver><new data_class="CollectionElement"/></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="1839"><receiver><variable name="Root"/></receiver></data_method_call></argument></data_method_call></receiver><argument><variable name="Root"/></argument></data_method_call></receiver><argument><constant type="integer">1</constant></argument></data_method_call></receiver><argument><constant type="boolean">false</constant></argument></data_method_call></receiver><argument><variable name="O"/></argument></data_method_call></assignment><data_method_call method_name="setPrevious" super="false" stmt_handle="1840"><receiver><data_method_call method_name="next" super="false" stmt_handle="1841"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1842"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="1843"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="putAt" native="false"><return_type>Sequence</return_type><argument name="I" type="Integer"/><argument name="O" type="Object"/><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1844"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1845"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1846"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1847"><left_operand><variable name="I"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1848"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1849"><receiver><variable name="I"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1850"><receiver><self/></receiver><argument><constant type="string">"First parameter for method \"putAt\" of Sequence must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="1851"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1853"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="1854"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="1855"><left_operand><variable name="I"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1856"><receiver><self/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="1857"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1858"><receiver><constant type="string">"First parameter for method \"putAt\" of Sequence must be in [1, "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="1859"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1860"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1861"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1862"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1863"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1864"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="I"><binary_operation operator="-" stmt_handle="1865"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><data_method_call method_name="setElement" super="false" stmt_handle="1866"><receiver><variable name="R"/></receiver><argument><variable name="O"/></argument></data_method_call></sequence_of_expressions></then><else><data_method_call method_name="error" super="false" stmt_handle="1852"><receiver><self/></receiver><argument><constant type="string">"Method \"putAt\" of Sequence requires a Sequence of positive size"</constant></argument></data_method_call></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="insertAt" native="false"><return_type>Sequence</return_type><argument name="I" type="Integer"/><argument name="O" type="Object"/><local_variable name="R" type="CollectionElement"/><local_variable name="N" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1867"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1868"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1869"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1870"><left_operand><variable name="I"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1871"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1872"><receiver><variable name="I"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1873"><receiver><self/></receiver><argument><constant type="string">"First parameter for method \"insertAt\" of Sequence must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="1874"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1876"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="1877"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="1878"><left_operand><variable name="I"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1879"><receiver><self/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="1880"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1881"><receiver><constant type="string">"First parameter for method \"insertAt\" of Sequence must be in [1, "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="1882"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1883"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1884"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1885"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1886"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1887"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="I"><binary_operation operator="-" stmt_handle="1888"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><assignment variable_name="N"><data_method_call method_name="setElement" super="false" stmt_handle="1889"><receiver><data_method_call method_name="setRemoved" super="false" stmt_handle="1890"><receiver><data_method_call method_name="setCount" super="false" stmt_handle="1891"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="1892"><receiver><data_method_call method_name="setNext" super="false" stmt_handle="1893"><receiver><new data_class="CollectionElement"/></receiver><argument><variable name="R"/></argument></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1894"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="integer">1</constant></argument></data_method_call></receiver><argument><constant type="boolean">false</constant></argument></data_method_call></receiver><argument><variable name="O"/></argument></data_method_call></assignment><data_method_call method_name="setPrevious" super="false" stmt_handle="1895"><receiver><variable name="R"/></receiver><argument><variable name="N"/></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1896"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1897"><receiver><variable name="N"/></receiver></data_method_call></receiver><argument><variable name="N"/></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="1898"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then><else><data_method_call method_name="error" super="false" stmt_handle="1875"><receiver><self/></receiver><argument><constant type="string">"Method \"insertAt\" of Sequence requires a Sequence of positive size"</constant></argument></data_method_call></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="at" native="false"><return_type>Object</return_type><argument name="I" type="Integer"/><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1899"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1900"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1901"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1902"><left_operand><variable name="I"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1903"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1904"><receiver><variable name="I"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1905"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"at\" of Sequence must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="1906"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1908"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="1909"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="1910"><left_operand><variable name="I"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1911"><receiver><self/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="1912"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1913"><receiver><constant type="string">"Parameter for method \"at\" of Sequence must be in [1, "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="1914"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1915"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1916"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1917"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1918"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1919"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="I"><binary_operation operator="-" stmt_handle="1920"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><return><data_method_call method_name="element" super="false" stmt_handle="1921"><receiver><variable name="R"/></receiver></data_method_call></return></sequence_of_expressions></then><else><sequence_of_expressions><data_method_call method_name="error" super="false" stmt_handle="1907"><receiver><self/></receiver><argument><constant type="string">"Method \"at\" of Sequence requires a Sequence of positive size"</constant></argument></data_method_call><return><nil/></return></sequence_of_expressions></else></if></sequence_of_expressions></body_expression></data_method><data_method name="first" native="false"><return_type>Object</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1922"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1923"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="=" stmt_handle="1924"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><return><nil/></return></then><else><return><data_method_call method_name="element" super="false" stmt_handle="1925"><receiver><data_method_call method_name="next" super="false" stmt_handle="1926"><receiver><variable name="Root"/></receiver></data_method_call></receiver></data_method_call></return></else></if></sequence_of_expressions></body_expression></data_method><data_method name="last" native="false"><return_type>Object</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1927"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1928"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="=" stmt_handle="1929"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><return><nil/></return></then><else><return><data_method_call method_name="element" super="false" stmt_handle="1930"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1931"><receiver><variable name="Root"/></receiver></data_method_call></receiver></data_method_call></return></else></if></sequence_of_expressions></body_expression></data_method><data_method name="removeAt" native="false"><return_type>Sequence</return_type><argument name="I" type="Integer"/><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1932"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1933"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1934"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1935"><left_operand><variable name="I"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1936"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1937"><receiver><variable name="I"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1938"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"removeAt\" of Sequence must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="1939"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="1941"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="1942"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="1943"><left_operand><variable name="I"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1944"><receiver><self/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="1945"><receiver><data_method_call method_name="concat" super="false" stmt_handle="1946"><receiver><constant type="string">"Parameter for method \"removeAt\" of Sequence must be in [1, "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="1947"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1948"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="1949"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1950"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="1951"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1952"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="I"><binary_operation operator="-" stmt_handle="1953"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><data_method_call method_name="setRemoved" super="false" stmt_handle="1954"><receiver><variable name="R"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1955"><receiver><data_method_call method_name="next" super="false" stmt_handle="1956"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="1957"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1958"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1959"><receiver><variable name="R"/></receiver></data_method_call></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="1960"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="-" stmt_handle="1961"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then><else><data_method_call method_name="error" super="false" stmt_handle="1940"><receiver><self/></receiver><argument><constant type="string">"Method \"removeAt\" of Sequence requires a Sequence of positive size"</constant></argument></data_method_call></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="removeFirst" native="false"><return_type>Sequence</return_type><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1962"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1963"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="1964"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="1965"><receiver><data_method_call method_name="setRemoved" super="false" stmt_handle="1966"><receiver><data_method_call method_name="next" super="false" stmt_handle="1967"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><constant type="boolean">true</constant></argument></data_method_call></receiver></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="1968"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="1969"><receiver><variable name="R"/></receiver><argument><variable name="Root"/></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="-" stmt_handle="1970"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="removeLast" native="false"><return_type>Sequence</return_type><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1971"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1972"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="1973"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="previous" super="false" stmt_handle="1974"><receiver><data_method_call method_name="setRemoved" super="false" stmt_handle="1975"><receiver><data_method_call method_name="previous" super="false" stmt_handle="1976"><receiver><variable name="Root"/></receiver></data_method_call></receiver><argument><constant type="boolean">true</constant></argument></data_method_call></receiver></data_method_call></assignment><data_method_call method_name="setPrevious" super="false" stmt_handle="1977"><receiver><variable name="Root"/></receiver><argument><variable name="R"/></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="1978"><receiver><variable name="R"/></receiver><argument><variable name="Root"/></argument></data_method_call><assignment variable_name="Size"><binary_operation operator="-" stmt_handle="1979"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="concat" native="false"><return_type>Sequence</return_type><argument name="S" type="Sequence"/><local_variable name="I" type="SequenceIterator"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1980"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1981"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="1982"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="1983"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="1984"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="1985"><receiver><variable name="S"/></receiver><argument><constant type="string">"Sequence"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="1986"><receiver><self/></receiver><argument><constant type="string">"Parameter of method \"concat\" of Sequence must be a Sequence"</constant></argument></data_method_call></then></if><assignment variable_name="I"><data_method_call method_name="iterator" super="false" stmt_handle="1987"><receiver><variable name="S"/></receiver></data_method_call></assignment><while><condition><unary_operation operator="!" stmt_handle="1988"><operand><sequence_of_expressions><data_method_call method_name="isDone" super="false" stmt_handle="1989"><receiver><variable name="I"/></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></condition><body><sequence_of_expressions><data_method_call method_name="append" super="false" stmt_handle="1990"><receiver><self/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="1991"><receiver><variable name="I"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="advance" super="false" stmt_handle="1992"><receiver><variable name="I"/></receiver></data_method_call></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="reverse" native="false"><return_type>Sequence</return_type><local_variable name="R" type="CollectionElement"/><local_variable name="Q" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="1993"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="1994"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="&gt;" stmt_handle="1995"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="R"><variable name="Root"/></assignment><assignment variable_name="Q"><data_method_call method_name="previous" super="false" stmt_handle="1996"><receiver><variable name="R"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="1997"><left_operand><variable name="Q"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="setPrevious" super="false" stmt_handle="1998"><receiver><variable name="R"/></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="1999"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="2000"><receiver><variable name="R"/></receiver><argument><variable name="Q"/></argument></data_method_call><assignment variable_name="R"><variable name="Q"/></assignment><assignment variable_name="Q"><data_method_call method_name="previous" super="false" stmt_handle="2001"><receiver><variable name="Q"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><data_method_call method_name="setPrevious" super="false" stmt_handle="2002"><receiver><variable name="R"/></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="2003"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="2004"><receiver><variable name="R"/></receiver><argument><variable name="Q"/></argument></data_method_call></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="splice" native="false"><return_type>Sequence</return_type><argument name="I" type="Integer"/><argument name="S" type="Sequence"/><local_variable name="R" type="CollectionElement"/><local_variable name="Q" type="CollectionElement"/><local_variable name="X" type="CollectionElement"/><local_variable name="Y" type="SequenceIterator"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="2005"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="2006"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="2007"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2008"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2009"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2010"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2011"><receiver><variable name="S"/></receiver><argument><constant type="string">"Sequence"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2012"><receiver><self/></receiver><argument><constant type="string">"Second parameter of method \"splice\" of Sequence must be a Sequence"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2013"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2014"><left_operand><variable name="I"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2015"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2016"><receiver><variable name="I"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2017"><receiver><self/></receiver><argument><constant type="string">"First parameter of method \"splice\" of Sequence must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2018"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="2019"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="2020"><left_operand><variable name="I"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2021"><receiver><self/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2022"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2023"><receiver><constant type="string">"First parameter for method \"splice\" of Sequence must be in [1, "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2024"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2025"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="I"><binary_operation operator="-" stmt_handle="2026"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><while><condition><binary_operation operator="!=" stmt_handle="2027"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2028"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="I"><binary_operation operator="-" stmt_handle="2029"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><assignment variable_name="Q"><data_method_call method_name="next" super="false" stmt_handle="2030"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="Y"><data_method_call method_name="iterator" super="false" stmt_handle="2031"><receiver><variable name="S"/></receiver></data_method_call></assignment><while><condition><unary_operation operator="!" stmt_handle="2032"><operand><sequence_of_expressions><data_method_call method_name="isDone" super="false" stmt_handle="2033"><receiver><variable name="Y"/></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></condition><body><sequence_of_expressions><assignment variable_name="X"><data_method_call method_name="setElement" super="false" stmt_handle="2034"><receiver><data_method_call method_name="setRemoved" super="false" stmt_handle="2035"><receiver><data_method_call method_name="setCount" super="false" stmt_handle="2036"><receiver><data_method_call method_name="setPrevious" super="false" stmt_handle="2037"><receiver><new data_class="CollectionElement"/></receiver><argument><variable name="R"/></argument></data_method_call></receiver><argument><constant type="integer">1</constant></argument></data_method_call></receiver><argument><constant type="boolean">false</constant></argument></data_method_call></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="2038"><receiver><variable name="Y"/></receiver></data_method_call></argument></data_method_call></assignment><data_method_call method_name="setNext" super="false" stmt_handle="2039"><receiver><variable name="R"/></receiver><argument><variable name="X"/></argument></data_method_call><assignment variable_name="R"><variable name="X"/></assignment><assignment variable_name="Size"><binary_operation operator="+" stmt_handle="2040"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><data_method_call method_name="advance" super="false" stmt_handle="2041"><receiver><variable name="Y"/></receiver></data_method_call></sequence_of_expressions></body></while><data_method_call method_name="setNext" super="false" stmt_handle="2042"><receiver><variable name="X"/></receiver><argument><variable name="Q"/></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="2043"><receiver><variable name="Q"/></receiver><argument><variable name="X"/></argument></data_method_call></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="swap" native="false"><return_type>Sequence</return_type><argument name="I" type="Integer"/><argument name="J" type="Integer"/><local_variable name="R" type="CollectionElement"/><local_variable name="Q" type="CollectionElement"/><local_variable name="NF" type="Boolean"/><local_variable name="C" type="Integer"/><local_variable name="O" type="Object"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="2044"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="2045"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="&amp;" stmt_handle="2046"><left_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="2047"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2048"><left_operand><variable name="I"/></left_operand><right_operand><variable name="J"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2049"><left_operand><binary_operation operator="|" stmt_handle="2050"><left_operand><binary_operation operator="|" stmt_handle="2051"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2052"><left_operand><variable name="I"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2053"><left_operand><variable name="J"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2054"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2055"><receiver><variable name="I"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2056"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2057"><receiver><variable name="J"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2058"><receiver><self/></receiver><argument><constant type="string">"Parameters of method \"splice\" of Sequence must be Integers"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2059"><left_operand><binary_operation operator="|" stmt_handle="2060"><left_operand><binary_operation operator="|" stmt_handle="2061"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="2062"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="2063"><left_operand><variable name="I"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="2064"><left_operand><variable name="J"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="2065"><left_operand><variable name="J"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2066"><receiver><self/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2067"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2068"><receiver><constant type="string">"Parameters for method \"swap\" of Sequence must be in [1, "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2069"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></argument></data_method_call></then></if><if><condition><binary_operation operator="&gt;" stmt_handle="2070"><left_operand><variable name="I"/></left_operand><right_operand><variable name="J"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="C"><variable name="I"/></assignment><assignment variable_name="I"><variable name="J"/></assignment><assignment variable_name="J"><variable name="C"/></assignment></sequence_of_expressions></then></if><assignment variable_name="C"><constant type="integer">1</constant></assignment><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2071"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><variable name="NF"/></condition><body><if><condition><binary_operation operator="=" stmt_handle="2072"><left_operand><variable name="C"/></left_operand><right_operand><variable name="I"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="NF"><constant type="boolean">false</constant></assignment><assignment variable_name="O"><data_method_call method_name="element" super="false" stmt_handle="2075"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></then><else><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2073"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="C"><binary_operation operator="+" stmt_handle="2074"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></else></if></body></while><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><assignment variable_name="Q"><data_method_call method_name="next" super="false" stmt_handle="2076"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="C"><binary_operation operator="+" stmt_handle="2077"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><while><condition><variable name="NF"/></condition><body><if><condition><binary_operation operator="=" stmt_handle="2078"><left_operand><variable name="C"/></left_operand><right_operand><variable name="J"/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="NF"><constant type="boolean">false</constant></assignment><data_method_call method_name="setElement" super="false" stmt_handle="2081"><receiver><variable name="R"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="2082"><receiver><variable name="Q"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setElement" super="false" stmt_handle="2083"><receiver><variable name="Q"/></receiver><argument><variable name="O"/></argument></data_method_call></sequence_of_expressions></then><else><sequence_of_expressions><assignment variable_name="Q"><data_method_call method_name="next" super="false" stmt_handle="2079"><receiver><variable name="Q"/></receiver></data_method_call></assignment><assignment variable_name="C"><binary_operation operator="+" stmt_handle="2080"><left_operand><variable name="C"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></else></if></body></while></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="subSequence" native="false"><return_type>Sequence</return_type><argument name="I" type="Integer"/><argument name="L" type="Integer"/><local_variable name="R" type="CollectionElement"/><local_variable name="S" type="Sequence"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="2084"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="2085"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="S"><data_method_call method_name="clear" super="false" stmt_handle="2086"><receiver><new data_class="Sequence"/></receiver></data_method_call></assignment><if><condition><binary_operation operator="!=" stmt_handle="2087"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2088"><left_operand><binary_operation operator="|" stmt_handle="2089"><left_operand><binary_operation operator="|" stmt_handle="2090"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2091"><left_operand><variable name="I"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2092"><left_operand><variable name="L"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2093"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2094"><receiver><variable name="I"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2095"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2096"><receiver><variable name="L"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2097"><receiver><self/></receiver><argument><constant type="string">"Parameters of method \"subSequence\" of Sequence must be Integers"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&lt;=" stmt_handle="2098"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2099"><receiver><self/></receiver><argument><constant type="string">"First parameter of method \"subSequence\" of Sequence must be positive"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&lt;" stmt_handle="2100"><left_operand><variable name="L"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2101"><receiver><self/></receiver><argument><constant type="string">"Second parameter of method \"subSequence\" of Sequence must not be negative"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&gt;" stmt_handle="2102"><left_operand><binary_operation operator="+" stmt_handle="2103"><left_operand><variable name="I"/></left_operand><right_operand><variable name="L"/></right_operand></binary_operation></left_operand><right_operand><binary_operation operator="+" stmt_handle="2104"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2105"><receiver><self/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2106"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2107"><receiver><constant type="string">"Sum of parameters for method \"subSequence\" of Sequence must be in [1, "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2108"><receiver><sequence_of_expressions><binary_operation operator="+" stmt_handle="2109"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2110"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="2111"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2112"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2113"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2114"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="I"><binary_operation operator="-" stmt_handle="2115"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><while><condition><binary_operation operator="&amp;" stmt_handle="2116"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2117"><left_operand><variable name="L"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2118"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="append" super="false" stmt_handle="2119"><receiver><variable name="S"/></receiver><argument><data_method_call method_name="element" super="false" stmt_handle="2120"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2121"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="L"><binary_operation operator="-" stmt_handle="2122"><left_operand><variable name="L"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while></sequence_of_expressions></then></if><return><variable name="S"/></return></sequence_of_expressions></body_expression></data_method><data_method name="find" native="false"><return_type>Integer</return_type><argument name="I" type="Integer"/><argument name="O" type="Object"/><local_variable name="R" type="CollectionElement"/><local_variable name="NF" type="Boolean"/><local_variable name="Index" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="2123"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="2124"><receiver><self/></receiver></data_method_call></then></if><assignment variable_name="Index"><constant type="integer">0</constant></assignment><if><condition><binary_operation operator="!=" stmt_handle="2125"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2126"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2127"><left_operand><variable name="I"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2128"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2129"><receiver><variable name="I"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2130"><receiver><self/></receiver><argument><constant type="string">"First parameter for method \"find\" of Sequence must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2131"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="2132"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="2133"><left_operand><variable name="I"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2134"><receiver><self/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2135"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2136"><receiver><constant type="string">"First paramete for method \"find\" of Sequence must be in [1, "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2137"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2138"><receiver><variable name="Root"/></receiver></data_method_call></assignment><assignment variable_name="NF"><constant type="boolean">true</constant></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="2139"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2140"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2141"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2142"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="Index"><binary_operation operator="+" stmt_handle="2143"><left_operand><variable name="Index"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><assignment variable_name="I"><binary_operation operator="-" stmt_handle="2144"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><while><condition><binary_operation operator="&amp;" stmt_handle="2145"><left_operand><variable name="NF"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2146"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="2147"><left_operand><data_method_call method_name="element" super="false" stmt_handle="2148"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="O"/></right_operand></binary_operation></condition><then><assignment variable_name="NF"><constant type="boolean">false</constant></assignment></then></if><assignment variable_name="Index"><binary_operation operator="+" stmt_handle="2149"><left_operand><variable name="Index"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2150"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><if><condition><variable name="NF"/></condition><then><assignment variable_name="Index"><constant type="integer">0</constant></assignment></then></if></sequence_of_expressions></then></if><return><variable name="Index"/></return></sequence_of_expressions></body_expression></data_method><data_method name="iteratorAt" native="false"><return_type>SequenceIterator</return_type><argument name="I" type="Integer"/><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="2151"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="2152"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="!=" stmt_handle="2153"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2155"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2156"><left_operand><variable name="I"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2157"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2158"><receiver><variable name="I"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2159"><receiver><self/></receiver><argument><constant type="string">"Parameter for method \"iteratorTo\" of Sequence must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2160"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="2161"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="2162"><left_operand><variable name="I"/></left_operand><right_operand><variable name="Size"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2163"><receiver><self/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2164"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2165"><receiver><constant type="string">"Parameter for method \"iteratorTo\" of Sequence must be in [1, "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2166"><receiver><variable name="Size"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2167"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="&amp;" stmt_handle="2168"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2169"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2170"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2171"><receiver><variable name="R"/></receiver></data_method_call></assignment><assignment variable_name="I"><binary_operation operator="-" stmt_handle="2172"><left_operand><variable name="I"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><return><data_method_call method_name="referringTo" super="false" stmt_handle="2173"><receiver><new data_class="SequenceIterator"/></receiver><argument><self/></argument><argument><variable name="R"/></argument></data_method_call></return></sequence_of_expressions></then><else><return><data_method_call method_name="referringTo" super="false" stmt_handle="2154"><receiver><new data_class="SequenceIterator"/></receiver><argument><self/></argument><argument><variable name="Root"/></argument></data_method_call></return></else></if></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="PrintOut" type="String"/><local_variable name="R" type="CollectionElement"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="2174"><left_operand><variable name="Root"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="clear" super="false" stmt_handle="2175"><receiver><self/></receiver></data_method_call></then></if><if><condition><binary_operation operator="=" stmt_handle="2176"><left_operand><variable name="Size"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><assignment variable_name="PrintOut"><constant type="string">"Empty Sequence"</constant></assignment></then><else><sequence_of_expressions><assignment variable_name="PrintOut"><constant type="string">"Sequence{"</constant></assignment><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2177"><receiver><variable name="Root"/></receiver></data_method_call></assignment><while><condition><binary_operation operator="!=" stmt_handle="2178"><left_operand><variable name="R"/></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="concat" super="false" stmt_handle="2179"><receiver><variable name="PrintOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2180"><receiver><variable name="R"/></receiver></data_method_call></argument></data_method_call><if><condition><binary_operation operator="!=" stmt_handle="2181"><left_operand><data_method_call method_name="next" super="false" stmt_handle="2182"><receiver><variable name="R"/></receiver></data_method_call></left_operand><right_operand><variable name="Root"/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="2183"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">", "</constant></argument></data_method_call></then></if><assignment variable_name="R"><data_method_call method_name="next" super="false" stmt_handle="2184"><receiver><variable name="R"/></receiver></data_method_call></assignment></sequence_of_expressions></body></while><data_method_call method_name="concat" super="false" stmt_handle="2185"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"}"</constant></argument></data_method_call></sequence_of_expressions></else></if><return><variable name="PrintOut"/></return></sequence_of_expressions></body_expression></data_method><data_method name="+" native="false"><return_type>Sequence</return_type><argument name="S" type="Sequence"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2186"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2187"><left_operand><variable name="S"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2188"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2189"><receiver><variable name="S"/></receiver><argument><constant type="string">"Sequence"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2190"><receiver><self/></receiver><argument><constant type="string">"Parameter of operator \"+\" of Sequence must be a Sequence"</constant></argument></data_method_call></then></if><return><data_method_call method_name="concat" super="false" stmt_handle="2191"><receiver><data_method_call method_name="deepCopy" super="false" stmt_handle="2192"><receiver><self/></receiver></data_method_call></receiver><argument><variable name="S"/></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Iterator" native="false"><super_class>Object</super_class><instance_variable name="ReferredStructure" type="Object"/><instance_variable name="ReferredElement" type="Element"/><instance_variable name="StructureType" type="String"/><data_method name="isDone" native="false"><return_type>Boolean</return_type><body_expression><return><binary_operation operator="=" stmt_handle="2193"><left_operand><variable name="ReferredElement"/></left_operand><right_operand><data_method_call method_name="root" super="false" stmt_handle="2194"><receiver><variable name="ReferredStructure"/></receiver></data_method_call></right_operand></binary_operation></return></body_expression></data_method><data_method name="advance" native="false"><return_type>Iterator</return_type><body_expression><sequence_of_expressions><if><condition><unary_operation operator="!" stmt_handle="2195"><operand><sequence_of_expressions><data_method_call method_name="isDone" super="false" stmt_handle="2196"><receiver><self/></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></condition><then><assignment variable_name="ReferredElement"><data_method_call method_name="next" super="false" stmt_handle="2197"><receiver><variable name="ReferredElement"/></receiver></data_method_call></assignment></then></if><if><condition><data_method_call method_name="removed" super="false" stmt_handle="2198"><receiver><variable name="ReferredElement"/></receiver></data_method_call></condition><then><return><data_method_call method_name="advance" super="false" stmt_handle="2199"><receiver><self/></receiver></data_method_call></return></then><else><return><self/></return></else></if></sequence_of_expressions></body_expression></data_method><data_method name="remove" native="false"><return_type>Iterator</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="&amp;" stmt_handle="2200"><left_operand><data_method_call method_name="not" super="false" stmt_handle="2201"><receiver><data_method_call method_name="removed" super="false" stmt_handle="2202"><receiver><variable name="ReferredElement"/></receiver></data_method_call></receiver></data_method_call></left_operand><right_operand><unary_operation operator="!" stmt_handle="2203"><operand><sequence_of_expressions><data_method_call method_name="isDone" super="false" stmt_handle="2204"><receiver><self/></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></right_operand></binary_operation></condition><then><sequence_of_expressions><data_method_call method_name="setNext" super="false" stmt_handle="2205"><receiver><data_method_call method_name="previous" super="false" stmt_handle="2206"><receiver><variable name="ReferredElement"/></receiver></data_method_call></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="2207"><receiver><variable name="ReferredElement"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="2208"><receiver><data_method_call method_name="next" super="false" stmt_handle="2209"><receiver><variable name="ReferredElement"/></receiver></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="2210"><receiver><variable name="ReferredElement"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setRemoved" super="false" stmt_handle="2211"><receiver><variable name="ReferredElement"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><data_method_call method_name="resize" super="false" stmt_handle="2212"><receiver><variable name="ReferredStructure"/></receiver><argument><binary_operation operator="-" stmt_handle="2213"><left_operand><data_method_call method_name="size" super="false" stmt_handle="2214"><receiver><variable name="ReferredStructure"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></argument></data_method_call></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="Out" type="String"/><body_expression><sequence_of_expressions><assignment variable_name="Out"><data_method_call method_name="concat" super="false" stmt_handle="2215"><receiver><constant type="string">"Iterator on "</constant></receiver><argument><variable name="StructureType"/></argument></data_method_call></assignment><if><condition><binary_operation operator="!=" stmt_handle="2216"><left_operand><variable name="ReferredElement"/></left_operand><right_operand><data_method_call method_name="root" super="false" stmt_handle="2217"><receiver><variable name="ReferredStructure"/></receiver></data_method_call></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="2218"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2219"><receiver><variable name="Out"/></receiver><argument><constant type="string">" to "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2220"><receiver><variable name="ReferredElement"/></receiver></data_method_call></argument></data_method_call></then></if><return><variable name="Out"/></return></sequence_of_expressions></body_expression></data_method><data_method name="referringTo" native="false"><return_type>Iterator</return_type><argument name="S" type="Object"/><argument name="E" type="Element"/><argument name="T" type="String"/><body_expression><sequence_of_expressions><assignment variable_name="ReferredStructure"><variable name="S"/></assignment><assignment variable_name="ReferredElement"><variable name="E"/></assignment><assignment variable_name="StructureType"><variable name="T"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="key" native="false"><return_type>Object</return_type><body_expression><sequence_of_expressions><data_method_call method_name="error" super="false" stmt_handle="2221"><receiver><self/></receiver><argument><binary_operation operator="+" stmt_handle="2222"><left_operand><constant type="string">"Method \"key\"is not defined on iterator for "</constant></left_operand><right_operand><variable name="StructureType"/></right_operand></binary_operation></argument></data_method_call><return><nil/></return></sequence_of_expressions></body_expression></data_method><data_method name="value" native="false"><return_type>Object</return_type><body_expression><sequence_of_expressions><data_method_call method_name="error" super="false" stmt_handle="2223"><receiver><self/></receiver><argument><binary_operation operator="+" stmt_handle="2224"><left_operand><constant type="string">"Method \"value\" is not defined on iterator for "</constant></left_operand><right_operand><variable name="StructureType"/></right_operand></binary_operation></argument></data_method_call><return><nil/></return></sequence_of_expressions></body_expression></data_method><data_method name="element" native="false"><return_type>Object</return_type><body_expression><sequence_of_expressions><data_method_call method_name="error" super="false" stmt_handle="2225"><receiver><self/></receiver><argument><binary_operation operator="+" stmt_handle="2226"><left_operand><constant type="string">"Method \"element\" is not defined on iterator for "</constant></left_operand><right_operand><variable name="StructureType"/></right_operand></binary_operation></argument></data_method_call><return><nil/></return></sequence_of_expressions></body_expression></data_method><data_method name="reverse" native="false"><return_type>Object</return_type><body_expression><sequence_of_expressions><data_method_call method_name="error" super="false" stmt_handle="2227"><receiver><self/></receiver><argument><binary_operation operator="+" stmt_handle="2228"><left_operand><constant type="string">"Method \"reverse\" is not defined on iterator for "</constant></left_operand><right_operand><variable name="StructureType"/></right_operand></binary_operation></argument></data_method_call><return><nil/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="MapIterator" native="false"><super_class>Iterator</super_class><data_method name="key" native="false"><return_type>Object</return_type><body_expression><return><data_method_call method_name="key" super="false" stmt_handle="2229"><receiver><variable name="ReferredElement"/></receiver></data_method_call></return></body_expression></data_method><data_method name="value" native="false"><return_type>Object</return_type><body_expression><return><data_method_call method_name="value" super="false" stmt_handle="2230"><receiver><variable name="ReferredElement"/></receiver></data_method_call></return></body_expression></data_method><data_method name="referringTo" native="false"><return_type>Iterator</return_type><argument name="S" type="Object"/><argument name="E" type="Element"/><body_expression><sequence_of_expressions><assignment variable_name="ReferredStructure"><variable name="S"/></assignment><assignment variable_name="ReferredElement"><variable name="E"/></assignment><assignment variable_name="StructureType"><constant type="string">"Map"</constant></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="CollectionIterator" native="false"><super_class>Iterator</super_class><data_method name="element" native="false"><return_type>Object</return_type><body_expression><return><data_method_call method_name="element" super="false" stmt_handle="2231"><receiver><variable name="ReferredElement"/></receiver></data_method_call></return></body_expression></data_method></data_class><data_class name="BagIterator" native="false"><super_class>CollectionIterator</super_class><instance_variable name="Index" type="Integer"/><data_method name="advance" native="false"><return_type>BagIterator</return_type><body_expression><if><condition><unary_operation operator="!" stmt_handle="2232"><operand><sequence_of_expressions><data_method_call method_name="isDone" super="false" stmt_handle="2233"><receiver><self/></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></condition><then><sequence_of_expressions><assignment variable_name="Index"><binary_operation operator="-" stmt_handle="2234"><left_operand><variable name="Index"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><if><condition><binary_operation operator="=" stmt_handle="2235"><left_operand><variable name="Index"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="ReferredElement"><data_method_call method_name="next" super="false" stmt_handle="2236"><receiver><variable name="ReferredElement"/></receiver></data_method_call></assignment><assignment variable_name="Index"><data_method_call method_name="count" super="false" stmt_handle="2237"><receiver><variable name="ReferredElement"/></receiver></data_method_call></assignment></sequence_of_expressions></then></if><return><if><condition><binary_operation operator="|" stmt_handle="2238"><left_operand><sequence_of_expressions><data_method_call method_name="removed" super="false" stmt_handle="2239"><receiver><variable name="ReferredElement"/></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="2240"><left_operand><variable name="Index"/></left_operand><right_operand><data_method_call method_name="count" super="false" stmt_handle="2241"><receiver><variable name="ReferredElement"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="advance" super="false" stmt_handle="2242"><receiver><self/></receiver></data_method_call></then><else><self/></else></if></return></sequence_of_expressions></then><else><return><self/></return></else></if></body_expression></data_method><data_method name="remove" native="false"><return_type>BagIterator</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="&amp;" stmt_handle="2243"><left_operand><data_method_call method_name="not" super="false" stmt_handle="2244"><receiver><data_method_call method_name="removed" super="false" stmt_handle="2245"><receiver><variable name="ReferredElement"/></receiver></data_method_call></receiver></data_method_call></left_operand><right_operand><unary_operation operator="!" stmt_handle="2246"><operand><sequence_of_expressions><data_method_call method_name="isDone" super="false" stmt_handle="2247"><receiver><self/></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></right_operand></binary_operation></condition><then><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="2248"><left_operand><data_method_call method_name="count" super="false" stmt_handle="2249"><receiver><variable name="ReferredElement"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><data_method_call method_name="setRemoved" super="false" stmt_handle="2253"><receiver><variable name="ReferredElement"/></receiver><argument><constant type="boolean">true</constant></argument></data_method_call><data_method_call method_name="setNext" super="false" stmt_handle="2254"><receiver><data_method_call method_name="previous" super="false" stmt_handle="2255"><receiver><variable name="ReferredElement"/></receiver></data_method_call></receiver><argument><data_method_call method_name="next" super="false" stmt_handle="2256"><receiver><variable name="ReferredElement"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="setPrevious" super="false" stmt_handle="2257"><receiver><data_method_call method_name="next" super="false" stmt_handle="2258"><receiver><variable name="ReferredElement"/></receiver></data_method_call></receiver><argument><data_method_call method_name="previous" super="false" stmt_handle="2259"><receiver><variable name="ReferredElement"/></receiver></data_method_call></argument></data_method_call></sequence_of_expressions></then><else><data_method_call method_name="setCount" super="false" stmt_handle="2250"><receiver><variable name="ReferredElement"/></receiver><argument><binary_operation operator="-" stmt_handle="2251"><left_operand><data_method_call method_name="count" super="false" stmt_handle="2252"><receiver><variable name="ReferredElement"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></argument></data_method_call></else></if><data_method_call method_name="resize" super="false" stmt_handle="2260"><receiver><variable name="ReferredStructure"/></receiver><argument><binary_operation operator="-" stmt_handle="2261"><left_operand><data_method_call method_name="size" super="false" stmt_handle="2262"><receiver><variable name="ReferredStructure"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></argument></data_method_call></sequence_of_expressions></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="Out" type="String"/><body_expression><sequence_of_expressions><assignment variable_name="Out"><data_method_call method_name="concat" super="false" stmt_handle="2263"><receiver><constant type="string">"Iterator on "</constant></receiver><argument><variable name="StructureType"/></argument></data_method_call></assignment><if><condition><binary_operation operator="!=" stmt_handle="2264"><left_operand><variable name="ReferredElement"/></left_operand><right_operand><data_method_call method_name="root" super="false" stmt_handle="2265"><receiver><variable name="ReferredStructure"/></receiver></data_method_call></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="2266"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2267"><receiver><variable name="Out"/></receiver><argument><constant type="string">" to "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2268"><receiver><data_method_call method_name="element" super="false" stmt_handle="2269"><receiver><variable name="ReferredElement"/></receiver></data_method_call></receiver></data_method_call></argument></data_method_call></then></if><return><variable name="Out"/></return></sequence_of_expressions></body_expression></data_method><data_method name="referringTo" native="false"><return_type>Iterator</return_type><argument name="S" type="Object"/><argument name="E" type="Element"/><body_expression><sequence_of_expressions><assignment variable_name="ReferredStructure"><variable name="S"/></assignment><assignment variable_name="ReferredElement"><variable name="E"/></assignment><assignment variable_name="StructureType"><constant type="string">"Bag"</constant></assignment><assignment variable_name="Index"><data_method_call method_name="count" super="false" stmt_handle="2270"><receiver><variable name="ReferredElement"/></receiver></data_method_call></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="SequenceIterator" native="false"><super_class>CollectionIterator</super_class><instance_variable name="Reverse" type="Boolean"/><data_method name="first" native="false"><return_type>SequenceIterator</return_type><body_expression><return><data_method_call method_name="referringTo" super="false" stmt_handle="2271"><receiver><self/></receiver><argument><variable name="ReferredStructure"/></argument><argument><data_method_call method_name="next" super="false" stmt_handle="2272"><receiver><data_method_call method_name="root" super="false" stmt_handle="2273"><receiver><variable name="ReferredStructure"/></receiver></data_method_call></receiver></data_method_call></argument></data_method_call></return></body_expression></data_method><data_method name="last" native="false"><return_type>SequenceIterator</return_type><body_expression><return><data_method_call method_name="referringTo" super="false" stmt_handle="2274"><receiver><self/></receiver><argument><variable name="ReferredStructure"/></argument><argument><data_method_call method_name="previous" super="false" stmt_handle="2275"><receiver><data_method_call method_name="root" super="false" stmt_handle="2276"><receiver><variable name="ReferredStructure"/></receiver></data_method_call></receiver></data_method_call></argument></data_method_call></return></body_expression></data_method><data_method name="advance" native="false"><return_type>SequenceIterator</return_type><body_expression><sequence_of_expressions><if><condition><unary_operation operator="!" stmt_handle="2277"><operand><sequence_of_expressions><data_method_call method_name="isDone" super="false" stmt_handle="2278"><receiver><self/></receiver></data_method_call></sequence_of_expressions></operand></unary_operation></condition><then><if><condition><variable name="Reverse"/></condition><then><assignment variable_name="ReferredElement"><data_method_call method_name="previous" super="false" stmt_handle="2280"><receiver><variable name="ReferredElement"/></receiver></data_method_call></assignment></then><else><assignment variable_name="ReferredElement"><data_method_call method_name="next" super="false" stmt_handle="2279"><receiver><variable name="ReferredElement"/></receiver></data_method_call></assignment></else></if></then></if><return><if><condition><data_method_call method_name="removed" super="false" stmt_handle="2281"><receiver><variable name="ReferredElement"/></receiver></data_method_call></condition><then><data_method_call method_name="advance" super="false" stmt_handle="2282"><receiver><self/></receiver></data_method_call></then><else><self/></else></if></return></sequence_of_expressions></body_expression></data_method><data_method name="reverse" native="false"><return_type>SequenceIterator</return_type><body_expression><sequence_of_expressions><assignment variable_name="Reverse"><data_method_call method_name="not" super="false" stmt_handle="2283"><receiver><variable name="Reverse"/></receiver></data_method_call></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="referringTo" native="false"><return_type>Iterator</return_type><argument name="S" type="Object"/><argument name="E" type="Element"/><body_expression><sequence_of_expressions><assignment variable_name="ReferredStructure"><variable name="S"/></assignment><assignment variable_name="ReferredElement"><variable name="E"/></assignment><assignment variable_name="StructureType"><constant type="string">"Sequence"</constant></assignment><assignment variable_name="Reverse"><constant type="boolean">false</constant></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Element" native="false"><super_class>Object</super_class><instance_variable name="Next" type="Element"/><instance_variable name="Previous" type="Element"/><data_method name="next" native="false"><return_type>Element</return_type><body_expression><return><variable name="Next"/></return></body_expression></data_method><data_method name="previous" native="false"><return_type>Element</return_type><body_expression><return><variable name="Previous"/></return></body_expression></data_method><data_method name="setNext" native="false"><return_type>Element</return_type><argument name="E" type="Element"/><body_expression><sequence_of_expressions><assignment variable_name="Next"><variable name="E"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setPrevious" native="false"><return_type>Element</return_type><argument name="E" type="Element"/><body_expression><sequence_of_expressions><assignment variable_name="Previous"><variable name="E"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="MapElement" native="false"><super_class>Element</super_class><instance_variable name="Key" type="Object"/><instance_variable name="Value" type="Object"/><instance_variable name="Removed" type="Boolean"/><data_method name="key" native="false"><return_type>Object</return_type><body_expression><return><variable name="Key"/></return></body_expression></data_method><data_method name="value" native="false"><return_type>Object</return_type><body_expression><return><variable name="Value"/></return></body_expression></data_method><data_method name="removed" native="false"><return_type>Boolean</return_type><body_expression><return><variable name="Removed"/></return></body_expression></data_method><data_method name="setKey" native="false"><return_type>MapElement</return_type><argument name="K" type="Object"/><body_expression><sequence_of_expressions><assignment variable_name="Key"><variable name="K"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setValue" native="false"><return_type>MapElement</return_type><argument name="V" type="Object"/><body_expression><sequence_of_expressions><assignment variable_name="Value"><variable name="V"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setRemoved" native="false"><return_type>MapElement</return_type><argument name="B" type="Boolean"/><body_expression><sequence_of_expressions><assignment variable_name="Removed"><variable name="B"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><data_method_call method_name="concat" super="false" stmt_handle="2284"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2285"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2286"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2287"><receiver><constant type="string">"["</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2288"><receiver><variable name="Key"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">", "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2289"><receiver><variable name="Value"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></return></body_expression></data_method></data_class><data_class name="StructureElement" native="false"><super_class>Element</super_class><instance_variable name="Element" type="Object"/><data_method name="element" native="false"><return_type>Object</return_type><body_expression><return><variable name="Element"/></return></body_expression></data_method><data_method name="setElement" native="false"><return_type>Element</return_type><argument name="E" type="Object"/><body_expression><sequence_of_expressions><assignment variable_name="Element"><variable name="E"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><data_method_call method_name="printString" super="false" stmt_handle="2290"><receiver><variable name="Element"/></receiver></data_method_call></return></body_expression></data_method></data_class><data_class name="CollectionElement" native="false"><super_class>StructureElement</super_class><instance_variable name="Count" type="Integer"/><instance_variable name="Removed" type="Boolean"/><data_method name="count" native="false"><return_type>Integer</return_type><body_expression><return><variable name="Count"/></return></body_expression></data_method><data_method name="removed" native="false"><return_type>Boolean</return_type><body_expression><return><variable name="Removed"/></return></body_expression></data_method><data_method name="setCount" native="false"><return_type>CollectionElement</return_type><argument name="C" type="Integer"/><body_expression><sequence_of_expressions><assignment variable_name="Count"><variable name="C"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setRemoved" native="false"><return_type>CollectionElement</return_type><argument name="B" type="Boolean"/><body_expression><sequence_of_expressions><assignment variable_name="Removed"><variable name="B"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="PerformanceMonitor" native="false"><super_class>Observer</super_class><instance_variable name="BatchSize" type="Integer"/><instance_variable name="Accuracy" type="Real"/><instance_variable name="ConfidenceLevel" type="Real"/><instance_variable name="IntervalEstimation" type="ConfidenceInterval"/><instance_variable name="LogFile" type="FileOut"/><instance_variable name="Complete" type="Boolean"/><data_method name="accurate" native="false"><return_type>Boolean</return_type><local_variable name="Accurate" type="Boolean"/><body_expression><sequence_of_expressions><assignment variable_name="Accurate"><data_method_call method_name="accurate" super="false" stmt_handle="2291"><receiver><variable name="IntervalEstimation"/></receiver><argument><variable name="Accuracy"/></argument></data_method_call></assignment><if><condition><binary_operation operator="&amp;" stmt_handle="2292"><left_operand><variable name="Accurate"/></left_operand><right_operand><data_method_call method_name="not" super="false" stmt_handle="2293"><receiver><variable name="Complete"/></receiver></data_method_call></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Complete"><constant type="boolean">true</constant></assignment><data_method_call method_name="complete" super="false" stmt_handle="2294"><receiver><self/></receiver></data_method_call></sequence_of_expressions></then></if><return><variable name="Accurate"/></return></sequence_of_expressions></body_expression></data_method><data_method name="complete" native="false"><return_type>Observer</return_type><body_expression><sequence_of_expressions><data_method_call method_name="log" super="false" stmt_handle="2295"><receiver><self/></receiver></data_method_call><return><data_method_call method_name="complete" super="true" stmt_handle="2296"><receiver><self/></receiver></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="result" native="false"><return_type>String</return_type><body_expression><return><data_method_call method_name="printString" super="false" stmt_handle="2297"><receiver><data_method_call method_name="result" super="false" stmt_handle="2298"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></receiver></data_method_call></return></body_expression></data_method><data_method name="setDefaultBatchSize" native="false"><return_type>PerformanceMonitor</return_type><body_expression><sequence_of_expressions><assignment variable_name="BatchSize"><constant type="integer">10000</constant></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><data_method_call method_name="concat" super="false" stmt_handle="2299"><receiver><data_method_call method_name="cr" super="false" stmt_handle="2300"><receiver><data_method_call method_name="printHeading" super="false" stmt_handle="2301"><receiver><self/></receiver></data_method_call></receiver></data_method_call></receiver><argument><data_method_call method_name="printStatistics" super="false" stmt_handle="2302"><receiver><self/></receiver></data_method_call></argument></data_method_call></return></body_expression></data_method><data_method name="log" native="false"><return_type>PerformanceMonitor</return_type><body_expression><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="2303"><left_operand><variable name="LogFile"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2314"><receiver><self/></receiver><argument><constant type="string">"Log File not initialised."</constant></argument></data_method_call></then><else><sequence_of_expressions><data_method_call method_name="append" super="false" stmt_handle="2304"><receiver><variable name="LogFile"/></receiver></data_method_call><data_method_call method_name="write" super="false" stmt_handle="2305"><receiver><variable name="LogFile"/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2306"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2307"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2308"><receiver><data_method_call method_name="logStatistics" super="false" stmt_handle="2309"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></receiver></data_method_call></receiver></data_method_call></receiver><argument><data_method_call method_name="cr" super="false" stmt_handle="2310"><receiver><data_method_call method_name="printString" super="false" stmt_handle="2311"><receiver><data_method_call method_name="accurate" super="false" stmt_handle="2312"><receiver><self/></receiver></data_method_call></receiver></data_method_call></receiver></data_method_call></argument></data_method_call></argument></data_method_call><data_method_call method_name="close" super="false" stmt_handle="2313"><receiver><variable name="LogFile"/></receiver></data_method_call></sequence_of_expressions></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="getIntervalEstimation" native="false"><return_type>ConfidenceInterval</return_type><body_expression><return><variable name="IntervalEstimation"/></return></body_expression></data_method><data_method name="printStatistics" native="false"><return_type>String</return_type><body_expression><if><condition><binary_operation operator="=" stmt_handle="2315"><left_operand><variable name="Accuracy"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><return><data_method_call method_name="printString" super="false" stmt_handle="2324"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></return></then><else><return><data_method_call method_name="concat" super="false" stmt_handle="2316"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2317"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2318"><receiver><data_method_call method_name="printHeading" super="false" stmt_handle="2319"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></receiver><argument><constant type="string">"		Accurate:\n"</constant></argument></data_method_call></receiver><argument><data_method_call method_name="tab" super="false" stmt_handle="2320"><receiver><data_method_call method_name="printStatistics" super="false" stmt_handle="2321"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></receiver></data_method_call></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2322"><receiver><data_method_call method_name="accurate" super="false" stmt_handle="2323"><receiver><variable name="IntervalEstimation"/></receiver><argument><variable name="Accuracy"/></argument></data_method_call></receiver></data_method_call></argument></data_method_call></return></else></if></body_expression></data_method><data_method name="logStatistics" native="false"><return_type>String</return_type><body_expression><return><data_method_call method_name="concat" super="false" stmt_handle="2325"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2326"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2327"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2328"><receiver><data_method_call method_name="logHeading" super="false" stmt_handle="2329"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></receiver></data_method_call></receiver><argument><constant type="string">"Accurate:\n"</constant></argument></data_method_call></receiver><argument><data_method_call method_name="tab" super="false" stmt_handle="2330"><receiver><data_method_call method_name="logStatistics" super="false" stmt_handle="2331"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></receiver></data_method_call></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2332"><receiver><data_method_call method_name="accurate" super="false" stmt_handle="2333"><receiver><variable name="IntervalEstimation"/></receiver><argument><variable name="Accuracy"/></argument></data_method_call></receiver></data_method_call></argument></data_method_call></return></body_expression></data_method></data_class><data_class name="LongRunSampleAverage" native="false"><super_class>PerformanceMonitor</super_class><instance_variable name="NumberOfCycles" type="Integer"/><instance_variable name="CurrentLength" type="Integer"/><instance_variable name="Constant" type="Real"/><instance_variable name="AverageSquaredLength" type="Real"/><instance_variable name="AverageSumLengthProduct" type="Real"/><instance_variable name="CurrentSum" type="Real"/><instance_variable name="AverageSum" type="Real"/><instance_variable name="AverageLength" type="Real"/><instance_variable name="AverageSquaredSum" type="Real"/><instance_variable name="TransientMode" type="Boolean"/><data_method name="withParameters" native="false"><return_type>LongRunSampleAverage</return_type><argument name="A" type="Real"/><argument name="CL" type="Real"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2334"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2335"><left_operand><variable name="A"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2336"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2337"><receiver><variable name="A"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2338"><receiver><self/></receiver><argument><constant type="string">"Accuracy parameter for Long Run Sample Average must be a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2339"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2340"><left_operand><variable name="CL"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2341"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2342"><receiver><variable name="CL"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2343"><receiver><self/></receiver><argument><constant type="string">"Confidence Level parameter for Long Run Sample Average must be a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2344"><left_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="2345"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="2346"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2347"><receiver><self/></receiver><argument><constant type="string">"Accuracy parameter for Long Run Sample Average must be within the interval (0.0, 1.0)"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2348"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="2349"><left_operand><variable name="CL"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="2350"><left_operand><variable name="CL"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2351"><receiver><self/></receiver><argument><constant type="string">"Confidence Level parameter for Long Run Sample Average must be within the interval [0.0, 1.0)"</constant></argument></data_method_call></then></if><assignment variable_name="Accuracy"><variable name="A"/></assignment><assignment variable_name="Complete"><constant type="boolean">false</constant></assignment><data_method_call method_name="withConfidenceLevel" super="false" stmt_handle="2352"><receiver><self/></receiver><argument><variable name="CL"/></argument></data_method_call><data_method_call method_name="register" super="false" stmt_handle="2353"><receiver><self/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setBatchSize" native="false"><return_type>LongRunSampleAverage</return_type><argument name="M" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2354"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2355"><left_operand><variable name="M"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2356"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2357"><receiver><variable name="M"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2358"><receiver><self/></receiver><argument><constant type="string">"BatchSize for Long Run Sample Average must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&gt;" stmt_handle="2359"><left_operand><variable name="M"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><assignment variable_name="BatchSize"><variable name="M"/></assignment></then><else><data_method_call method_name="error" super="false" stmt_handle="2360"><receiver><self/></receiver><argument><constant type="string">"BatchSize parameter for Long Run Sample Average must be larger than 0"</constant></argument></data_method_call></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="logTo" native="false"><return_type>LongRunSampleAverage</return_type><argument name="Name" type="String"/><body_expression><sequence_of_expressions><data_method_call method_name="identifyWith" super="false" stmt_handle="2361"><receiver><self/></receiver><argument><variable name="Name"/></argument></data_method_call><assignment variable_name="LogFile"><data_method_call method_name="open" super="false" stmt_handle="2362"><receiver><data_method_call method_name="destination" super="false" stmt_handle="2363"><receiver><new data_class="FileOut"/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2364"><receiver><variable name="Name"/></receiver><argument><constant type="string">".log"</constant></argument></data_method_call></argument></data_method_call></receiver></data_method_call></assignment><data_method_call method_name="write" super="false" stmt_handle="2365"><receiver><variable name="LogFile"/></receiver><argument><data_method_call method_name="cr" super="false" stmt_handle="2366"><receiver><data_method_call method_name="cr" super="false" stmt_handle="2367"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2368"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2369"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2370"><receiver><constant type="string">"Statistics for the Long Run Sample Average "</constant></receiver><argument><variable name="Name"/></argument></data_method_call></receiver><argument><constant type="string">" with Accuracy "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2371"><receiver><variable name="Accuracy"/></receiver></data_method_call></argument></data_method_call></receiver></data_method_call></receiver></data_method_call></argument></data_method_call><data_method_call method_name="write" super="false" stmt_handle="2372"><receiver><variable name="LogFile"/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2373"><receiver><data_method_call method_name="logHeading" super="false" stmt_handle="2374"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></receiver><argument><constant type="string">"\t\tAccurate:\n"</constant></argument></data_method_call></argument></data_method_call><data_method_call method_name="write" super="false" stmt_handle="2375"><receiver><variable name="LogFile"/></receiver><argument><constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</constant></argument></data_method_call><data_method_call method_name="close" super="false" stmt_handle="2376"><receiver><variable name="LogFile"/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardRC" native="false"><return_type>LongRunSampleAverage</return_type><argument name="Reward" type="Object"/><argument name="RecurrenceCondition" type="Boolean"/><local_variable name="PointEstimation" type="Real"/><local_variable name="StandardDeviation" type="Real"/><local_variable name="Variance" type="Real"/><local_variable name="Factor" type="Real"/><local_variable name="HalfWidth" type="Real"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2377"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2378"><left_operand><variable name="Reward"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="2379"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2380"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2381"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2382"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2383"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2384"><receiver><self/></receiver><argument><constant type="string">"Reward for Long run Sample Average must be an Integer or Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="2385"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="Reward"><data_method_call method_name="asReal" super="false" stmt_handle="2386"><receiver><variable name="Reward"/></receiver></data_method_call></assignment></then></if><if><condition><variable name="RecurrenceCondition"/></condition><then><sequence_of_expressions><if><condition><variable name="TransientMode"/></condition><then><assignment variable_name="TransientMode"><constant type="boolean">false</constant></assignment></then><else><sequence_of_expressions><assignment variable_name="NumberOfCycles"><binary_operation operator="+" stmt_handle="2390"><left_operand><variable name="NumberOfCycles"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><assignment variable_name="Factor"><binary_operation operator="/" stmt_handle="2391"><left_operand><data_method_call method_name="asReal" super="false" stmt_handle="2392"><receiver><sequence_of_expressions><binary_operation operator="-" stmt_handle="2393"><left_operand><variable name="NumberOfCycles"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="asReal" super="false" stmt_handle="2394"><receiver><variable name="NumberOfCycles"/></receiver></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="AverageSum"><binary_operation operator="+" stmt_handle="2395"><left_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2396"><left_operand><variable name="Factor"/></left_operand><right_operand><variable name="AverageSum"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="/" stmt_handle="2397"><left_operand><variable name="CurrentSum"/></left_operand><right_operand><data_method_call method_name="asReal" super="false" stmt_handle="2398"><receiver><variable name="NumberOfCycles"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment><assignment variable_name="AverageLength"><binary_operation operator="+" stmt_handle="2399"><left_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2400"><left_operand><variable name="Factor"/></left_operand><right_operand><variable name="AverageLength"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="/" stmt_handle="2401"><left_operand><data_method_call method_name="asReal" super="false" stmt_handle="2402"><receiver><variable name="CurrentLength"/></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="asReal" super="false" stmt_handle="2403"><receiver><variable name="NumberOfCycles"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment><assignment variable_name="AverageSquaredSum"><binary_operation operator="+" stmt_handle="2404"><left_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2405"><left_operand><variable name="Factor"/></left_operand><right_operand><variable name="AverageSquaredSum"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="/" stmt_handle="2406"><left_operand><data_method_call method_name="sqr" super="false" stmt_handle="2407"><receiver><variable name="CurrentSum"/></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="asReal" super="false" stmt_handle="2408"><receiver><variable name="NumberOfCycles"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment><assignment variable_name="AverageSquaredLength"><binary_operation operator="+" stmt_handle="2409"><left_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2410"><left_operand><variable name="Factor"/></left_operand><right_operand><variable name="AverageSquaredLength"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="/" stmt_handle="2411"><left_operand><data_method_call method_name="asReal" super="false" stmt_handle="2412"><receiver><data_method_call method_name="sqr" super="false" stmt_handle="2413"><receiver><variable name="CurrentLength"/></receiver></data_method_call></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="asReal" super="false" stmt_handle="2414"><receiver><variable name="NumberOfCycles"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment><assignment variable_name="AverageSumLengthProduct"><binary_operation operator="+" stmt_handle="2415"><left_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2416"><left_operand><variable name="Factor"/></left_operand><right_operand><variable name="AverageSumLengthProduct"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="/" stmt_handle="2417"><left_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2418"><left_operand><variable name="CurrentSum"/></left_operand><right_operand><data_method_call method_name="asReal" super="false" stmt_handle="2419"><receiver><variable name="CurrentLength"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><data_method_call method_name="asReal" super="false" stmt_handle="2420"><receiver><variable name="NumberOfCycles"/></receiver></data_method_call></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment><if><condition><binary_operation operator="&gt;" stmt_handle="2421"><left_operand><variable name="NumberOfCycles"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="PointEstimation"><binary_operation operator="/" stmt_handle="2422"><left_operand><variable name="AverageSum"/></left_operand><right_operand><variable name="AverageLength"/></right_operand></binary_operation></assignment><assignment variable_name="Variance"><sequence_of_expressions><binary_operation operator="*" stmt_handle="2423"><left_operand><sequence_of_expressions><binary_operation operator="/" stmt_handle="2424"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="Factor"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2425"><left_operand><binary_operation operator="-" stmt_handle="2426"><left_operand><variable name="AverageSquaredSum"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2427"><left_operand><binary_operation operator="*" stmt_handle="2428"><left_operand><constant type="real">2.0</constant></left_operand><right_operand><variable name="PointEstimation"/></right_operand></binary_operation></left_operand><right_operand><variable name="AverageSumLengthProduct"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2429"><left_operand><data_method_call method_name="sqr" super="false" stmt_handle="2430"><receiver><variable name="PointEstimation"/></receiver></data_method_call></left_operand><right_operand><variable name="AverageSquaredLength"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></assignment><if><condition><binary_operation operator="&gt;" stmt_handle="2431"><left_operand><variable name="Variance"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><then><assignment variable_name="StandardDeviation"><data_method_call method_name="sqrt" super="false" stmt_handle="2432"><receiver><variable name="Variance"/></receiver></data_method_call></assignment></then><else><assignment variable_name="StandardDeviation"><constant type="real">0.0</constant></assignment></else></if><assignment variable_name="HalfWidth"><binary_operation operator="/" stmt_handle="2433"><left_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2434"><left_operand><variable name="Constant"/></left_operand><right_operand><variable name="StandardDeviation"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2435"><left_operand><variable name="AverageLength"/></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="sqrt" super="false" stmt_handle="2436"><receiver><data_method_call method_name="asReal" super="false" stmt_handle="2437"><receiver><variable name="NumberOfCycles"/></receiver></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment><assignment variable_name="IntervalEstimation"><data_method_call method_name="withParameters" super="false" stmt_handle="2438"><receiver><new data_class="ConfidenceInterval"/></receiver><argument><binary_operation operator="-" stmt_handle="2439"><left_operand><variable name="PointEstimation"/></left_operand><right_operand><variable name="HalfWidth"/></right_operand></binary_operation></argument><argument><binary_operation operator="+" stmt_handle="2440"><left_operand><variable name="PointEstimation"/></left_operand><right_operand><variable name="HalfWidth"/></right_operand></binary_operation></argument><argument><variable name="ConfidenceLevel"/></argument></data_method_call></assignment></sequence_of_expressions></then></if></sequence_of_expressions></else></if><assignment variable_name="CurrentSum"><variable name="Reward"/></assignment><assignment variable_name="CurrentLength"><constant type="integer">1</constant></assignment></sequence_of_expressions></then><else><if><condition><data_method_call method_name="not" super="false" stmt_handle="2387"><receiver><variable name="TransientMode"/></receiver></data_method_call></condition><then><sequence_of_expressions><assignment variable_name="CurrentSum"><binary_operation operator="+" stmt_handle="2388"><left_operand><variable name="CurrentSum"/></left_operand><right_operand><variable name="Reward"/></right_operand></binary_operation></assignment><assignment variable_name="CurrentLength"><binary_operation operator="+" stmt_handle="2389"><left_operand><variable name="CurrentLength"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></then></if></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardBM" native="false"><return_type>LongRunSampleAverage</return_type><argument name="Reward" type="Object"/><body_expression><sequence_of_expressions><data_method_call method_name="rewardRC" super="false" stmt_handle="2441"><receiver><self/></receiver><argument><variable name="Reward"/></argument><argument><binary_operation operator="|" stmt_handle="2442"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2443"><left_operand><variable name="CurrentLength"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2444"><left_operand><variable name="CurrentLength"/></left_operand><right_operand><variable name="BatchSize"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></argument></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="withConfidenceLevel" native="false"><return_type>LongRunSampleAverage</return_type><argument name="CL" type="Real"/><body_expression><sequence_of_expressions><assignment variable_name="ConfidenceLevel"><variable name="CL"/></assignment><assignment variable_name="IntervalEstimation"><data_method_call method_name="withParameters" super="false" stmt_handle="2445"><receiver><new data_class="ConfidenceInterval"/></receiver><argument><nil/></argument><argument><nil/></argument><argument><variable name="ConfidenceLevel"/></argument></data_method_call></assignment><assignment variable_name="Constant"><binary_operation operator="*" stmt_handle="2446"><left_operand><sequence_of_expressions><data_method_call method_name="sqrt" super="false" stmt_handle="2447"><receiver><constant type="real">2.0</constant></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="calculateInverseErfC" super="false" stmt_handle="2448"><receiver><self/></receiver><argument><binary_operation operator="-" stmt_handle="2449"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="ConfidenceLevel"/></right_operand></binary_operation></argument></data_method_call></sequence_of_expressions></right_operand></binary_operation></assignment><assignment variable_name="TransientMode"><constant type="boolean">true</constant></assignment><assignment variable_name="NumberOfCycles"><constant type="integer">0</constant></assignment><assignment variable_name="CurrentLength"><constant type="integer">0</constant></assignment><assignment variable_name="AverageSum"><constant type="real">0.0</constant></assignment><assignment variable_name="AverageLength"><constant type="real">0.0</constant></assignment><assignment variable_name="AverageSquaredSum"><constant type="real">0.0</constant></assignment><assignment variable_name="AverageSquaredLength"><constant type="real">0.0</constant></assignment><assignment variable_name="AverageSumLengthProduct"><constant type="real">0.0</constant></assignment><data_method_call method_name="setDefaultBatchSize" super="false" stmt_handle="2450"><receiver><self/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="calculateInverseErfC" native="false"><return_type>Real</return_type><argument name="y" type="Real"/><local_variable name="s" type="Real"/><local_variable name="t" type="Real"/><local_variable name="u" type="Real"/><local_variable name="w" type="Real"/><local_variable name="x" type="Real"/><local_variable name="z" type="Real"/><body_expression><sequence_of_expressions><assignment variable_name="z"><variable name="y"/></assignment><assignment variable_name="w"><binary_operation operator="-" stmt_handle="2451"><left_operand><constant type="real">0.916461398268964</constant></left_operand><right_operand><data_method_call method_name="ln" super="false" stmt_handle="2452"><receiver><variable name="z"/></receiver></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="u"><data_method_call method_name="sqrt" super="false" stmt_handle="2453"><receiver><variable name="w"/></receiver></data_method_call></assignment><assignment variable_name="s"><binary_operation operator="/" stmt_handle="2454"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2455"><left_operand><data_method_call method_name="ln" super="false" stmt_handle="2456"><receiver><variable name="u"/></receiver></data_method_call></left_operand><right_operand><constant type="real">0.488826640273108</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="w"/></right_operand></binary_operation></assignment><assignment variable_name="t"><binary_operation operator="/" stmt_handle="2457"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2458"><left_operand><variable name="u"/></left_operand><right_operand><constant type="real">0.231729200323405</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment><assignment variable_name="x"><binary_operation operator="-" stmt_handle="2459"><left_operand><binary_operation operator="*" stmt_handle="2460"><left_operand><variable name="u"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="2461"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><binary_operation operator="*" stmt_handle="2462"><left_operand><variable name="s"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2463"><left_operand><binary_operation operator="*" stmt_handle="2464"><left_operand><variable name="s"/></left_operand><right_operand><constant type="real">0.124610454613712</constant></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.5</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><binary_operation operator="*" stmt_handle="2465"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2466"><left_operand><binary_operation operator="*" stmt_handle="2467"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2468"><left_operand><binary_operation operator="*" stmt_handle="2469"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2470"><left_operand><binary_operation operator="*" stmt_handle="2471"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2472"><left_operand><binary_operation operator="*" stmt_handle="2473"><left_operand><constant type="real">-0.0728846765585675</constant></left_operand><right_operand><variable name="t"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.269999308670029</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="t"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.150689047360223</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="t"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.116065025341614</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="t"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.499999303439796</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="t"/></right_operand></binary_operation></right_operand></binary_operation></assignment><assignment variable_name="t"><binary_operation operator="/" stmt_handle="2474"><left_operand><constant type="real">3.97886080735226</constant></left_operand><right_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2475"><left_operand><variable name="x"/></left_operand><right_operand><constant type="real">3.97886080735226</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment><assignment variable_name="u"><binary_operation operator="-" stmt_handle="2476"><left_operand><variable name="t"/></left_operand><right_operand><constant type="real">0.5</constant></right_operand></binary_operation></assignment><assignment variable_name="s"><binary_operation operator="+" stmt_handle="2477"><left_operand><binary_operation operator="*" stmt_handle="2478"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2479"><left_operand><binary_operation operator="*" stmt_handle="2480"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2481"><left_operand><binary_operation operator="*" stmt_handle="2482"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="2483"><left_operand><binary_operation operator="*" stmt_handle="2484"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="2485"><left_operand><binary_operation operator="*" stmt_handle="2486"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2487"><left_operand><binary_operation operator="*" stmt_handle="2488"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2489"><left_operand><binary_operation operator="*" stmt_handle="2490"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="2491"><left_operand><binary_operation operator="*" stmt_handle="2492"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="2493"><left_operand><binary_operation operator="*" stmt_handle="2494"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2495"><left_operand><binary_operation operator="*" stmt_handle="2496"><left_operand><constant type="real">0.00112648096188977922</constant></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.000105739299623423047</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.00351287146129100025</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.000771708358954120939</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.00685649426074558612</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.00339721910367775861</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.011274916933250487</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.0118598117047771104</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.0142961988697898018</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.0346494207789099922</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.00220995927012179067</constant></right_operand></binary_operation></assignment><assignment variable_name="s"><binary_operation operator="-" stmt_handle="2497"><left_operand><binary_operation operator="*" stmt_handle="2498"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2499"><left_operand><binary_operation operator="*" stmt_handle="2500"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2501"><left_operand><binary_operation operator="*" stmt_handle="2502"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2503"><left_operand><binary_operation operator="*" stmt_handle="2504"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2505"><left_operand><binary_operation operator="*" stmt_handle="2506"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2507"><left_operand><binary_operation operator="*" stmt_handle="2508"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2509"><left_operand><binary_operation operator="*" stmt_handle="2510"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2511"><left_operand><binary_operation operator="*" stmt_handle="2512"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2513"><left_operand><binary_operation operator="*" stmt_handle="2514"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2515"><left_operand><binary_operation operator="*" stmt_handle="2516"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2517"><left_operand><binary_operation operator="*" stmt_handle="2518"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="2519"><left_operand><binary_operation operator="*" stmt_handle="2520"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="2521"><left_operand><binary_operation operator="*" stmt_handle="2522"><left_operand><variable name="s"/></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.0743424357241784861</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.105872177941595488</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.0147297938331485121</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.316847638520135944</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.713657635868730364</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">1.05375024970847138</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">1.21448730779995237</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">1.16374581931560831</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.956464974744799006</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.686265948274097816</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.434397492331430115</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="u"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.244044510593190935</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="t"/></right_operand></binary_operation></left_operand><right_operand><binary_operation operator="*" stmt_handle="2523"><left_operand><variable name="z"/></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="power" super="false" stmt_handle="2524"><receiver><constant type="real">2.718281828459045</constant></receiver><argument><binary_operation operator="-" stmt_handle="2525"><left_operand><binary_operation operator="*" stmt_handle="2526"><left_operand><variable name="x"/></left_operand><right_operand><variable name="x"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">0.120782237635245222</constant></right_operand></binary_operation></argument></data_method_call></sequence_of_expressions></right_operand></binary_operation></right_operand></binary_operation></assignment><assignment variable_name="x"><binary_operation operator="+" stmt_handle="2527"><left_operand><variable name="x"/></left_operand><right_operand><binary_operation operator="*" stmt_handle="2528"><left_operand><variable name="s"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2529"><left_operand><binary_operation operator="*" stmt_handle="2530"><left_operand><variable name="x"/></left_operand><right_operand><variable name="s"/></right_operand></binary_operation></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></right_operand></binary_operation></assignment><return><variable name="x"/></return></sequence_of_expressions></body_expression></data_method><data_method name="getCurrentLength" native="false"><return_type>Integer</return_type><body_expression><return><variable name="CurrentLength"/></return></body_expression></data_method><data_method name="printHeading" native="false"><return_type>String</return_type><body_expression><if><condition><binary_operation operator="=" stmt_handle="2531"><left_operand><variable name="Accuracy"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><return><constant type="string">"Statistics for Long Run Sample Average"</constant></return></then><else><return><data_method_call method_name="concat" super="false" stmt_handle="2532"><receiver><constant type="string">"Statistics for Long Run Sample Average with Accuracy "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2533"><receiver><variable name="Accuracy"/></receiver></data_method_call></argument></data_method_call></return></else></if></body_expression></data_method></data_class><data_class name="LongRunSampleVariance" native="false"><super_class>PerformanceMonitor</super_class><instance_variable name="AverageReward" type="LongRunSampleAverage"/><instance_variable name="AverageSquaredReward" type="LongRunSampleAverage"/><data_method name="withParameters" native="false"><return_type>LongRunSampleVariance</return_type><argument name="A" type="Object"/><argument name="CL" type="Object"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2534"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2535"><left_operand><variable name="A"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2536"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2537"><receiver><variable name="A"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2538"><receiver><self/></receiver><argument><constant type="string">"Accuracy parameter for Long Run Sample Variance must be a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2539"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2540"><left_operand><variable name="CL"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2541"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2542"><receiver><variable name="CL"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2543"><receiver><self/></receiver><argument><constant type="string">"Confidence Level parameter for Long Run Sample Variance must be a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2544"><left_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="2545"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="2546"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2547"><receiver><self/></receiver><argument><constant type="string">"Accuracy parameter for Long Run Sample Variance must be within the interval (0.0, 1.0)"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2548"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="2549"><left_operand><variable name="CL"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="2550"><left_operand><variable name="CL"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2551"><receiver><self/></receiver><argument><constant type="string">"ConfidenceLevel parameter for Long Run Sample Variance must be within the interval [0.0, 1.0)"</constant></argument></data_method_call></then></if><assignment variable_name="Accuracy"><variable name="A"/></assignment><assignment variable_name="ConfidenceLevel"><variable name="CL"/></assignment><assignment variable_name="AverageReward"><data_method_call method_name="withConfidenceLevel" super="false" stmt_handle="2552"><receiver><new data_class="LongRunSampleAverage"/></receiver><argument><binary_operation operator="/" stmt_handle="2553"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2554"><left_operand><variable name="ConfidenceLevel"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">2.0</constant></right_operand></binary_operation></argument></data_method_call></assignment><assignment variable_name="AverageSquaredReward"><data_method_call method_name="withConfidenceLevel" super="false" stmt_handle="2555"><receiver><new data_class="LongRunSampleAverage"/></receiver><argument><binary_operation operator="/" stmt_handle="2556"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2557"><left_operand><variable name="ConfidenceLevel"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">2.0</constant></right_operand></binary_operation></argument></data_method_call></assignment><assignment variable_name="IntervalEstimation"><binary_operation operator="-" stmt_handle="2558"><left_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2559"><receiver><variable name="AverageSquaredReward"/></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="sqr" super="false" stmt_handle="2560"><receiver><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2561"><receiver><variable name="AverageReward"/></receiver></data_method_call></sequence_of_expressions></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></assignment><data_method_call method_name="setDefaultBatchSize" super="false" stmt_handle="2562"><receiver><self/></receiver></data_method_call><assignment variable_name="Complete"><constant type="boolean">false</constant></assignment><data_method_call method_name="register" super="false" stmt_handle="2563"><receiver><self/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setBatchSize" native="false"><return_type>LongRunSampleVariance</return_type><argument name="M" type="Object"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2564"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2565"><left_operand><variable name="M"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2566"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2567"><receiver><variable name="M"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2568"><receiver><self/></receiver><argument><constant type="string">"BatchSize for Long Run Sample Variance must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&gt;" stmt_handle="2569"><left_operand><variable name="M"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="BatchSize"><variable name="M"/></assignment><data_method_call method_name="setBatchSize" super="false" stmt_handle="2571"><receiver><variable name="AverageReward"/></receiver><argument><variable name="BatchSize"/></argument></data_method_call><data_method_call method_name="setBatchSize" super="false" stmt_handle="2572"><receiver><variable name="AverageSquaredReward"/></receiver><argument><variable name="BatchSize"/></argument></data_method_call></sequence_of_expressions></then><else><data_method_call method_name="error" super="false" stmt_handle="2570"><receiver><self/></receiver><argument><constant type="string">"BatchSize parameter for Long Run Sample Variance must be larger than 0"</constant></argument></data_method_call></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="logTo" native="false"><return_type>LongRunSampleVariance</return_type><argument name="Name" type="String"/><body_expression><sequence_of_expressions><data_method_call method_name="identifyWith" super="false" stmt_handle="2573"><receiver><self/></receiver><argument><variable name="Name"/></argument></data_method_call><assignment variable_name="LogFile"><data_method_call method_name="open" super="false" stmt_handle="2574"><receiver><data_method_call method_name="destination" super="false" stmt_handle="2575"><receiver><new data_class="FileOut"/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2576"><receiver><variable name="Name"/></receiver><argument><constant type="string">".log"</constant></argument></data_method_call></argument></data_method_call></receiver></data_method_call></assignment><data_method_call method_name="write" super="false" stmt_handle="2577"><receiver><variable name="LogFile"/></receiver><argument><data_method_call method_name="cr" super="false" stmt_handle="2578"><receiver><data_method_call method_name="cr" super="false" stmt_handle="2579"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2580"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2581"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2582"><receiver><constant type="string">"Statistics for the Long Run Sample Variance "</constant></receiver><argument><variable name="Name"/></argument></data_method_call></receiver><argument><constant type="string">" with Accuracy "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2583"><receiver><variable name="Accuracy"/></receiver></data_method_call></argument></data_method_call></receiver></data_method_call></receiver></data_method_call></argument></data_method_call><data_method_call method_name="write" super="false" stmt_handle="2584"><receiver><variable name="LogFile"/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2585"><receiver><data_method_call method_name="logHeading" super="false" stmt_handle="2586"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></receiver><argument><constant type="string">"\t\tAccurate:\n"</constant></argument></data_method_call></argument></data_method_call><data_method_call method_name="write" super="false" stmt_handle="2587"><receiver><variable name="LogFile"/></receiver><argument><constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</constant></argument></data_method_call><data_method_call method_name="close" super="false" stmt_handle="2588"><receiver><variable name="LogFile"/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardRC" native="false"><return_type>LongRunSampleVariance</return_type><argument name="Reward" type="Object"/><argument name="RecurrenceCondition" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2589"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2590"><left_operand><variable name="Reward"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="2591"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2592"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2593"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2594"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2595"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2596"><receiver><self/></receiver><argument><constant type="string">"Reward for Long Run Sample Variance must be an Integer or Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="2597"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="Reward"><data_method_call method_name="asReal" super="false" stmt_handle="2598"><receiver><variable name="Reward"/></receiver></data_method_call></assignment></then></if><data_method_call method_name="rewardRC" super="false" stmt_handle="2599"><receiver><variable name="AverageReward"/></receiver><argument><variable name="Reward"/></argument><argument><variable name="RecurrenceCondition"/></argument></data_method_call><data_method_call method_name="rewardRC" super="false" stmt_handle="2600"><receiver><variable name="AverageSquaredReward"/></receiver><argument><binary_operation operator="*" stmt_handle="2601"><left_operand><variable name="Reward"/></left_operand><right_operand><variable name="Reward"/></right_operand></binary_operation></argument><argument><variable name="RecurrenceCondition"/></argument></data_method_call><if><condition><variable name="RecurrenceCondition"/></condition><then><assignment variable_name="IntervalEstimation"><binary_operation operator="-" stmt_handle="2602"><left_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2603"><receiver><variable name="AverageSquaredReward"/></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="sqr" super="false" stmt_handle="2604"><receiver><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2605"><receiver><variable name="AverageReward"/></receiver></data_method_call></sequence_of_expressions></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></assignment></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardBM" native="false"><return_type>LongRunSampleVariance</return_type><argument name="Reward" type="Object"/><body_expression><sequence_of_expressions><data_method_call method_name="rewardRC" super="false" stmt_handle="2606"><receiver><self/></receiver><argument><variable name="Reward"/></argument><argument><binary_operation operator="|" stmt_handle="2607"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2608"><left_operand><data_method_call method_name="getCurrentLength" super="false" stmt_handle="2609"><receiver><variable name="AverageReward"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2610"><left_operand><data_method_call method_name="getCurrentLength" super="false" stmt_handle="2611"><receiver><variable name="AverageReward"/></receiver></data_method_call></left_operand><right_operand><variable name="BatchSize"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></argument></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printHeading" native="false"><return_type>String</return_type><body_expression><return><data_method_call method_name="concat" super="false" stmt_handle="2612"><receiver><constant type="string">"Statistics for Long Run Sample Variance with Accuracy "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2613"><receiver><variable name="Accuracy"/></receiver></data_method_call></argument></data_method_call></return></body_expression></data_method></data_class><data_class name="LongRunTimeAverage" native="false"><super_class>PerformanceMonitor</super_class><instance_variable name="AverageRewardTimeProduct" type="LongRunSampleAverage"/><instance_variable name="AverageTime" type="LongRunSampleAverage"/><instance_variable name="PreviousReward" type="Real"/><instance_variable name="LastTime" type="Real"/><data_method name="withParameters" native="false"><return_type>LongRunTimeAverage</return_type><argument name="A" type="Real"/><argument name="CL" type="Real"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2614"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2615"><left_operand><variable name="A"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2616"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2617"><receiver><variable name="A"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2618"><receiver><self/></receiver><argument><constant type="string">"Accuracy parameter for Long Run Time Average must be a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2619"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2620"><left_operand><variable name="CL"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2621"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2622"><receiver><variable name="CL"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2623"><receiver><self/></receiver><argument><constant type="string">"Confidence Level parameter for Long Run Time Average must be a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2624"><left_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="2625"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="2626"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2627"><receiver><self/></receiver><argument><constant type="string">"Accuracy parameter for Long Run Time Average must be within the interval (0.0, 1.0)"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2628"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="2629"><left_operand><variable name="CL"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="2630"><left_operand><variable name="CL"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2631"><receiver><self/></receiver><argument><constant type="string">"Confidence Level parameter for Long Run Time Average must be within the interval [0.0, 1.0)"</constant></argument></data_method_call></then></if><assignment variable_name="Accuracy"><variable name="A"/></assignment><assignment variable_name="Complete"><constant type="boolean">false</constant></assignment><data_method_call method_name="withConfidenceLevel" super="false" stmt_handle="2632"><receiver><self/></receiver><argument><variable name="CL"/></argument></data_method_call><data_method_call method_name="register" super="false" stmt_handle="2633"><receiver><self/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setBatchSize" native="false"><return_type>LongRunTimeAverage</return_type><argument name="M" type="Object"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2634"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2635"><left_operand><variable name="M"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2636"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2637"><receiver><variable name="M"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2638"><receiver><self/></receiver><argument><constant type="string">"BatchSize for Long Run Time Average must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&gt;" stmt_handle="2639"><left_operand><variable name="M"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="BatchSize"><variable name="M"/></assignment><data_method_call method_name="setBatchSize" super="false" stmt_handle="2641"><receiver><variable name="AverageRewardTimeProduct"/></receiver><argument><variable name="BatchSize"/></argument></data_method_call><data_method_call method_name="setBatchSize" super="false" stmt_handle="2642"><receiver><variable name="AverageTime"/></receiver><argument><variable name="BatchSize"/></argument></data_method_call></sequence_of_expressions></then><else><data_method_call method_name="error" super="false" stmt_handle="2640"><receiver><self/></receiver><argument><constant type="string">"BatchSize parameter for Long Run Time Average must be larger than 0"</constant></argument></data_method_call></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="logTo" native="false"><return_type>LongRunTimeAverage</return_type><argument name="Name" type="String"/><body_expression><sequence_of_expressions><data_method_call method_name="identifyWith" super="false" stmt_handle="2643"><receiver><self/></receiver><argument><variable name="Name"/></argument></data_method_call><assignment variable_name="LogFile"><data_method_call method_name="open" super="false" stmt_handle="2644"><receiver><data_method_call method_name="destination" super="false" stmt_handle="2645"><receiver><new data_class="FileOut"/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2646"><receiver><variable name="Name"/></receiver><argument><constant type="string">".log"</constant></argument></data_method_call></argument></data_method_call></receiver></data_method_call></assignment><data_method_call method_name="write" super="false" stmt_handle="2647"><receiver><variable name="LogFile"/></receiver><argument><data_method_call method_name="cr" super="false" stmt_handle="2648"><receiver><data_method_call method_name="cr" super="false" stmt_handle="2649"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2650"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2651"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2652"><receiver><constant type="string">"Statistics for the Long Run Time Average "</constant></receiver><argument><variable name="Name"/></argument></data_method_call></receiver><argument><constant type="string">" with Accuracy "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2653"><receiver><variable name="Accuracy"/></receiver></data_method_call></argument></data_method_call></receiver></data_method_call></receiver></data_method_call></argument></data_method_call><data_method_call method_name="write" super="false" stmt_handle="2654"><receiver><variable name="LogFile"/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2655"><receiver><data_method_call method_name="logHeading" super="false" stmt_handle="2656"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></receiver><argument><constant type="string">"\t\tAccurate:\n"</constant></argument></data_method_call></argument></data_method_call><data_method_call method_name="write" super="false" stmt_handle="2657"><receiver><variable name="LogFile"/></receiver><argument><constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</constant></argument></data_method_call><data_method_call method_name="close" super="false" stmt_handle="2658"><receiver><variable name="LogFile"/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardRC" native="false"><return_type>LongRunTimeAverage</return_type><argument name="Reward" type="Object"/><argument name="CurrentTime" type="Real"/><argument name="RecurrenceCondition" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2659"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2660"><left_operand><variable name="Reward"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="2661"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2662"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2663"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2664"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2665"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2666"><receiver><self/></receiver><argument><constant type="string">"Reward for Long Run Time Average must be an Integer or Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="2667"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="Reward"><data_method_call method_name="asReal" super="false" stmt_handle="2668"><receiver><variable name="Reward"/></receiver></data_method_call></assignment></then></if><if><condition><binary_operation operator="!=" stmt_handle="2669"><left_operand><variable name="LastTime"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><data_method_call method_name="rewardRC" super="false" stmt_handle="2670"><receiver><variable name="AverageRewardTimeProduct"/></receiver><argument><binary_operation operator="*" stmt_handle="2671"><left_operand><variable name="PreviousReward"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="2672"><left_operand><variable name="CurrentTime"/></left_operand><right_operand><variable name="LastTime"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></argument><argument><variable name="RecurrenceCondition"/></argument></data_method_call><data_method_call method_name="rewardRC" super="false" stmt_handle="2673"><receiver><variable name="AverageTime"/></receiver><argument><binary_operation operator="-" stmt_handle="2674"><left_operand><variable name="CurrentTime"/></left_operand><right_operand><variable name="LastTime"/></right_operand></binary_operation></argument><argument><variable name="RecurrenceCondition"/></argument></data_method_call></sequence_of_expressions></then></if><assignment variable_name="PreviousReward"><variable name="Reward"/></assignment><assignment variable_name="LastTime"><variable name="CurrentTime"/></assignment><if><condition><variable name="RecurrenceCondition"/></condition><then><assignment variable_name="IntervalEstimation"><binary_operation operator="/" stmt_handle="2675"><left_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2676"><receiver><variable name="AverageRewardTimeProduct"/></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2677"><receiver><variable name="AverageTime"/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></assignment></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardBM" native="false"><return_type>LongRunTimeAverage</return_type><argument name="Reward" type="Object"/><argument name="CurrentTime" type="Real"/><body_expression><sequence_of_expressions><data_method_call method_name="rewardRC" super="false" stmt_handle="2678"><receiver><self/></receiver><argument><variable name="Reward"/></argument><argument><variable name="CurrentTime"/></argument><argument><binary_operation operator="|" stmt_handle="2679"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2680"><left_operand><data_method_call method_name="getCurrentLength" super="false" stmt_handle="2681"><receiver><variable name="AverageRewardTimeProduct"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2682"><left_operand><data_method_call method_name="getCurrentLength" super="false" stmt_handle="2683"><receiver><variable name="AverageRewardTimeProduct"/></receiver></data_method_call></left_operand><right_operand><variable name="BatchSize"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></argument></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="withConfidenceLevel" native="false"><return_type>LongRunTimeAverage</return_type><argument name="CL" type="Real"/><body_expression><sequence_of_expressions><assignment variable_name="ConfidenceLevel"><variable name="CL"/></assignment><assignment variable_name="AverageRewardTimeProduct"><data_method_call method_name="withConfidenceLevel" super="false" stmt_handle="2684"><receiver><new data_class="LongRunSampleAverage"/></receiver><argument><binary_operation operator="/" stmt_handle="2685"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2686"><left_operand><variable name="ConfidenceLevel"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">2.0</constant></right_operand></binary_operation></argument></data_method_call></assignment><assignment variable_name="AverageTime"><data_method_call method_name="withConfidenceLevel" super="false" stmt_handle="2687"><receiver><new data_class="LongRunSampleAverage"/></receiver><argument><binary_operation operator="/" stmt_handle="2688"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2689"><left_operand><variable name="ConfidenceLevel"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">2.0</constant></right_operand></binary_operation></argument></data_method_call></assignment><assignment variable_name="IntervalEstimation"><binary_operation operator="/" stmt_handle="2690"><left_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2691"><receiver><variable name="AverageRewardTimeProduct"/></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2692"><receiver><variable name="AverageTime"/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></assignment><data_method_call method_name="setDefaultBatchSize" super="false" stmt_handle="2693"><receiver><self/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="getCurrentLength" native="false"><return_type>Integer</return_type><body_expression><return><data_method_call method_name="getCurrentLength" super="false" stmt_handle="2694"><receiver><variable name="AverageRewardTimeProduct"/></receiver></data_method_call></return></body_expression></data_method><data_method name="printHeading" native="false"><return_type>String</return_type><body_expression><if><condition><binary_operation operator="=" stmt_handle="2695"><left_operand><variable name="Accuracy"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><return><constant type="string">"Statistics for Long Run Time Average"</constant></return></then><else><return><data_method_call method_name="concat" super="false" stmt_handle="2696"><receiver><constant type="string">"Statistics for Long Run Time Average with Accuracy "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2697"><receiver><variable name="Accuracy"/></receiver></data_method_call></argument></data_method_call></return></else></if></body_expression></data_method></data_class><data_class name="LongRunTimeVariance" native="false"><super_class>PerformanceMonitor</super_class><instance_variable name="AverageReward" type="LongRunTimeAverage"/><instance_variable name="AverageSquaredReward" type="LongRunTimeAverage"/><data_method name="withParameters" native="false"><return_type>LongRunTimeVariance</return_type><argument name="A" type="Real"/><argument name="CL" type="Real"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2698"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2699"><left_operand><variable name="A"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2700"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2701"><receiver><variable name="A"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2702"><receiver><self/></receiver><argument><constant type="string">"Accuracy parameter for Long Run Time Variance must be a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2703"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2704"><left_operand><variable name="CL"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2705"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2706"><receiver><variable name="CL"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2707"><receiver><self/></receiver><argument><constant type="string">"Confidence Level parameter for Long Run Time Variance must be a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2708"><left_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="2709"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="2710"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2711"><receiver><self/></receiver><argument><constant type="string">"Accuracy parameter for Long Run Time Variance must within the interval (0.0, 1.0)"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2712"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="2713"><left_operand><variable name="CL"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="2714"><left_operand><variable name="CL"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2715"><receiver><self/></receiver><argument><constant type="string">"Confidence Level parameter for Long Run Time Variance must be within the interval [0.0, 1.0)"</constant></argument></data_method_call></then></if><assignment variable_name="Accuracy"><variable name="A"/></assignment><assignment variable_name="ConfidenceLevel"><variable name="CL"/></assignment><assignment variable_name="Complete"><constant type="boolean">false</constant></assignment><assignment variable_name="AverageReward"><data_method_call method_name="withConfidenceLevel" super="false" stmt_handle="2716"><receiver><new data_class="LongRunTimeAverage"/></receiver><argument><binary_operation operator="/" stmt_handle="2717"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2718"><left_operand><variable name="ConfidenceLevel"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">2.0</constant></right_operand></binary_operation></argument></data_method_call></assignment><assignment variable_name="AverageSquaredReward"><data_method_call method_name="withConfidenceLevel" super="false" stmt_handle="2719"><receiver><new data_class="LongRunTimeAverage"/></receiver><argument><binary_operation operator="/" stmt_handle="2720"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2721"><left_operand><variable name="ConfidenceLevel"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">2.0</constant></right_operand></binary_operation></argument></data_method_call></assignment><assignment variable_name="IntervalEstimation"><binary_operation operator="-" stmt_handle="2722"><left_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2723"><receiver><variable name="AverageSquaredReward"/></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="sqr" super="false" stmt_handle="2724"><receiver><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2725"><receiver><variable name="AverageReward"/></receiver></data_method_call></sequence_of_expressions></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></assignment><data_method_call method_name="setDefaultBatchSize" super="false" stmt_handle="2726"><receiver><self/></receiver></data_method_call><data_method_call method_name="register" super="false" stmt_handle="2727"><receiver><self/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setBatchSize" native="false"><return_type>LongRunTimeVariance</return_type><argument name="M" type="Object"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2728"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2729"><left_operand><variable name="M"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2730"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2731"><receiver><variable name="M"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2732"><receiver><self/></receiver><argument><constant type="string">"BatchSize parameter for Long Run Time Variance must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&gt;" stmt_handle="2733"><left_operand><variable name="M"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="BatchSize"><variable name="M"/></assignment><data_method_call method_name="setBatchSize" super="false" stmt_handle="2735"><receiver><variable name="AverageReward"/></receiver><argument><variable name="BatchSize"/></argument></data_method_call><data_method_call method_name="setBatchSize" super="false" stmt_handle="2736"><receiver><variable name="AverageSquaredReward"/></receiver><argument><variable name="BatchSize"/></argument></data_method_call></sequence_of_expressions></then><else><data_method_call method_name="error" super="false" stmt_handle="2734"><receiver><self/></receiver><argument><constant type="string">"BatchSize parameter for Long Run Time Variance must be larger than 0"</constant></argument></data_method_call></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="logTo" native="false"><return_type>LongRunTimeVariance</return_type><argument name="Name" type="String"/><body_expression><sequence_of_expressions><data_method_call method_name="identifyWith" super="false" stmt_handle="2737"><receiver><self/></receiver><argument><variable name="Name"/></argument></data_method_call><assignment variable_name="LogFile"><data_method_call method_name="open" super="false" stmt_handle="2738"><receiver><data_method_call method_name="destination" super="false" stmt_handle="2739"><receiver><new data_class="FileOut"/></receiver><argument><binary_operation operator="+" stmt_handle="2740"><left_operand><variable name="Name"/></left_operand><right_operand><constant type="string">".log"</constant></right_operand></binary_operation></argument></data_method_call></receiver></data_method_call></assignment><data_method_call method_name="write" super="false" stmt_handle="2741"><receiver><variable name="LogFile"/></receiver><argument><data_method_call method_name="cr" super="false" stmt_handle="2742"><receiver><data_method_call method_name="cr" super="false" stmt_handle="2743"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2744"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2745"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2746"><receiver><constant type="string">"Statistics for the Long Run Time Variance "</constant></receiver><argument><variable name="Name"/></argument></data_method_call></receiver><argument><constant type="string">" with Accuracy "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2747"><receiver><variable name="Accuracy"/></receiver></data_method_call></argument></data_method_call></receiver></data_method_call></receiver></data_method_call></argument></data_method_call><data_method_call method_name="write" super="false" stmt_handle="2748"><receiver><variable name="LogFile"/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2749"><receiver><data_method_call method_name="logHeading" super="false" stmt_handle="2750"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></receiver><argument><constant type="string">"\t\tAccurate:\n"</constant></argument></data_method_call></argument></data_method_call><data_method_call method_name="write" super="false" stmt_handle="2751"><receiver><variable name="LogFile"/></receiver><argument><constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</constant></argument></data_method_call><data_method_call method_name="close" super="false" stmt_handle="2752"><receiver><variable name="LogFile"/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardRC" native="false"><return_type>LongRunTimeVariance</return_type><argument name="Reward" type="Object"/><argument name="CurrentTime" type="Real"/><argument name="RecurrenceCondition" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2753"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2754"><left_operand><variable name="Reward"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="2755"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2756"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2757"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2758"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2759"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2760"><receiver><self/></receiver><argument><constant type="string">"Reward for Long Run Time Variance must be an Integer or Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="2761"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="Reward"><data_method_call method_name="asReal" super="false" stmt_handle="2762"><receiver><variable name="Reward"/></receiver></data_method_call></assignment></then></if><data_method_call method_name="rewardRC" super="false" stmt_handle="2763"><receiver><variable name="AverageReward"/></receiver><argument><variable name="Reward"/></argument><argument><variable name="CurrentTime"/></argument><argument><variable name="RecurrenceCondition"/></argument></data_method_call><data_method_call method_name="rewardRC" super="false" stmt_handle="2764"><receiver><variable name="AverageSquaredReward"/></receiver><argument><binary_operation operator="*" stmt_handle="2765"><left_operand><variable name="Reward"/></left_operand><right_operand><variable name="Reward"/></right_operand></binary_operation></argument><argument><variable name="CurrentTime"/></argument><argument><variable name="RecurrenceCondition"/></argument></data_method_call><if><condition><variable name="RecurrenceCondition"/></condition><then><assignment variable_name="IntervalEstimation"><binary_operation operator="-" stmt_handle="2766"><left_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2767"><receiver><variable name="AverageSquaredReward"/></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="sqr" super="false" stmt_handle="2768"><receiver><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2769"><receiver><variable name="AverageReward"/></receiver></data_method_call></sequence_of_expressions></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></assignment></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardBM" native="false"><return_type>LongRunTimeVariance</return_type><argument name="Reward" type="Object"/><argument name="CurrentTime" type="Real"/><body_expression><sequence_of_expressions><data_method_call method_name="rewardRC" super="false" stmt_handle="2770"><receiver><self/></receiver><argument><variable name="Reward"/></argument><argument><variable name="CurrentTime"/></argument><argument><binary_operation operator="|" stmt_handle="2771"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2772"><left_operand><data_method_call method_name="getCurrentLength" super="false" stmt_handle="2773"><receiver><variable name="AverageReward"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2774"><left_operand><data_method_call method_name="getCurrentLength" super="false" stmt_handle="2775"><receiver><variable name="AverageReward"/></receiver></data_method_call></left_operand><right_operand><variable name="BatchSize"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></argument></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printHeading" native="false"><return_type>String</return_type><body_expression><return><data_method_call method_name="concat" super="false" stmt_handle="2776"><receiver><constant type="string">"Statistics for Long Run Time Variance with Accuracy "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2777"><receiver><variable name="Accuracy"/></receiver></data_method_call></argument></data_method_call></return></body_expression></data_method></data_class><data_class name="LongRunRateAverage" native="false"><super_class>PerformanceMonitor</super_class><instance_variable name="AverageReward" type="LongRunSampleAverage"/><instance_variable name="AverageTime" type="LongRunSampleAverage"/><instance_variable name="LastTime" type="Real"/><data_method name="withParameters" native="false"><return_type>LongRunRateAverage</return_type><argument name="A" type="Real"/><argument name="CL" type="Real"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2778"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2779"><left_operand><variable name="A"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2780"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2781"><receiver><variable name="A"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2782"><receiver><self/></receiver><argument><constant type="string">"Accuracy parameter for Long Run Rate Average must be a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2783"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2784"><left_operand><variable name="CL"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2785"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2786"><receiver><variable name="CL"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2787"><receiver><self/></receiver><argument><constant type="string">"Confidence Level parameter for Long Run Rate Average must be a Real"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2788"><left_operand><sequence_of_expressions><binary_operation operator="&lt;=" stmt_handle="2789"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="2790"><left_operand><variable name="A"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2791"><receiver><self/></receiver><argument><constant type="string">"Accuracy parameter for Long Run Rate Average must be within the interval (0.0, 1.0)"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="|" stmt_handle="2792"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="2793"><left_operand><variable name="CL"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;=" stmt_handle="2794"><left_operand><variable name="CL"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2795"><receiver><self/></receiver><argument><constant type="string">"ConfidenceLevel parameter for Long Run Rate Average must be within the interval [0.0, 1.0)"</constant></argument></data_method_call></then></if><assignment variable_name="Accuracy"><variable name="A"/></assignment><assignment variable_name="Complete"><constant type="boolean">false</constant></assignment><data_method_call method_name="withConfidenceLevel" super="false" stmt_handle="2796"><receiver><self/></receiver><argument><variable name="CL"/></argument></data_method_call><data_method_call method_name="register" super="false" stmt_handle="2797"><receiver><self/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setBatchSize" native="false"><return_type>LongRunRateAverage</return_type><argument name="M" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2798"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2799"><left_operand><variable name="M"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2800"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2801"><receiver><variable name="M"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2802"><receiver><self/></receiver><argument><constant type="string">"BatchSize parameter for Long Run Rate Average must be an Integer"</constant></argument></data_method_call></then></if><if><condition><binary_operation operator="&gt;" stmt_handle="2803"><left_operand><variable name="M"/></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="BatchSize"><variable name="M"/></assignment><data_method_call method_name="setBatchSize" super="false" stmt_handle="2805"><receiver><variable name="AverageReward"/></receiver><argument><variable name="BatchSize"/></argument></data_method_call><data_method_call method_name="setBatchSize" super="false" stmt_handle="2806"><receiver><variable name="AverageTime"/></receiver><argument><variable name="BatchSize"/></argument></data_method_call></sequence_of_expressions></then><else><data_method_call method_name="error" super="false" stmt_handle="2804"><receiver><self/></receiver><argument><constant type="string">"BatchSize parameter for Long Run Rate Average must be larger than 0"</constant></argument></data_method_call></else></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="logTo" native="false"><return_type>LongRunRateAverage</return_type><argument name="Name" type="String"/><body_expression><sequence_of_expressions><data_method_call method_name="identifyWith" super="false" stmt_handle="2807"><receiver><self/></receiver><argument><variable name="Name"/></argument></data_method_call><assignment variable_name="LogFile"><data_method_call method_name="open" super="false" stmt_handle="2808"><receiver><data_method_call method_name="destination" super="false" stmt_handle="2809"><receiver><new data_class="FileOut"/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2810"><receiver><variable name="Name"/></receiver><argument><constant type="string">".log"</constant></argument></data_method_call></argument></data_method_call></receiver></data_method_call></assignment><data_method_call method_name="writeString" super="false" stmt_handle="2811"><receiver><variable name="LogFile"/></receiver><argument><data_method_call method_name="cr" super="false" stmt_handle="2812"><receiver><data_method_call method_name="cr" super="false" stmt_handle="2813"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2814"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2815"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2816"><receiver><constant type="string">"Statistics for the Long Run Rate Average "</constant></receiver><argument><variable name="Name"/></argument></data_method_call></receiver><argument><constant type="string">" with Accuracy "</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2817"><receiver><variable name="Accuracy"/></receiver></data_method_call></argument></data_method_call></receiver></data_method_call></receiver></data_method_call></argument></data_method_call><data_method_call method_name="writeString" super="false" stmt_handle="2818"><receiver><variable name="LogFile"/></receiver><argument><data_method_call method_name="concat" super="false" stmt_handle="2819"><receiver><data_method_call method_name="logHeading" super="false" stmt_handle="2820"><receiver><variable name="IntervalEstimation"/></receiver></data_method_call></receiver><argument><constant type="string">"\t\tAccurate:\n"</constant></argument></data_method_call></argument></data_method_call><data_method_call method_name="writeString" super="false" stmt_handle="2821"><receiver><variable name="LogFile"/></receiver><argument><constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</constant></argument></data_method_call><data_method_call method_name="close" super="false" stmt_handle="2822"><receiver><variable name="LogFile"/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardRC" native="false"><return_type>LongRunRateAverage</return_type><argument name="Reward" type="Object"/><argument name="CurrentTime" type="Real"/><argument name="RecurrenceCondition" type="Boolean"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2823"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2824"><left_operand><variable name="Reward"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&amp;" stmt_handle="2825"><left_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2826"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2827"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="not" super="false" stmt_handle="2828"><receiver><data_method_call method_name="isOfType" super="false" stmt_handle="2829"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Real"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="2830"><receiver><self/></receiver><argument><constant type="string">"Reward for Long Run Rate Average must be an Integer or Real"</constant></argument></data_method_call></then></if><if><condition><data_method_call method_name="isOfType" super="false" stmt_handle="2831"><receiver><variable name="Reward"/></receiver><argument><constant type="string">"Integer"</constant></argument></data_method_call></condition><then><assignment variable_name="Reward"><data_method_call method_name="asReal" super="false" stmt_handle="2832"><receiver><variable name="Reward"/></receiver></data_method_call></assignment></then></if><if><condition><binary_operation operator="!=" stmt_handle="2833"><left_operand><variable name="LastTime"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><data_method_call method_name="rewardRC" super="false" stmt_handle="2834"><receiver><variable name="AverageReward"/></receiver><argument><variable name="Reward"/></argument><argument><variable name="RecurrenceCondition"/></argument></data_method_call><data_method_call method_name="rewardRC" super="false" stmt_handle="2835"><receiver><variable name="AverageTime"/></receiver><argument><binary_operation operator="-" stmt_handle="2836"><left_operand><variable name="CurrentTime"/></left_operand><right_operand><variable name="LastTime"/></right_operand></binary_operation></argument><argument><variable name="RecurrenceCondition"/></argument></data_method_call></sequence_of_expressions></then></if><assignment variable_name="LastTime"><variable name="CurrentTime"/></assignment><if><condition><variable name="RecurrenceCondition"/></condition><then><assignment variable_name="IntervalEstimation"><binary_operation operator="/" stmt_handle="2837"><left_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2838"><receiver><variable name="AverageReward"/></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2839"><receiver><variable name="AverageTime"/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></assignment></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardBM" native="false"><return_type>LongRunRateAverage</return_type><argument name="Reward" type="Object"/><argument name="CurrentTime" type="Real"/><body_expression><sequence_of_expressions><data_method_call method_name="rewardRC" super="false" stmt_handle="2840"><receiver><self/></receiver><argument><variable name="Reward"/></argument><argument><variable name="CurrentTime"/></argument><argument><binary_operation operator="|" stmt_handle="2841"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2842"><left_operand><data_method_call method_name="getCurrentLength" super="false" stmt_handle="2843"><receiver><variable name="AverageReward"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2844"><left_operand><data_method_call method_name="getCurrentLength" super="false" stmt_handle="2845"><receiver><variable name="AverageReward"/></receiver></data_method_call></left_operand><right_operand><variable name="BatchSize"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></argument></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="withConfidenceLevel" native="false"><return_type>LongRunRateAverage</return_type><argument name="CL" type="Real"/><body_expression><sequence_of_expressions><assignment variable_name="ConfidenceLevel"><variable name="CL"/></assignment><assignment variable_name="AverageReward"><data_method_call method_name="withConfidenceLevel" super="false" stmt_handle="2846"><receiver><new data_class="LongRunSampleAverage"/></receiver><argument><binary_operation operator="/" stmt_handle="2847"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2848"><left_operand><variable name="ConfidenceLevel"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">2.0</constant></right_operand></binary_operation></argument></data_method_call></assignment><assignment variable_name="AverageTime"><data_method_call method_name="withConfidenceLevel" super="false" stmt_handle="2849"><receiver><new data_class="LongRunSampleAverage"/></receiver><argument><binary_operation operator="/" stmt_handle="2850"><left_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2851"><left_operand><variable name="ConfidenceLevel"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><constant type="real">2.0</constant></right_operand></binary_operation></argument></data_method_call></assignment><assignment variable_name="IntervalEstimation"><binary_operation operator="/" stmt_handle="2852"><left_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2853"><receiver><variable name="AverageReward"/></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="getIntervalEstimation" super="false" stmt_handle="2854"><receiver><variable name="AverageTime"/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></assignment><data_method_call method_name="setDefaultBatchSize" super="false" stmt_handle="2855"><receiver><self/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printHeading" native="false"><return_type>String</return_type><body_expression><return><data_method_call method_name="concat" super="false" stmt_handle="2856"><receiver><constant type="string">"Statistics for Long Run Rate Average with Accuracy "</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2857"><receiver><variable name="Accuracy"/></receiver></data_method_call></argument></data_method_call></return></body_expression></data_method></data_class><data_class name="ConfidenceInterval" native="false"><super_class>Object</super_class><instance_variable name="LowerBound" type="Real"/><instance_variable name="UpperBound" type="Real"/><instance_variable name="ConfidenceLevel" type="Real"/><data_method name="negate" native="false"><return_type>ConfidenceInterval</return_type><local_variable name="Lower" type="Real"/><local_variable name="Upper" type="Real"/><body_expression><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedNegate" super="false" stmt_handle="2858"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedNegate" super="false" stmt_handle="2859"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument></data_method_call></assignment><return><data_method_call method_name="withParameters" super="false" stmt_handle="2860"><receiver><new data_class="ConfidenceInterval"/></receiver><argument><variable name="Lower"/></argument><argument><variable name="Upper"/></argument><argument><variable name="ConfidenceLevel"/></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="reciprocal" native="false"><return_type>ConfidenceInterval</return_type><local_variable name="Lower" type="Real"/><local_variable name="Upper" type="Real"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="&amp;" stmt_handle="2861"><left_operand><sequence_of_expressions><data_method_call method_name="extendedLowerLessZero" super="false" stmt_handle="2862"><receiver><self/></receiver></data_method_call></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="extendedUpperGreaterZero" super="false" stmt_handle="2863"><receiver><self/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Lower"><nil/></assignment><assignment variable_name="Upper"><nil/></assignment></sequence_of_expressions></then><else><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedReciprocal" super="false" stmt_handle="2864"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedReciprocal" super="false" stmt_handle="2865"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument></data_method_call></assignment></sequence_of_expressions></else></if><return><data_method_call method_name="withParameters" super="false" stmt_handle="2866"><receiver><new data_class="ConfidenceInterval"/></receiver><argument><variable name="Lower"/></argument><argument><variable name="Upper"/></argument><argument><variable name="ConfidenceLevel"/></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="sqr" native="false"><return_type>ConfidenceInterval</return_type><local_variable name="Lower" type="Real"/><local_variable name="Upper" type="Real"/><body_expression><sequence_of_expressions><if><condition><data_method_call method_name="extendedLowerGreaterEqualZero" super="false" stmt_handle="2867"><receiver><self/></receiver></data_method_call></condition><then><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedTimes" super="false" stmt_handle="2874"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><variable name="LowerBound"/></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedTimes" super="false" stmt_handle="2875"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><variable name="UpperBound"/></argument></data_method_call></assignment></sequence_of_expressions></then><else><if><condition><data_method_call method_name="extendedUpperLessZero" super="false" stmt_handle="2868"><receiver><self/></receiver></data_method_call></condition><then><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedTimes" super="false" stmt_handle="2872"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><variable name="UpperBound"/></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedTimes" super="false" stmt_handle="2873"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><variable name="LowerBound"/></argument></data_method_call></assignment></sequence_of_expressions></then><else><sequence_of_expressions><assignment variable_name="Lower"><constant type="real">0.0</constant></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedMax" super="false" stmt_handle="2869"><receiver><self/></receiver><argument><data_method_call method_name="extendedTimes" super="false" stmt_handle="2870"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><variable name="LowerBound"/></argument></data_method_call></argument><argument><data_method_call method_name="extendedTimes" super="false" stmt_handle="2871"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><variable name="UpperBound"/></argument></data_method_call></argument></data_method_call></assignment></sequence_of_expressions></else></if></else></if><return><data_method_call method_name="withParameters" super="false" stmt_handle="2876"><receiver><new data_class="ConfidenceInterval"/></receiver><argument><variable name="Lower"/></argument><argument><variable name="Upper"/></argument><argument><variable name="ConfidenceLevel"/></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="extendedPlus" native="false"><return_type>Real</return_type><argument name="x" type="Real"/><argument name="y" type="Real"/><body_expression><if><condition><binary_operation operator="|" stmt_handle="2877"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2878"><left_operand><variable name="x"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2879"><left_operand><variable name="y"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><return><nil/></return></then><else><return><binary_operation operator="+" stmt_handle="2880"><left_operand><variable name="x"/></left_operand><right_operand><variable name="y"/></right_operand></binary_operation></return></else></if></body_expression></data_method><data_method name="extendedNegate" native="false"><return_type>Real</return_type><argument name="x" type="Real"/><body_expression><if><condition><binary_operation operator="=" stmt_handle="2881"><left_operand><variable name="x"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><return><nil/></return></then><else><return><unary_operation operator="-" stmt_handle="2882"><operand><variable name="x"/></operand></unary_operation></return></else></if></body_expression></data_method><data_method name="extendedTimes" native="false"><return_type>Real</return_type><argument name="x" type="Real"/><argument name="y" type="Real"/><body_expression><if><condition><binary_operation operator="|" stmt_handle="2883"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2884"><left_operand><variable name="x"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2885"><left_operand><variable name="y"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><return><nil/></return></then><else><return><binary_operation operator="*" stmt_handle="2886"><left_operand><variable name="x"/></left_operand><right_operand><variable name="y"/></right_operand></binary_operation></return></else></if></body_expression></data_method><data_method name="extendedReciprocal" native="false"><return_type>Real</return_type><argument name="x" type="Real"/><body_expression><if><condition><binary_operation operator="=" stmt_handle="2887"><left_operand><variable name="x"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><return><constant type="real">0.0</constant></return></then><else><if><condition><binary_operation operator="=" stmt_handle="2888"><left_operand><variable name="x"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><then><return><nil/></return></then><else><return><binary_operation operator="/" stmt_handle="2889"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="x"/></right_operand></binary_operation></return></else></if></else></if></body_expression></data_method><data_method name="extendedMin" native="false"><return_type>Real</return_type><argument name="x" type="Real"/><argument name="y" type="Real"/><body_expression><if><condition><binary_operation operator="|" stmt_handle="2890"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2891"><left_operand><variable name="x"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2892"><left_operand><variable name="y"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><return><nil/></return></then><else><if><condition><binary_operation operator="&lt;" stmt_handle="2893"><left_operand><variable name="x"/></left_operand><right_operand><variable name="y"/></right_operand></binary_operation></condition><then><return><variable name="x"/></return></then><else><return><variable name="y"/></return></else></if></else></if></body_expression></data_method><data_method name="extendedMax" native="false"><return_type>Real</return_type><argument name="x" type="Real"/><argument name="y" type="Real"/><body_expression><if><condition><binary_operation operator="|" stmt_handle="2894"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2895"><left_operand><variable name="x"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2896"><left_operand><variable name="y"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><return><nil/></return></then><else><if><condition><binary_operation operator="&gt;" stmt_handle="2897"><left_operand><variable name="x"/></left_operand><right_operand><variable name="y"/></right_operand></binary_operation></condition><then><return><variable name="x"/></return></then><else><return><variable name="y"/></return></else></if></else></if></body_expression></data_method><data_method name="extendedLowerLessZero" native="false"><return_type>Boolean</return_type><body_expression><if><condition><binary_operation operator="=" stmt_handle="2898"><left_operand><variable name="LowerBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><return><constant type="boolean">true</constant></return></then><else><return><binary_operation operator="&lt;" stmt_handle="2899"><left_operand><variable name="LowerBound"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></return></else></if></body_expression></data_method><data_method name="extendedLowerGreaterEqualZero" native="false"><return_type>Boolean</return_type><body_expression><if><condition><binary_operation operator="=" stmt_handle="2900"><left_operand><variable name="LowerBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><return><constant type="boolean">false</constant></return></then><else><return><binary_operation operator="&gt;=" stmt_handle="2901"><left_operand><variable name="LowerBound"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></return></else></if></body_expression></data_method><data_method name="extendedUpperLessZero" native="false"><return_type>Boolean</return_type><body_expression><if><condition><binary_operation operator="=" stmt_handle="2902"><left_operand><variable name="UpperBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><return><constant type="boolean">false</constant></return></then><else><return><binary_operation operator="&lt;" stmt_handle="2903"><left_operand><variable name="UpperBound"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></return></else></if></body_expression></data_method><data_method name="extendedUpperGreaterZero" native="false"><return_type>Boolean</return_type><body_expression><if><condition><binary_operation operator="=" stmt_handle="2904"><left_operand><variable name="UpperBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><return><constant type="boolean">true</constant></return></then><else><return><binary_operation operator="&gt;" stmt_handle="2905"><left_operand><variable name="UpperBound"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></return></else></if></body_expression></data_method><data_method name="withParameters" native="false"><return_type>ConfidenceInterval</return_type><argument name="Lower" type="Real"/><argument name="Upper" type="Real"/><argument name="Level" type="Real"/><body_expression><sequence_of_expressions><assignment variable_name="LowerBound"><variable name="Lower"/></assignment><assignment variable_name="UpperBound"><variable name="Upper"/></assignment><assignment variable_name="ConfidenceLevel"><variable name="Level"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="getLowerBound" native="false"><return_type>Real</return_type><body_expression><return><variable name="LowerBound"/></return></body_expression></data_method><data_method name="getUpperBound" native="false"><return_type>Real</return_type><body_expression><return><variable name="UpperBound"/></return></body_expression></data_method><data_method name="getConfidenceLevel" native="false"><return_type>Real</return_type><body_expression><return><variable name="ConfidenceLevel"/></return></body_expression></data_method><data_method name="getRelativeError" native="false"><return_type>Real</return_type><body_expression><if><condition><binary_operation operator="|" stmt_handle="2906"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2907"><left_operand><variable name="LowerBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2908"><left_operand><variable name="UpperBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><return><nil/></return></then><else><if><condition><binary_operation operator="&gt;" stmt_handle="2909"><left_operand><variable name="LowerBound"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><then><return><binary_operation operator="/" stmt_handle="2914"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="2915"><left_operand><variable name="UpperBound"/></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2916"><left_operand><constant type="real">2.0</constant></left_operand><right_operand><variable name="LowerBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></return></then><else><if><condition><binary_operation operator="&lt;" stmt_handle="2910"><left_operand><variable name="UpperBound"/></left_operand><right_operand><constant type="real">0.0</constant></right_operand></binary_operation></condition><then><return><binary_operation operator="/" stmt_handle="2911"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="2912"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="*" stmt_handle="2913"><left_operand><constant type="real">2.0</constant></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></return></then><else><return><nil/></return></else></if></else></if></else></if></body_expression></data_method><data_method name="accurate" native="false"><return_type>Boolean</return_type><argument name="Accuracy" type="Real"/><local_variable name="RelativeError" type="Real"/><body_expression><sequence_of_expressions><assignment variable_name="RelativeError"><data_method_call method_name="getRelativeError" super="false" stmt_handle="2917"><receiver><self/></receiver></data_method_call></assignment><if><condition><binary_operation operator="=" stmt_handle="2918"><left_operand><variable name="RelativeError"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><return><constant type="boolean">false</constant></return></then><else><return><binary_operation operator="&lt;=" stmt_handle="2919"><left_operand><variable name="RelativeError"/></left_operand><right_operand><binary_operation operator="-" stmt_handle="2920"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="Accuracy"/></right_operand></binary_operation></right_operand></binary_operation></return></else></if></sequence_of_expressions></body_expression></data_method><data_method name="result" native="false"><return_type>Real</return_type><body_expression><if><condition><binary_operation operator="&amp;" stmt_handle="2921"><left_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2922"><left_operand><variable name="LowerBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="!=" stmt_handle="2923"><left_operand><variable name="UpperBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><return><binary_operation operator="*" stmt_handle="2924"><left_operand><constant type="real">0.5</constant></left_operand><right_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2925"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></return></then><else><return><nil/></return></else></if></body_expression></data_method><data_method name="printHeading" native="false"><return_type>String</return_type><body_expression><return><constant type="string">"Point Estimation:\tConfidence Interval:\t\t\t\t\t\tConfidence Level:\tRelative Error:"</constant></return></body_expression></data_method><data_method name="printStatistics" native="false"><return_type>String</return_type><local_variable name="RelativeError" type="Real"/><local_variable name="PrintOut" type="String"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2926"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2927"><left_operand><variable name="LowerBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2928"><left_operand><variable name="UpperBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><assignment variable_name="PrintOut"><data_method_call method_name="tab" super="false" stmt_handle="2932"><receiver><constant type="string">"Not Specified"</constant></receiver></data_method_call></assignment></then><else><assignment variable_name="PrintOut"><data_method_call method_name="printString" super="false" stmt_handle="2929"><receiver><sequence_of_expressions><binary_operation operator="*" stmt_handle="2930"><left_operand><constant type="real">0.5</constant></left_operand><right_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2931"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></assignment></else></if><data_method_call method_name="concat" super="false" stmt_handle="2933"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2934"><receiver><variable name="PrintOut"/></receiver></data_method_call></receiver><argument><constant type="string">"["</constant></argument></data_method_call><if><condition><binary_operation operator="=" stmt_handle="2935"><left_operand><variable name="LowerBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="2938"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"-inf"</constant></argument></data_method_call></then><else><data_method_call method_name="concat" super="false" stmt_handle="2936"><receiver><variable name="PrintOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2937"><receiver><variable name="LowerBound"/></receiver></data_method_call></argument></data_method_call></else></if><data_method_call method_name="concat" super="false" stmt_handle="2939"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">", "</constant></argument></data_method_call><if><condition><binary_operation operator="=" stmt_handle="2940"><left_operand><variable name="UpperBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="2943"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"inf"</constant></argument></data_method_call></then><else><data_method_call method_name="concat" super="false" stmt_handle="2941"><receiver><variable name="PrintOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2942"><receiver><variable name="UpperBound"/></receiver></data_method_call></argument></data_method_call></else></if><data_method_call method_name="concat" super="false" stmt_handle="2944"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"]\t"</constant></argument></data_method_call><data_method_call method_name="concat" super="false" stmt_handle="2945"><receiver><variable name="PrintOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2946"><receiver><variable name="ConfidenceLevel"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="tab" super="false" stmt_handle="2947"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2948"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2949"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2950"><receiver><variable name="PrintOut"/></receiver></data_method_call></receiver></data_method_call></receiver></data_method_call></receiver></data_method_call><assignment variable_name="RelativeError"><data_method_call method_name="getRelativeError" super="false" stmt_handle="2951"><receiver><self/></receiver></data_method_call></assignment><if><condition><binary_operation operator="=" stmt_handle="2952"><left_operand><variable name="RelativeError"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="2955"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"inf\n\n\n\n"</constant></argument></data_method_call></then><else><data_method_call method_name="concat" super="false" stmt_handle="2953"><receiver><variable name="PrintOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2954"><receiver><variable name="RelativeError"/></receiver></data_method_call></argument></data_method_call></else></if><return><variable name="PrintOut"/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><data_method_call method_name="concat" super="false" stmt_handle="2956"><receiver><data_method_call method_name="cr" super="false" stmt_handle="2957"><receiver><data_method_call method_name="printHeading" super="false" stmt_handle="2958"><receiver><self/></receiver></data_method_call></receiver></data_method_call></receiver><argument><data_method_call method_name="printStatistics" super="false" stmt_handle="2959"><receiver><self/></receiver></data_method_call></argument></data_method_call></return></body_expression></data_method><data_method name="logHeading" native="false"><return_type>String</return_type><body_expression><return><constant type="string">"Point Estimation:\tConfidence Interval:\t\t\tConfidence Level:\tRelative Error:"</constant></return></body_expression></data_method><data_method name="logStatistics" native="false"><return_type>String</return_type><local_variable name="RelativeError" type="Real"/><local_variable name="LogOut" type="String"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="2960"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2961"><left_operand><variable name="LowerBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2962"><left_operand><variable name="UpperBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><assignment variable_name="LogOut"><data_method_call method_name="tab" super="false" stmt_handle="2966"><receiver><constant type="string">"Not Specified"</constant></receiver></data_method_call></assignment></then><else><assignment variable_name="LogOut"><data_method_call method_name="printString" super="false" stmt_handle="2963"><receiver><sequence_of_expressions><binary_operation operator="*" stmt_handle="2964"><left_operand><constant type="real">0.5</constant></left_operand><right_operand><sequence_of_expressions><binary_operation operator="+" stmt_handle="2965"><left_operand><variable name="LowerBound"/></left_operand><right_operand><variable name="UpperBound"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></sequence_of_expressions></receiver></data_method_call></assignment></else></if><data_method_call method_name="concat" super="false" stmt_handle="2967"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2968"><receiver><variable name="LogOut"/></receiver></data_method_call></receiver><argument><constant type="string">"["</constant></argument></data_method_call><if><condition><binary_operation operator="=" stmt_handle="2969"><left_operand><variable name="LowerBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="2972"><receiver><variable name="LogOut"/></receiver><argument><constant type="string">"-inf"</constant></argument></data_method_call></then><else><data_method_call method_name="concat" super="false" stmt_handle="2970"><receiver><variable name="LogOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2971"><receiver><variable name="LowerBound"/></receiver></data_method_call></argument></data_method_call></else></if><data_method_call method_name="concat" super="false" stmt_handle="2973"><receiver><variable name="LogOut"/></receiver><argument><constant type="string">", "</constant></argument></data_method_call><if><condition><binary_operation operator="=" stmt_handle="2974"><left_operand><variable name="UpperBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="2977"><receiver><variable name="LogOut"/></receiver><argument><constant type="string">"inf"</constant></argument></data_method_call></then><else><data_method_call method_name="concat" super="false" stmt_handle="2975"><receiver><variable name="LogOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2976"><receiver><variable name="UpperBound"/></receiver></data_method_call></argument></data_method_call></else></if><data_method_call method_name="tab" super="false" stmt_handle="2978"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2979"><receiver><variable name="LogOut"/></receiver><argument><constant type="string">"]"</constant></argument></data_method_call></receiver></data_method_call><if><condition><binary_operation operator="&amp;" stmt_handle="2980"><left_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2981"><left_operand><variable name="LowerBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="=" stmt_handle="2982"><left_operand><variable name="UpperBound"/></left_operand><right_operand><nil/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="tab" super="false" stmt_handle="2983"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2984"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2985"><receiver><variable name="LogOut"/></receiver></data_method_call></receiver></data_method_call></receiver></data_method_call></then></if><data_method_call method_name="concat" super="false" stmt_handle="2986"><receiver><variable name="LogOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2987"><receiver><variable name="ConfidenceLevel"/></receiver></data_method_call></argument></data_method_call><data_method_call method_name="tab" super="false" stmt_handle="2988"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2989"><receiver><data_method_call method_name="tab" super="false" stmt_handle="2990"><receiver><variable name="LogOut"/></receiver></data_method_call></receiver></data_method_call></receiver></data_method_call><assignment variable_name="RelativeError"><data_method_call method_name="getRelativeError" super="false" stmt_handle="2991"><receiver><self/></receiver></data_method_call></assignment><if><condition><binary_operation operator="==" stmt_handle="2992"><left_operand><variable name="RelativeError"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><data_method_call method_name="tab" super="false" stmt_handle="2995"><receiver><data_method_call method_name="concat" super="false" stmt_handle="2996"><receiver><variable name="LogOut"/></receiver><argument><constant type="string">"inf"</constant></argument></data_method_call></receiver></data_method_call></then><else><data_method_call method_name="concat" super="false" stmt_handle="2993"><receiver><variable name="LogOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="2994"><receiver><variable name="RelativeError"/></receiver></data_method_call></argument></data_method_call></else></if><return><variable name="LogOut"/></return></sequence_of_expressions></body_expression></data_method><data_method name="+" native="false"><return_type>ConfidenceInterval</return_type><argument name="CI" type="ConfidenceInterval"/><local_variable name="Lower" type="Real"/><local_variable name="Upper" type="Real"/><local_variable name="Level" type="Real"/><body_expression><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedPlus" super="false" stmt_handle="2997"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><data_method_call method_name="getLowerBound" super="false" stmt_handle="2998"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedPlus" super="false" stmt_handle="2999"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><data_method_call method_name="getUpperBound" super="false" stmt_handle="3000"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment><assignment variable_name="Level"><binary_operation operator="-" stmt_handle="3001"><left_operand><binary_operation operator="+" stmt_handle="3002"><left_operand><variable name="ConfidenceLevel"/></left_operand><right_operand><data_method_call method_name="getConfidenceLevel" super="false" stmt_handle="3003"><receiver><variable name="CI"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></assignment><return><data_method_call method_name="withParameters" super="false" stmt_handle="3004"><receiver><new data_class="ConfidenceInterval"/></receiver><argument><variable name="Lower"/></argument><argument><variable name="Upper"/></argument><argument><variable name="Level"/></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="-" native="false"><return_type>ConfidenceInterval</return_type><argument name="CI" type="ConfidenceInterval"/><body_expression><return><binary_operation operator="+" stmt_handle="3005"><left_operand><self/></left_operand><right_operand><data_method_call method_name="negate" super="false" stmt_handle="3006"><receiver><variable name="CI"/></receiver></data_method_call></right_operand></binary_operation></return></body_expression></data_method><data_method name="*" native="false"><return_type>ConfidenceInterval</return_type><argument name="CI" type="ConfidenceInterval"/><local_variable name="Lower" type="Real"/><local_variable name="Upper" type="Real"/><local_variable name="Level" type="Real"/><body_expression><sequence_of_expressions><if><condition><data_method_call method_name="extendedLowerGreaterEqualZero" super="false" stmt_handle="3007"><receiver><self/></receiver></data_method_call></condition><then><if><condition><data_method_call method_name="extendedLowerGreaterEqualZero" super="false" stmt_handle="3043"><receiver><variable name="CI"/></receiver></data_method_call></condition><then><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3053"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><data_method_call method_name="getLowerBound" super="false" stmt_handle="3054"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3055"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><data_method_call method_name="getUpperBound" super="false" stmt_handle="3056"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment></sequence_of_expressions></then><else><if><condition><data_method_call method_name="extendedUpperLessZero" super="false" stmt_handle="3044"><receiver><variable name="CI"/></receiver></data_method_call></condition><then><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3049"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><data_method_call method_name="getLowerBound" super="false" stmt_handle="3050"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3051"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><data_method_call method_name="getUpperBound" super="false" stmt_handle="3052"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment></sequence_of_expressions></then><else><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3045"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><data_method_call method_name="getLowerBound" super="false" stmt_handle="3046"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3047"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><data_method_call method_name="getUpperBound" super="false" stmt_handle="3048"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment></sequence_of_expressions></else></if></else></if></then><else><if><condition><data_method_call method_name="extendedUpperLessZero" super="false" stmt_handle="3008"><receiver><self/></receiver></data_method_call></condition><then><if><condition><data_method_call method_name="extendedLowerGreaterEqualZero" super="false" stmt_handle="3029"><receiver><variable name="CI"/></receiver></data_method_call></condition><then><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3039"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><data_method_call method_name="getUpperBound" super="false" stmt_handle="3040"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3041"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><data_method_call method_name="getLowerBound" super="false" stmt_handle="3042"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment></sequence_of_expressions></then><else><if><condition><data_method_call method_name="extendedUpperLessZero" super="false" stmt_handle="3030"><receiver><variable name="CI"/></receiver></data_method_call></condition><then><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3035"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><data_method_call method_name="getUpperBound" super="false" stmt_handle="3036"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3037"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><data_method_call method_name="getLowerBound" super="false" stmt_handle="3038"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment></sequence_of_expressions></then><else><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3031"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><data_method_call method_name="getUpperBound" super="false" stmt_handle="3032"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3033"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><data_method_call method_name="getLowerBound" super="false" stmt_handle="3034"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment></sequence_of_expressions></else></if></else></if></then><else><if><condition><data_method_call method_name="extendedLowerGreaterEqualZero" super="false" stmt_handle="3009"><receiver><variable name="CI"/></receiver></data_method_call></condition><then><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3025"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><data_method_call method_name="getUpperBound" super="false" stmt_handle="3026"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3027"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><data_method_call method_name="getUpperBound" super="false" stmt_handle="3028"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment></sequence_of_expressions></then><else><if><condition><data_method_call method_name="extendedUpperLessZero" super="false" stmt_handle="3010"><receiver><variable name="CI"/></receiver></data_method_call></condition><then><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3021"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><data_method_call method_name="getLowerBound" super="false" stmt_handle="3022"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedTimes" super="false" stmt_handle="3023"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><data_method_call method_name="getLowerBound" super="false" stmt_handle="3024"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></assignment></sequence_of_expressions></then><else><sequence_of_expressions><assignment variable_name="Lower"><data_method_call method_name="extendedMin" super="false" stmt_handle="3011"><receiver><self/></receiver><argument><data_method_call method_name="extendedTimes" super="false" stmt_handle="3012"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><data_method_call method_name="getUpperBound" super="false" stmt_handle="3013"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></argument><argument><data_method_call method_name="extendedTimes" super="false" stmt_handle="3014"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><data_method_call method_name="getLowerBound" super="false" stmt_handle="3015"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></argument></data_method_call></assignment><assignment variable_name="Upper"><data_method_call method_name="extendedMax" super="false" stmt_handle="3016"><receiver><self/></receiver><argument><data_method_call method_name="extendedTimes" super="false" stmt_handle="3017"><receiver><self/></receiver><argument><variable name="LowerBound"/></argument><argument><data_method_call method_name="getLowerBound" super="false" stmt_handle="3018"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></argument><argument><data_method_call method_name="extendedTimes" super="false" stmt_handle="3019"><receiver><self/></receiver><argument><variable name="UpperBound"/></argument><argument><data_method_call method_name="getUpperBound" super="false" stmt_handle="3020"><receiver><variable name="CI"/></receiver></data_method_call></argument></data_method_call></argument></data_method_call></assignment></sequence_of_expressions></else></if></else></if></else></if></else></if><assignment variable_name="Level"><binary_operation operator="-" stmt_handle="3057"><left_operand><binary_operation operator="+" stmt_handle="3058"><left_operand><variable name="ConfidenceLevel"/></left_operand><right_operand><data_method_call method_name="getConfidenceLevel" super="false" stmt_handle="3059"><receiver><variable name="CI"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></assignment><return><data_method_call method_name="withParameters" super="false" stmt_handle="3060"><receiver><new data_class="ConfidenceInterval"/></receiver><argument><variable name="Lower"/></argument><argument><variable name="Upper"/></argument><argument><variable name="Level"/></argument></data_method_call></return></sequence_of_expressions></body_expression></data_method><data_method name="/" native="false"><return_type>ConfidenceInterval</return_type><argument name="CI" type="ConfidenceInterval"/><body_expression><return><binary_operation operator="*" stmt_handle="3061"><left_operand><self/></left_operand><right_operand><data_method_call method_name="reciprocal" super="false" stmt_handle="3062"><receiver><variable name="CI"/></receiver></data_method_call></right_operand></binary_operation></return></body_expression></data_method></data_class><data_class name="NIMonitors" native="false"><super_class>Object</super_class><instance_variable name="Latency" type="LongRunSampleAverage"/><instance_variable name="NumberOfCollectedLatencyRewards" type="Integer"/><instance_variable name="NumberOfCollectedSendRateRewards" type="Integer"/><instance_variable name="SendRate" type="LongRunTimeAverage"/><data_method name="accurate" native="false"><return_type>Boolean</return_type><body_expression><return><binary_operation operator="&amp;" stmt_handle="3063"><left_operand><data_method_call method_name="accurate" super="false" stmt_handle="3064"><receiver><variable name="Latency"/></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="accurate" super="false" stmt_handle="3065"><receiver><variable name="SendRate"/></receiver></data_method_call></right_operand></binary_operation></return></body_expression></data_method><data_method name="init" native="false"><return_type>NIMonitors</return_type><argument name="MyID" type="Integer"/><body_expression><sequence_of_expressions><assignment variable_name="NumberOfCollectedLatencyRewards"><constant type="integer">0</constant></assignment><assignment variable_name="NumberOfCollectedSendRateRewards"><constant type="integer">0</constant></assignment><assignment variable_name="Latency"><data_method_call method_name="logTo" super="false" stmt_handle="3066"><receiver><data_method_call method_name="setBatchSize" super="false" stmt_handle="3067"><receiver><data_method_call method_name="withParameters" super="false" stmt_handle="3068"><receiver><new data_class="LongRunSampleAverage"/></receiver><argument><constant type="real">0.95</constant></argument><argument><constant type="real">0.95</constant></argument></data_method_call></receiver><argument><constant type="integer">1000</constant></argument></data_method_call></receiver><argument><binary_operation operator="+" stmt_handle="3069"><left_operand><constant type="string">"Latency"</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="3070"><receiver><variable name="MyID"/></receiver></data_method_call></right_operand></binary_operation></argument></data_method_call></assignment><assignment variable_name="SendRate"><data_method_call method_name="logTo" super="false" stmt_handle="3071"><receiver><data_method_call method_name="setBatchSize" super="false" stmt_handle="3072"><receiver><data_method_call method_name="withParameters" super="false" stmt_handle="3073"><receiver><new data_class="LongRunTimeAverage"/></receiver><argument><constant type="real">0.95</constant></argument><argument><constant type="real">0.90</constant></argument></data_method_call></receiver><argument><constant type="integer">1000</constant></argument></data_method_call></receiver><argument><binary_operation operator="+" stmt_handle="3074"><left_operand><constant type="string">"SendRate"</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="3075"><receiver><variable name="MyID"/></receiver></data_method_call></right_operand></binary_operation></argument></data_method_call></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="log" native="false"><return_type>NIMonitors</return_type><body_expression><sequence_of_expressions><data_method_call method_name="log" super="false" stmt_handle="3076"><receiver><variable name="SendRate"/></receiver></data_method_call><data_method_call method_name="log" super="false" stmt_handle="3077"><receiver><variable name="Latency"/></receiver></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="PrintOut" type="String"/><body_expression><sequence_of_expressions><assignment variable_name="PrintOut"><binary_operation operator="+" stmt_handle="3078"><left_operand><data_method_call method_name="cr" super="false" stmt_handle="3079"><receiver><constant type="string">"Statistics for the actual Send Rate at the sending part of the Network Interface:"</constant></receiver></data_method_call></left_operand><right_operand><data_method_call method_name="cr" super="false" stmt_handle="3080"><receiver><data_method_call method_name="cr" super="false" stmt_handle="3081"><receiver><data_method_call method_name="printStatistics" super="false" stmt_handle="3082"><receiver><variable name="SendRate"/></receiver></data_method_call></receiver></data_method_call></receiver></data_method_call></right_operand></binary_operation></assignment><assignment variable_name="PrintOut"><binary_operation operator="+" stmt_handle="3083"><left_operand><binary_operation operator="+" stmt_handle="3084"><left_operand><variable name="PrintOut"/></left_operand><right_operand><data_method_call method_name="cr" super="false" stmt_handle="3085"><receiver><constant type="string">"Statistics for packet Latency at the receiving side of the Network Interface:"</constant></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printStatistics" super="false" stmt_handle="3086"><receiver><variable name="Latency"/></receiver></data_method_call></right_operand></binary_operation></assignment><return><variable name="PrintOut"/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardLatency" native="false"><return_type>NIMonitors</return_type><argument name="l" type="Real"/><body_expression><sequence_of_expressions><data_method_call method_name="rewardBM" super="false" stmt_handle="3087"><receiver><variable name="Latency"/></receiver><argument><variable name="l"/></argument></data_method_call><assignment variable_name="NumberOfCollectedLatencyRewards"><binary_operation operator="+" stmt_handle="3088"><left_operand><variable name="NumberOfCollectedLatencyRewards"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><if><condition><binary_operation operator="=" stmt_handle="3089"><left_operand><data_method_call method_name="modulo" super="false" stmt_handle="3090"><receiver><variable name="NumberOfCollectedLatencyRewards"/></receiver><argument><constant type="integer">1000</constant></argument></data_method_call></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><data_method_call method_name="log" super="false" stmt_handle="3091"><receiver><variable name="Latency"/></receiver></data_method_call></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="rewardSendRate" native="false"><return_type>NIMonitors</return_type><argument name="r" type="Real"/><argument name="t" type="Real"/><body_expression><sequence_of_expressions><data_method_call method_name="rewardBM" super="false" stmt_handle="3092"><receiver><variable name="SendRate"/></receiver><argument><variable name="r"/></argument><argument><variable name="t"/></argument></data_method_call><assignment variable_name="NumberOfCollectedSendRateRewards"><binary_operation operator="+" stmt_handle="3093"><left_operand><variable name="NumberOfCollectedSendRateRewards"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><if><condition><binary_operation operator="=" stmt_handle="3094"><left_operand><data_method_call method_name="modulo" super="false" stmt_handle="3095"><receiver><variable name="NumberOfCollectedSendRateRewards"/></receiver><argument><constant type="integer">1000</constant></argument></data_method_call></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><data_method_call method_name="log" super="false" stmt_handle="3096"><receiver><variable name="SendRate"/></receiver></data_method_call></then></if><return><self/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Packet" native="false"><super_class>Object</super_class><instance_variable name="Source" type="Integer"/><instance_variable name="Destination" type="Integer"/><instance_variable name="EntranceTime" type="Real"/><instance_variable name="Number" type="Integer"/><data_method name="getDestination" native="false"><return_type>Integer</return_type><body_expression><return><variable name="Destination"/></return></body_expression></data_method><data_method name="getEntranceTime" native="false"><return_type>Real</return_type><body_expression><return><variable name="EntranceTime"/></return></body_expression></data_method><data_method name="getNumber" native="false"><return_type>Integer</return_type><body_expression><return><variable name="Number"/></return></body_expression></data_method><data_method name="getSource" native="false"><return_type>Integer</return_type><body_expression><return><variable name="Source"/></return></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><binary_operation operator="+" stmt_handle="3206"><left_operand><binary_operation operator="+" stmt_handle="3207"><left_operand><binary_operation operator="+" stmt_handle="3208"><left_operand><binary_operation operator="+" stmt_handle="3209"><left_operand><data_method_call method_name="printString" super="false" stmt_handle="3210"><receiver><variable name="Number"/></receiver></data_method_call></left_operand><right_operand><constant type="string">":"</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="3211"><receiver><variable name="Source"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">"-&gt;"</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="3212"><receiver><variable name="Destination"/></receiver></data_method_call></right_operand></binary_operation></return></body_expression></data_method><data_method name="setDestination" native="false"><return_type>Packet</return_type><argument name="d" type="Integer"/><body_expression><sequence_of_expressions><assignment variable_name="Destination"><variable name="d"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setEntranceTime" native="false"><return_type>Packet</return_type><argument name="t" type="Real"/><body_expression><sequence_of_expressions><assignment variable_name="EntranceTime"><variable name="t"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setNumber" native="false"><return_type>Packet</return_type><argument name="n" type="Integer"/><body_expression><sequence_of_expressions><assignment variable_name="Number"><variable name="n"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="setSource" native="false"><return_type>Packet</return_type><argument name="s" type="Integer"/><body_expression><sequence_of_expressions><assignment variable_name="Source"><variable name="s"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="NodeMap" native="false"><super_class>Object</super_class><instance_variable name="Coordinates" type="Matrix"/><data_method name="getCoordinatesOf" native="false"><return_type>XYCoords</return_type><argument name="NodeID" type="Integer"/><local_variable name="ID" type="Integer"/><local_variable name="i" type="Integer"/><local_variable name="j" type="Integer"/><local_variable name="Coords" type="XYCoords"/><body_expression><sequence_of_expressions><assignment variable_name="ID"><constant type="integer">1</constant></assignment><assignment variable_name="j"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="3259"><left_operand><variable name="j"/></left_operand><right_operand><data_method_call method_name="at" super="false" stmt_handle="3260"><receiver><data_method_call method_name="size" super="false" stmt_handle="3261"><receiver><variable name="Coordinates"/></receiver></data_method_call></receiver><argument><constant type="integer">1</constant></argument></data_method_call></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="i"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="3262"><left_operand><variable name="i"/></left_operand><right_operand><data_method_call method_name="at" super="false" stmt_handle="3263"><receiver><data_method_call method_name="size" super="false" stmt_handle="3264"><receiver><variable name="Coordinates"/></receiver></data_method_call></receiver><argument><constant type="integer">2</constant></argument></data_method_call></right_operand></binary_operation></condition><body><sequence_of_expressions><if><condition><binary_operation operator="=" stmt_handle="3265"><left_operand><variable name="ID"/></left_operand><right_operand><variable name="NodeID"/></right_operand></binary_operation></condition><then><assignment variable_name="Coords"><data_method_call method_name="at" super="false" stmt_handle="3266"><receiver><variable name="Coordinates"/></receiver><argument><variable name="j"/></argument><argument><variable name="i"/></argument></data_method_call></assignment></then></if><assignment variable_name="ID"><binary_operation operator="+" stmt_handle="3267"><left_operand><variable name="ID"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><assignment variable_name="i"><binary_operation operator="+" stmt_handle="3268"><left_operand><variable name="i"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><assignment variable_name="j"><binary_operation operator="+" stmt_handle="3269"><left_operand><variable name="j"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><return><sequence_of_expressions><variable name="Coords"/></sequence_of_expressions></return></sequence_of_expressions></body_expression></data_method><data_method name="init" native="false"><return_type>NodeMap</return_type><argument name="NumberOfXNodes" type="Integer"/><argument name="NumberOfYNodes" type="Integer"/><local_variable name="i" type="Integer"/><local_variable name="j" type="Integer"/><body_expression><sequence_of_expressions><assignment variable_name="Coordinates"><data_method_call method_name="resize" super="false" stmt_handle="3270"><receiver><new data_class="Matrix"/></receiver><argument><variable name="NumberOfYNodes"/></argument><argument><variable name="NumberOfXNodes"/></argument></data_method_call></assignment><assignment variable_name="j"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="3271"><left_operand><variable name="j"/></left_operand><right_operand><variable name="NumberOfYNodes"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="i"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="3272"><left_operand><variable name="i"/></left_operand><right_operand><variable name="NumberOfXNodes"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="putAt" super="false" stmt_handle="3273"><receiver><variable name="Coordinates"/></receiver><argument><variable name="j"/></argument><argument><variable name="i"/></argument><argument><data_method_call method_name="init" super="false" stmt_handle="3274"><receiver><new data_class="XYCoords"/></receiver><argument><variable name="i"/></argument><argument><variable name="j"/></argument></data_method_call></argument></data_method_call><assignment variable_name="i"><binary_operation operator="+" stmt_handle="3275"><left_operand><variable name="i"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><assignment variable_name="j"><binary_operation operator="+" stmt_handle="3276"><left_operand><variable name="j"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><sequence_of_expressions><data_method_call method_name="printString" super="false" stmt_handle="3277"><receiver><variable name="Coordinates"/></receiver></data_method_call></sequence_of_expressions></return></body_expression></data_method></data_class><data_class name="Flit" native="false"><super_class>Object</super_class><instance_variable name="p" type="Packet"/><instance_variable name="destination" type="Integer"/><data_method name="getDestination" native="false"><return_type>Integer</return_type><body_expression><return><variable name="destination"/></return></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><sequence_of_expressions><binary_operation operator="+" stmt_handle="3350"><left_operand><binary_operation operator="+" stmt_handle="3351"><left_operand><constant type="string">"(a flit for NI "</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="3352"><receiver><variable name="destination"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></sequence_of_expressions></return></body_expression></data_method><data_method name="setDestination" native="false"><return_type>Flit</return_type><argument name="d" type="Integer"/><body_expression><sequence_of_expressions><assignment variable_name="destination"><variable name="d"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="getPacket" native="false"><return_type>Packet</return_type><body_expression><return><variable name="p"/></return></body_expression></data_method><data_method name="setPacket" native="false"><return_type>Flit</return_type><argument name="q" type="Packet"/><body_expression><sequence_of_expressions><assignment variable_name="p"><variable name="q"/></assignment><data_method_call method_name="setDestination" super="false" stmt_handle="3353"><receiver><self/></receiver><argument><data_method_call method_name="getDestination" super="false" stmt_handle="3354"><receiver><variable name="q"/></receiver></data_method_call></argument></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="Matrix" native="false"><super_class>Object</super_class><instance_variable name="NrOfColumns" type="Integer"/><instance_variable name="NrOfRows" type="Integer"/><instance_variable name="Rows" type="Array"/><data_method name="at" native="false"><return_type>Object</return_type><argument name="RowIndex" type="Integer"/><argument name="ColumnIndex" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="3355"><left_operand><binary_operation operator="|" stmt_handle="3356"><left_operand><binary_operation operator="|" stmt_handle="3357"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="3358"><left_operand><variable name="RowIndex"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="3359"><left_operand><variable name="ColumnIndex"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="3360"><left_operand><variable name="RowIndex"/></left_operand><right_operand><variable name="NrOfRows"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="3361"><left_operand><variable name="ColumnIndex"/></left_operand><right_operand><variable name="NrOfColumns"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="3362"><receiver><self/></receiver><argument><constant type="string">"Matrix: Index out of bounds"</constant></argument></data_method_call></then></if><return><sequence_of_expressions><data_method_call method_name="at" super="false" stmt_handle="3363"><receiver><data_method_call method_name="at" super="false" stmt_handle="3364"><receiver><variable name="Rows"/></receiver><argument><variable name="RowIndex"/></argument></data_method_call></receiver><argument><variable name="ColumnIndex"/></argument></data_method_call></sequence_of_expressions></return></sequence_of_expressions></body_expression></data_method><data_method name="size" native="false"><return_type>Array</return_type><body_expression><return><sequence_of_expressions><data_method_call method_name="putAt" super="false" stmt_handle="3365"><receiver><data_method_call method_name="putAt" super="false" stmt_handle="3366"><receiver><data_method_call method_name="resize" super="false" stmt_handle="3367"><receiver><new data_class="Array"/></receiver><argument><constant type="integer">2</constant></argument></data_method_call></receiver><argument><constant type="integer">1</constant></argument><argument><variable name="NrOfRows"/></argument></data_method_call></receiver><argument><constant type="integer">2</constant></argument><argument><variable name="NrOfColumns"/></argument></data_method_call></sequence_of_expressions></return></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><local_variable name="PrintOut" type="String"/><local_variable name="RowIndex" type="Integer"/><local_variable name="ColumnIndex" type="Integer"/><body_expression><sequence_of_expressions><assignment variable_name="PrintOut"><data_method_call method_name="cr" super="false" stmt_handle="3368"><receiver><data_method_call method_name="concat" super="false" stmt_handle="3369"><receiver><data_method_call method_name="concat" super="false" stmt_handle="3370"><receiver><data_method_call method_name="concat" super="false" stmt_handle="3371"><receiver><data_method_call method_name="concat" super="false" stmt_handle="3372"><receiver><constant type="string">"Matrix("</constant></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="3373"><receiver><variable name="NrOfRows"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">","</constant></argument></data_method_call></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="3374"><receiver><variable name="NrOfColumns"/></receiver></data_method_call></argument></data_method_call></receiver><argument><constant type="string">"):"</constant></argument></data_method_call></receiver></data_method_call></assignment><assignment variable_name="RowIndex"><constant type="integer">0</constant></assignment><while><condition><binary_operation operator="&lt;" stmt_handle="3375"><left_operand><variable name="RowIndex"/></left_operand><right_operand><variable name="NrOfRows"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="RowIndex"><binary_operation operator="+" stmt_handle="3376"><left_operand><variable name="RowIndex"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><assignment variable_name="ColumnIndex"><constant type="integer">0</constant></assignment><data_method_call method_name="concat" super="false" stmt_handle="3377"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">"("</constant></argument></data_method_call><while><condition><binary_operation operator="&lt;" stmt_handle="3378"><left_operand><variable name="ColumnIndex"/></left_operand><right_operand><variable name="NrOfColumns"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="ColumnIndex"><binary_operation operator="+" stmt_handle="3379"><left_operand><variable name="ColumnIndex"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><data_method_call method_name="concat" super="false" stmt_handle="3380"><receiver><variable name="PrintOut"/></receiver><argument><data_method_call method_name="printString" super="false" stmt_handle="3381"><receiver><data_method_call method_name="at" super="false" stmt_handle="3382"><receiver><data_method_call method_name="at" super="false" stmt_handle="3383"><receiver><variable name="Rows"/></receiver><argument><variable name="RowIndex"/></argument></data_method_call></receiver><argument><variable name="ColumnIndex"/></argument></data_method_call></receiver></data_method_call></argument></data_method_call><if><condition><binary_operation operator="&lt;" stmt_handle="3384"><left_operand><variable name="ColumnIndex"/></left_operand><right_operand><variable name="NrOfColumns"/></right_operand></binary_operation></condition><then><data_method_call method_name="concat" super="false" stmt_handle="3385"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">",	"</constant></argument></data_method_call></then></if></sequence_of_expressions></body></while><data_method_call method_name="cr" super="false" stmt_handle="3386"><receiver><data_method_call method_name="concat" super="false" stmt_handle="3387"><receiver><variable name="PrintOut"/></receiver><argument><constant type="string">")"</constant></argument></data_method_call></receiver></data_method_call></sequence_of_expressions></body></while><return><sequence_of_expressions><variable name="PrintOut"/></sequence_of_expressions></return></sequence_of_expressions></body_expression></data_method><data_method name="putAt" native="false"><return_type>Matrix</return_type><argument name="RowIndex" type="Integer"/><argument name="ColumnIndex" type="Integer"/><argument name="anObject" type="Object"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="|" stmt_handle="3388"><left_operand><binary_operation operator="|" stmt_handle="3389"><left_operand><binary_operation operator="|" stmt_handle="3390"><left_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="3391"><left_operand><variable name="RowIndex"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&lt;" stmt_handle="3392"><left_operand><variable name="ColumnIndex"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="3393"><left_operand><variable name="RowIndex"/></left_operand><right_operand><variable name="NrOfRows"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="&gt;" stmt_handle="3394"><left_operand><variable name="ColumnIndex"/></left_operand><right_operand><variable name="NrOfColumns"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></condition><then><data_method_call method_name="error" super="false" stmt_handle="3395"><receiver><self/></receiver><argument><constant type="string">"Matrix: Index out of bounds"</constant></argument></data_method_call></then></if><data_method_call method_name="putAt" super="false" stmt_handle="3396"><receiver><data_method_call method_name="at" super="false" stmt_handle="3397"><receiver><variable name="Rows"/></receiver><argument><variable name="RowIndex"/></argument></data_method_call></receiver><argument><variable name="ColumnIndex"/></argument><argument><variable name="anObject"/></argument></data_method_call><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="putAll" native="false"><return_type>Matrix</return_type><argument name="anObject" type="Object"/><local_variable name="RowIndex" type="Integer"/><body_expression><sequence_of_expressions><assignment variable_name="RowIndex"><constant type="integer">1</constant></assignment><while><condition><binary_operation operator="&lt;=" stmt_handle="3398"><left_operand><variable name="RowIndex"/></left_operand><right_operand><variable name="NrOfRows"/></right_operand></binary_operation></condition><body><sequence_of_expressions><data_method_call method_name="putAll" super="false" stmt_handle="3399"><receiver><data_method_call method_name="at" super="false" stmt_handle="3400"><receiver><variable name="Rows"/></receiver><argument><variable name="RowIndex"/></argument></data_method_call></receiver><argument><variable name="anObject"/></argument></data_method_call><assignment variable_name="RowIndex"><binary_operation operator="+" stmt_handle="3401"><left_operand><variable name="RowIndex"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="resize" native="false"><return_type>Matrix</return_type><argument name="numberOfRows" type="Integer"/><argument name="numberOfColumns" type="Integer"/><local_variable name="Index" type="Integer"/><body_expression><sequence_of_expressions><if><condition><binary_operation operator="==" stmt_handle="3402"><left_operand><variable name="Rows"/></left_operand><right_operand><nil/></right_operand></binary_operation></condition><then><sequence_of_expressions><assignment variable_name="Rows"><new data_class="Array"/></assignment><assignment variable_name="NrOfRows"><constant type="integer">0</constant></assignment></sequence_of_expressions></then></if><assignment variable_name="NrOfColumns"><variable name="numberOfColumns"/></assignment><data_method_call method_name="resize" super="false" stmt_handle="3403"><receiver><variable name="Rows"/></receiver><argument><variable name="numberOfRows"/></argument></data_method_call><if><condition><binary_operation operator="&gt;" stmt_handle="3404"><left_operand><variable name="NrOfRows"/></left_operand><right_operand><variable name="numberOfRows"/></right_operand></binary_operation></condition><then><assignment variable_name="NrOfRows"><variable name="numberOfRows"/></assignment></then></if><assignment variable_name="Index"><constant type="integer">0</constant></assignment><while><condition><binary_operation operator="&lt;" stmt_handle="3405"><left_operand><variable name="Index"/></left_operand><right_operand><variable name="NrOfRows"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="Index"><binary_operation operator="+" stmt_handle="3406"><left_operand><variable name="Index"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><data_method_call method_name="resize" super="false" stmt_handle="3407"><receiver><data_method_call method_name="at" super="false" stmt_handle="3408"><receiver><variable name="Rows"/></receiver><argument><variable name="Index"/></argument></data_method_call></receiver><argument><variable name="NrOfColumns"/></argument></data_method_call></sequence_of_expressions></body></while><while><condition><binary_operation operator="&lt;" stmt_handle="3409"><left_operand><variable name="NrOfRows"/></left_operand><right_operand><variable name="numberOfRows"/></right_operand></binary_operation></condition><body><sequence_of_expressions><assignment variable_name="NrOfRows"><binary_operation operator="+" stmt_handle="3410"><left_operand><variable name="NrOfRows"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><data_method_call method_name="putAt" super="false" stmt_handle="3411"><receiver><variable name="Rows"/></receiver><argument><variable name="NrOfRows"/></argument><argument><data_method_call method_name="resize" super="false" stmt_handle="3412"><receiver><new data_class="Array"/></receiver><argument><variable name="NrOfColumns"/></argument></data_method_call></argument></data_method_call></sequence_of_expressions></body></while><return><self/></return></sequence_of_expressions></body_expression></data_method></data_class><data_class name="XYCoords" native="false"><super_class>Object</super_class><instance_variable name="X" type="Integer"/><instance_variable name="Y" type="Integer"/><data_method name="getX" native="false"><return_type>Integer</return_type><body_expression><return><sequence_of_expressions><variable name="X"/></sequence_of_expressions></return></body_expression></data_method><data_method name="getY" native="false"><return_type>Integer</return_type><body_expression><return><sequence_of_expressions><variable name="Y"/></sequence_of_expressions></return></body_expression></data_method><data_method name="init" native="false"><return_type>XYCoords</return_type><argument name="A" type="Integer"/><argument name="B" type="Integer"/><body_expression><sequence_of_expressions><assignment variable_name="X"><variable name="A"/></assignment><assignment variable_name="Y"><variable name="B"/></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="minus" native="false"><return_type>XYCoords</return_type><argument name="C" type="XYCoords"/><body_expression><return><sequence_of_expressions><data_method_call method_name="init" super="false" stmt_handle="3413"><receiver><new data_class="XYCoords"/></receiver><argument><binary_operation operator="-" stmt_handle="3414"><left_operand><variable name="X"/></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="getX" super="false" stmt_handle="3415"><receiver><variable name="C"/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></argument><argument><binary_operation operator="-" stmt_handle="3416"><left_operand><variable name="Y"/></left_operand><right_operand><sequence_of_expressions><data_method_call method_name="getY" super="false" stmt_handle="3417"><receiver><variable name="C"/></receiver></data_method_call></sequence_of_expressions></right_operand></binary_operation></argument></data_method_call></sequence_of_expressions></return></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><sequence_of_expressions><binary_operation operator="+" stmt_handle="3418"><left_operand><binary_operation operator="+" stmt_handle="3419"><left_operand><binary_operation operator="+" stmt_handle="3420"><left_operand><binary_operation operator="+" stmt_handle="3421"><left_operand><constant type="string">"("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="3422"><receiver><variable name="Y"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="3423"><receiver><variable name="X"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></sequence_of_expressions></return></body_expression></data_method></data_class><data_class name="MeshFlit" native="false"><super_class>Flit</super_class><instance_variable name="XCoordinate" type="Integer"/><instance_variable name="YCoordinate" type="Integer"/><data_method name="decrXCoordinate" native="false"><return_type>Flit</return_type><body_expression><sequence_of_expressions><assignment variable_name="XCoordinate"><binary_operation operator="-" stmt_handle="3213"><left_operand><variable name="XCoordinate"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="decrYCoordinate" native="false"><return_type>Flit</return_type><body_expression><sequence_of_expressions><assignment variable_name="YCoordinate"><binary_operation operator="-" stmt_handle="3214"><left_operand><variable name="YCoordinate"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="getXCoordinate" native="false"><return_type>Integer</return_type><body_expression><return><sequence_of_expressions><variable name="XCoordinate"/></sequence_of_expressions></return></body_expression></data_method><data_method name="getYCoordinate" native="false"><return_type>Integer</return_type><body_expression><return><sequence_of_expressions><variable name="YCoordinate"/></sequence_of_expressions></return></body_expression></data_method><data_method name="incrXCoordinate" native="false"><return_type>Flit</return_type><body_expression><sequence_of_expressions><assignment variable_name="XCoordinate"><binary_operation operator="+" stmt_handle="3215"><left_operand><variable name="XCoordinate"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="incrYCoordinate" native="false"><return_type>Flit</return_type><body_expression><sequence_of_expressions><assignment variable_name="YCoordinate"><binary_operation operator="+" stmt_handle="3216"><left_operand><variable name="YCoordinate"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method><data_method name="printString" native="false"><return_type>String</return_type><body_expression><return><sequence_of_expressions><binary_operation operator="+" stmt_handle="3217"><left_operand><binary_operation operator="+" stmt_handle="3218"><left_operand><binary_operation operator="+" stmt_handle="3219"><left_operand><binary_operation operator="+" stmt_handle="3220"><left_operand><constant type="string">"("</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="3221"><receiver><variable name="XCoordinate"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">", "</constant></right_operand></binary_operation></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="3222"><receiver><variable name="YCoordinate"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">")"</constant></right_operand></binary_operation></sequence_of_expressions></return></body_expression></data_method><data_method name="setDestinationCoordinates" native="false"><return_type>Flit</return_type><argument name="d" type="XYCoords"/><body_expression><sequence_of_expressions><assignment variable_name="XCoordinate"><data_method_call method_name="getX" super="false" stmt_handle="3223"><receiver><variable name="d"/></receiver></data_method_call></assignment><assignment variable_name="YCoordinate"><data_method_call method_name="getY" super="false" stmt_handle="3224"><receiver><variable name="d"/></receiver></data_method_call></assignment><return><self/></return></sequence_of_expressions></body_expression></data_method></data_class></data_classes><process_classes><process_class name="Node"><interface><port name="NI"><message type="write" name="Packet"><argument type="Packet"/></message><message type="read" name="Packet"><argument type="Packet"/></message></port></interface><instantiation_parameter name="AccuracyCheckInterval" type="Real"/><instantiation_parameter name="LinkCapacity" type="Real"/><instantiation_parameter name="Load" type="Real"/><instantiation_parameter name="MeanBurstSize" type="Real"/><instantiation_parameter name="MyID" type="Integer"/><instantiation_parameter name="NumberOfNodes" type="Integer"/><instance_variable name="ArrayOfDestinations" type="Array"/><instance_variable name="DestinationIndexDistribution" type="Distribution"/><instance_variable name="IdleTimeDistribution" type="Distribution"/><instance_variable name="TransitionDistribution" type="Bernoulli"/><instance_variable name="Monitors" type="NIMonitors"/><instance_variable name="PacketNumber" type="Integer"/><instance_variable name="PacketsReceived" type="Integer"/><initial_method_call><process_method_call method_name="Initialise" stmt_handle="3183"/></initial_method_call><process_method name="Initialise"><local_variable name="P" type="Real"/><local_variable name="Lambda" type="Real"/><local_variable name="i" type="Integer"/><local_variable name="j" type="Integer"/><body_statement><sequence_of_statements stmt_handle="3097"><expression stmt_handle="3100"><assignment variable_name="P"><binary_operation operator="/" stmt_handle="3098"><left_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="3099"><left_operand><variable name="MeanBurstSize"/></left_operand><right_operand><constant type="real">1.0</constant></right_operand></binary_operation></sequence_of_expressions></left_operand><right_operand><variable name="MeanBurstSize"/></right_operand></binary_operation></assignment></expression><expression stmt_handle="3106"><assignment variable_name="Lambda"><binary_operation operator="/" stmt_handle="3101"><left_operand><binary_operation operator="*" stmt_handle="3102"><left_operand><binary_operation operator="*" stmt_handle="3103"><left_operand><variable name="Load"/></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="3104"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="P"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></left_operand><right_operand><variable name="LinkCapacity"/></right_operand></binary_operation></left_operand><right_operand><sequence_of_expressions><binary_operation operator="-" stmt_handle="3105"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="Load"/></right_operand></binary_operation></sequence_of_expressions></right_operand></binary_operation></assignment></expression><expression stmt_handle="3108"><assignment variable_name="TransitionDistribution"><data_method_call method_name="withParameter" super="false" stmt_handle="3107"><receiver><new data_class="Bernoulli"/></receiver><argument><variable name="P"/></argument></data_method_call></assignment></expression><expression stmt_handle="3110"><assignment variable_name="IdleTimeDistribution"><data_method_call method_name="withParameter" super="false" stmt_handle="3109"><receiver><new data_class="Exponential"/></receiver><argument><variable name="Lambda"/></argument></data_method_call></assignment></expression><expression stmt_handle="3111"><assignment variable_name="PacketNumber"><constant type="integer">1</constant></assignment></expression><expression stmt_handle="3112"><assignment variable_name="PacketsReceived"><constant type="integer">0</constant></assignment></expression><expression stmt_handle="3115"><assignment variable_name="ArrayOfDestinations"><data_method_call method_name="resize" super="false" stmt_handle="3113"><receiver><new data_class="Array"/></receiver><argument><binary_operation operator="-" stmt_handle="3114"><left_operand><variable name="NumberOfNodes"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></argument></data_method_call></assignment></expression><expression stmt_handle="3116"><assignment variable_name="i"><constant type="integer">1</constant></assignment></expression><expression stmt_handle="3117"><assignment variable_name="j"><constant type="integer">1</constant></assignment></expression><while stmt_handle="3118"><condition><binary_operation operator="&lt;" stmt_handle="3119"><left_operand><variable name="i"/></left_operand><right_operand><variable name="NumberOfNodes"/></right_operand></binary_operation></condition><body><sequence_of_statements stmt_handle="3120"><if stmt_handle="3121"><condition><binary_operation operator="!=" stmt_handle="3122"><left_operand><variable name="j"/></left_operand><right_operand><variable name="MyID"/></right_operand></binary_operation></condition><then><sequence_of_statements stmt_handle="3123"><expression stmt_handle="3125"><data_method_call method_name="putAt" super="false" stmt_handle="3124"><receiver><variable name="ArrayOfDestinations"/></receiver><argument><variable name="i"/></argument><argument><variable name="j"/></argument></data_method_call></expression><expression stmt_handle="3127"><assignment variable_name="i"><binary_operation operator="+" stmt_handle="3126"><left_operand><variable name="i"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></expression></sequence_of_statements></then></if><expression stmt_handle="3129"><assignment variable_name="j"><binary_operation operator="+" stmt_handle="3128"><left_operand><variable name="j"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></expression></sequence_of_statements></body></while><expression stmt_handle="3132"><assignment variable_name="DestinationIndexDistribution"><data_method_call method_name="withParameters" super="false" stmt_handle="3130"><receiver><new data_class="DiscreteUniform"/></receiver><argument><constant type="integer">1</constant></argument><argument><binary_operation operator="-" stmt_handle="3131"><left_operand><variable name="NumberOfNodes"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></argument></data_method_call></assignment></expression><expression stmt_handle="3134"><assignment variable_name="Monitors"><data_method_call method_name="init" super="false" stmt_handle="3133"><receiver><new data_class="NIMonitors"/></receiver><argument><variable name="MyID"/></argument></data_method_call></assignment></expression><parallel_statements stmt_handle="3135"><process_method_call method_name="Idle" stmt_handle="3136"/><process_method_call method_name="ReceivePacket" stmt_handle="3137"/><process_method_call method_name="CheckAccuracy" stmt_handle="3138"/></parallel_statements></sequence_of_statements></body_statement></process_method><process_method name="Burst"><argument name="Destination" type="Integer"/><local_variable name="p" type="Packet"/><body_statement><sequence_of_statements stmt_handle="3139"><expression stmt_handle="3143"><assignment variable_name="p"><data_method_call method_name="setDestination" super="false" stmt_handle="3140"><receiver><data_method_call method_name="setSource" super="false" stmt_handle="3141"><receiver><data_method_call method_name="setNumber" super="false" stmt_handle="3142"><receiver><new data_class="Packet"/></receiver><argument><variable name="PacketNumber"/></argument></data_method_call></receiver><argument><variable name="MyID"/></argument></data_method_call></receiver><argument><variable name="Destination"/></argument></data_method_call></assignment></expression><message_send message_name="Packet" stmt_handle="3144"><argument><variable name="p"/></argument><atomic_expression><assignment variable_name="PacketNumber"><binary_operation operator="+" stmt_handle="3145"><left_operand><variable name="PacketNumber"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></atomic_expression><port>NI</port></message_send><expression stmt_handle="3147"><data_method_call method_name="rewardSendRate" super="false" stmt_handle="3146"><receiver><variable name="Monitors"/></receiver><argument><variable name="LinkCapacity"/></argument><argument><current_time/></argument></data_method_call></expression><delay stmt_handle="3149"><sequence_of_expressions><binary_operation operator="/" stmt_handle="3148"><left_operand><constant type="real">1.0</constant></left_operand><right_operand><variable name="LinkCapacity"/></right_operand></binary_operation></sequence_of_expressions></delay><expression stmt_handle="3151"><data_method_call method_name="rewardSendRate" super="false" stmt_handle="3150"><receiver><variable name="Monitors"/></receiver><argument><constant type="real">0.0</constant></argument><argument><current_time/></argument></data_method_call></expression><if stmt_handle="3152"><condition><data_method_call method_name="yieldsSuccess" super="false" stmt_handle="3153"><receiver><variable name="TransitionDistribution"/></receiver></data_method_call></condition><then><process_method_call method_name="Burst" stmt_handle="3154"><argument><variable name="Destination"/></argument></process_method_call></then><else><process_method_call method_name="Idle" stmt_handle="3155"/></else></if></sequence_of_statements></body_statement></process_method><process_method name="CheckAccuracy"><body_statement><sequence_of_statements stmt_handle="3156"><delay stmt_handle="3157"><sequence_of_expressions><variable name="AccuracyCheckInterval"/></sequence_of_expressions></delay><if stmt_handle="3158"><condition><data_method_call method_name="not" super="false" stmt_handle="3159"><receiver><data_method_call method_name="accurate" super="false" stmt_handle="3160"><receiver><variable name="Monitors"/></receiver></data_method_call></receiver></data_method_call></condition><then><process_method_call method_name="CheckAccuracy" stmt_handle="3161"/></then></if></sequence_of_statements></body_statement></process_method><process_method name="Idle"><body_statement><sequence_of_statements stmt_handle="3162"><delay stmt_handle="3164"><sequence_of_expressions><data_method_call method_name="sample" super="false" stmt_handle="3163"><receiver><variable name="IdleTimeDistribution"/></receiver></data_method_call></sequence_of_expressions></delay><process_method_call method_name="Burst" stmt_handle="3165"><argument><data_method_call method_name="at" super="false" stmt_handle="3166"><receiver><variable name="ArrayOfDestinations"/></receiver><argument><data_method_call method_name="sample" super="false" stmt_handle="3167"><receiver><variable name="DestinationIndexDistribution"/></receiver></data_method_call></argument></data_method_call></argument></process_method_call></sequence_of_statements></body_statement></process_method><process_method name="ReceivePacket"><local_variable name="p" type="Packet"/><body_statement><sequence_of_statements stmt_handle="3168"><message_receive message_name="Packet" stmt_handle="3169"><variable>p</variable><atomic_expression><sequence_of_expressions><data_method_call method_name="rewardLatency" super="false" stmt_handle="3170"><receiver><variable name="Monitors"/></receiver><argument><binary_operation operator="-" stmt_handle="3171"><left_operand><current_time/></left_operand><right_operand><data_method_call method_name="getEntranceTime" super="false" stmt_handle="3172"><receiver><variable name="p"/></receiver></data_method_call></right_operand></binary_operation></argument></data_method_call><assignment variable_name="PacketsReceived"><binary_operation operator="+" stmt_handle="3173"><left_operand><variable name="PacketsReceived"/></left_operand><right_operand><constant type="integer">1</constant></right_operand></binary_operation></assignment></sequence_of_expressions></atomic_expression><port>NI</port></message_receive><if stmt_handle="3174"><condition><binary_operation operator="!=" stmt_handle="3175"><left_operand><data_method_call method_name="getDestination" super="false" stmt_handle="3176"><receiver><variable name="p"/></receiver></data_method_call></left_operand><right_operand><variable name="MyID"/></right_operand></binary_operation></condition><then><expression stmt_handle="3181"><data_method_call method_name="error" super="false" stmt_handle="3177"><receiver><variable name="p"/></receiver><argument><binary_operation operator="+" stmt_handle="3178"><left_operand><binary_operation operator="+" stmt_handle="3179"><left_operand><constant type="string">"Packet "</constant></left_operand><right_operand><data_method_call method_name="printString" super="false" stmt_handle="3180"><receiver><variable name="p"/></receiver></data_method_call></right_operand></binary_operation></left_operand><right_operand><constant type="string">" arrived at wrong destination"</constant></right_operand></binary_operation></argument></data_method_call></expression></then></if><process_method_call method_name="ReceivePacket" stmt_handle="3182"/></sequence_of_statements></body_statement></process_method></process_class><process_class name="NetworkInterface"><interface><port name="Network"><message type="write" name="Flit"><argument type="Flit"/></message><message type="read" name="Flit"><argument type="Flit"/></message></port><port name="Node"><message type="write" name="Packet"><argument type="Packet"/></message><message type="read" name="Packet"><argument type="Packet"/></message></port></interface><instantiation_parameter name="BufferCapacity" type="Integer"/><instantiation_parameter name="MyID" type="Integer"/><instantiation_parameter name="TransferDelay" type="Real"/><instance_variable name="InputBuffer" type="Queue"/><initial_method_call><process_method_call method_name="Initialise" stmt_handle="3258"/></initial_method_call><process_method name="Initialise"><body_statement><sequence_of_statements stmt_handle="3225"><expression stmt_handle="3227"><assignment variable_name="InputBuffer"><data_method_call method_name="resize" super="false" stmt_handle="3226"><receiver><new data_class="Queue"/></receiver><argument><variable name="BufferCapacity"/></argument></data_method_call></assignment></expression><parallel_statements stmt_handle="3228"><process_method_call method_name="ReceiveFromNode" stmt_handle="3229"/><process_method_call method_name="ForwardToNetwork" stmt_handle="3230"/><process_method_call method_name="TransferNetwork2Node" stmt_handle="3231"/></parallel_statements></sequence_of_statements></body_statement></process_method><process_method name="ForwardToNetwork"><body_statement><sequence_of_statements stmt_handle="3232"><guard stmt_handle="3233"><expression><data_method_call method_name="not" super="false" stmt_handle="3237"><receiver><data_method_call method_name="isEmpty" super="false" stmt_handle="3238"><receiver><variable name="InputBuffer"/></receiver></data_method_call></receiver></data_method_call></expression><statement><message_send message_name="Flit" stmt_handle="3234"><argument><data_method_call method_name="setPacket" super="false" stmt_handle="3235"><receiver><new data_class="Flit"/></receiver><argument><data_method_call method_name="inspect" super="false" stmt_handle="3236"><receiver><variable name="InputBuffer"/></receiver></data_method_call></argument></data_method_call></argument><port>Network</port></message_send></statement></guard><delay stmt_handle="3239"><sequence_of_expressions><variable name="TransferDelay"/></sequence_of_expressions></delay><expression stmt_handle="3241"><data_method_call method_name="remove" super="false" stmt_handle="3240"><receiver><variable name="InputBuffer"/></receiver></data_method_call></expression><process_method_call method_name="ForwardToNetwork" stmt_handle="3242"/></sequence_of_statements></body_statement></process_method><process_method name="ReceiveFromNode"><local_variable name="p" type="Packet"/><body_statement><sequence_of_statements stmt_handle="3243"><guard stmt_handle="3244"><expression><data_method_call method_name="not" super="false" stmt_handle="3248"><receiver><data_method_call method_name="isFull" super="false" stmt_handle="3249"><receiver><variable name="InputBuffer"/></receiver></data_method_call></receiver></data_method_call></expression><statement><message_receive message_name="Packet" stmt_handle="3245"><variable>p</variable><atomic_expression><data_method_call method_name="add" super="false" stmt_handle="3246"><receiver><variable name="InputBuffer"/></receiver><argument><data_method_call method_name="setEntranceTime" super="false" stmt_handle="3247"><receiver><variable name="p"/></receiver><argument><current_time/></argument></data_method_call></argument></data_method_call></atomic_expression><port>Node</port></message_receive></statement></guard><process_method_call method_name="ReceiveFromNode" stmt_handle="3250"/></sequence_of_statements></body_statement></process_method><process_method name="TransferNetwork2Node"><local_variable name="f" type="Flit"/><body_statement><sequence_of_statements stmt_handle="3251"><message_receive message_name="Flit" stmt_handle="3252"><variable>f</variable><condition><binary_operation operator="=" stmt_handle="3253"><left_operand><data_method_call method_name="getDestination" super="false" stmt_handle="3254"><receiver><variable name="f"/></receiver></data_method_call></left_operand><right_operand><variable name="MyID"/></right_operand></binary_operation></condition><port>Network</port></message_receive><message_send message_name="Packet" stmt_handle="3255"><argument><data_method_call method_name="getPacket" super="false" stmt_handle="3256"><receiver><variable name="f"/></receiver></data_method_call></argument><port>Node</port></message_send><process_method_call method_name="TransferNetwork2Node" stmt_handle="3257"/></sequence_of_statements></body_statement></process_method></process_class><process_class name="Fifo"><interface><port name="In"><message type="read" name="Flit"><argument type="Flit"/></message></port><port name="Out"><message type="write" name="Flit"><argument type="Flit"/></message></port></interface><instantiation_parameter name="Capacity" type="Integer"/><instantiation_parameter name="ProcessingTime" type="Real"/><instance_variable name="Buffer" type="Queue"/><initial_method_call><process_method_call method_name="Initialise" stmt_handle="3303"/></initial_method_call><process_method name="HandleInput"><local_variable name="f" type="Flit"/><body_statement><sequence_of_statements stmt_handle="3278"><guard stmt_handle="3279"><expression><data_method_call method_name="not" super="false" stmt_handle="3282"><receiver><data_method_call method_name="isFull" super="false" stmt_handle="3283"><receiver><variable name="Buffer"/></receiver></data_method_call></receiver></data_method_call></expression><statement><message_receive message_name="Flit" stmt_handle="3280"><variable>f</variable><atomic_expression><data_method_call method_name="add" super="false" stmt_handle="3281"><receiver><variable name="Buffer"/></receiver><argument><variable name="f"/></argument></data_method_call></atomic_expression><port>In</port></message_receive></statement></guard><delay stmt_handle="3284"><sequence_of_expressions><variable name="ProcessingTime"/></sequence_of_expressions></delay><process_method_call method_name="HandleInput" stmt_handle="3285"/></sequence_of_statements></body_statement></process_method><process_method name="HandleOutput"><local_variable name="f" type="Flit"/><body_statement><sequence_of_statements stmt_handle="3286"><guard stmt_handle="3287"><expression><data_method_call method_name="not" super="false" stmt_handle="3290"><receiver><data_method_call method_name="isEmpty" super="false" stmt_handle="3291"><receiver><variable name="Buffer"/></receiver></data_method_call></receiver></data_method_call></expression><statement><expression stmt_handle="3289"><assignment variable_name="f"><data_method_call method_name="inspect" super="false" stmt_handle="3288"><receiver><variable name="Buffer"/></receiver></data_method_call></assignment></expression></statement></guard><message_send message_name="Flit" stmt_handle="3292"><argument><variable name="f"/></argument><port>Out</port></message_send><delay stmt_handle="3293"><sequence_of_expressions><variable name="ProcessingTime"/></sequence_of_expressions></delay><expression stmt_handle="3295"><data_method_call method_name="remove" super="false" stmt_handle="3294"><receiver><variable name="Buffer"/></receiver></data_method_call></expression><process_method_call method_name="HandleOutput" stmt_handle="3296"/></sequence_of_statements></body_statement></process_method><process_method name="Initialise"><body_statement><sequence_of_statements stmt_handle="3297"><expression stmt_handle="3299"><assignment variable_name="Buffer"><data_method_call method_name="resize" super="false" stmt_handle="3298"><receiver><new data_class="Queue"/></receiver><argument><variable name="Capacity"/></argument></data_method_call></assignment></expression><parallel_statements stmt_handle="3300"><process_method_call method_name="HandleInput" stmt_handle="3301"/><process_method_call method_name="HandleOutput" stmt_handle="3302"/></parallel_statements></sequence_of_statements></body_statement></process_method></process_class><process_class name="NegativeRouter"><interface><port name="In"><message type="read" name="Flit"><argument type="MeshFlit"/></message></port><port name="IXR"><message type="read" name="Flit"><argument type="MeshFlit"/></message></port><port name="IYB"><message type="read" name="Flit"><argument type="MeshFlit"/></message></port><port name="Out"><message type="write" name="Flit"><argument type="MeshFlit"/></message></port><port name="OXL"><message type="write" name="Flit"><argument type="MeshFlit"/></message></port><port name="OYT"><message type="write" name="Flit"><argument type="MeshFlit"/></message></port></interface><instantiation_parameter name="ProcessingTime" type="Real"/><initial_method_call><process_method_call method_name="TransferFlit" stmt_handle="3326"/></initial_method_call><process_method name="TransferFlit"><local_variable name="f" type="Flit"/><body_statement><sequence_of_statements stmt_handle="3304"><select_statements stmt_handle="3305"><message_receive message_name="Flit" stmt_handle="3306"><variable>f</variable><port>In</port></message_receive><message_receive message_name="Flit" stmt_handle="3307"><variable>f</variable><port>IXR</port></message_receive><message_receive message_name="Flit" stmt_handle="3308"><variable>f</variable><port>IYB</port></message_receive></select_statements><delay stmt_handle="3309"><sequence_of_expressions><variable name="ProcessingTime"/></sequence_of_expressions></delay><if stmt_handle="3310"><condition><binary_operation operator="&lt;" stmt_handle="3311"><left_operand><data_method_call method_name="getXCoordinate" super="false" stmt_handle="3312"><receiver><variable name="f"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_statements stmt_handle="3313"><expression stmt_handle="3315"><data_method_call method_name="incrXCoordinate" super="false" stmt_handle="3314"><receiver><variable name="f"/></receiver></data_method_call></expression><message_send message_name="Flit" stmt_handle="3316"><argument><variable name="f"/></argument><port>OXL</port></message_send></sequence_of_statements></then><else><if stmt_handle="3317"><condition><binary_operation operator="&lt;" stmt_handle="3318"><left_operand><data_method_call method_name="getYCoordinate" super="false" stmt_handle="3319"><receiver><variable name="f"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_statements stmt_handle="3320"><expression stmt_handle="3322"><data_method_call method_name="incrYCoordinate" super="false" stmt_handle="3321"><receiver><variable name="f"/></receiver></data_method_call></expression><message_send message_name="Flit" stmt_handle="3323"><argument><variable name="f"/></argument><port>OYT</port></message_send></sequence_of_statements></then><else><message_send message_name="Flit" stmt_handle="3324"><argument><variable name="f"/></argument><port>Out</port></message_send></else></if></else></if><process_method_call method_name="TransferFlit" stmt_handle="3325"/></sequence_of_statements></body_statement></process_method></process_class><process_class name="PositiveRouter"><interface><port name="In"><message type="read" name="Flit"><argument type="MeshFlit"/></message></port><port name="IXL"><message type="read" name="Flit"><argument type="MeshFlit"/></message></port><port name="IYT"><message type="read" name="Flit"><argument type="MeshFlit"/></message></port><port name="Out"><message type="write" name="Flit"><argument type="MeshFlit"/></message></port><port name="OXR"><message type="write" name="Flit"><argument type="MeshFlit"/></message></port><port name="OYB"><message type="write" name="Flit"><argument type="MeshFlit"/></message></port></interface><instantiation_parameter name="ProcessingTime" type="Real"/><initial_method_call><process_method_call method_name="TransferFlit" stmt_handle="3349"/></initial_method_call><process_method name="TransferFlit"><local_variable name="f" type="Flit"/><body_statement><sequence_of_statements stmt_handle="3327"><select_statements stmt_handle="3328"><message_receive message_name="Flit" stmt_handle="3329"><variable>f</variable><port>In</port></message_receive><message_receive message_name="Flit" stmt_handle="3330"><variable>f</variable><port>IXL</port></message_receive><message_receive message_name="Flit" stmt_handle="3331"><variable>f</variable><port>IYT</port></message_receive></select_statements><delay stmt_handle="3332"><sequence_of_expressions><variable name="ProcessingTime"/></sequence_of_expressions></delay><if stmt_handle="3333"><condition><binary_operation operator="&gt;" stmt_handle="3334"><left_operand><data_method_call method_name="getXCoordinate" super="false" stmt_handle="3335"><receiver><variable name="f"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_statements stmt_handle="3336"><expression stmt_handle="3338"><data_method_call method_name="decrXCoordinate" super="false" stmt_handle="3337"><receiver><variable name="f"/></receiver></data_method_call></expression><message_send message_name="Flit" stmt_handle="3339"><argument><variable name="f"/></argument><port>OXR</port></message_send></sequence_of_statements></then><else><if stmt_handle="3340"><condition><binary_operation operator="&gt;" stmt_handle="3341"><left_operand><data_method_call method_name="getYCoordinate" super="false" stmt_handle="3342"><receiver><variable name="f"/></receiver></data_method_call></left_operand><right_operand><constant type="integer">0</constant></right_operand></binary_operation></condition><then><sequence_of_statements stmt_handle="3343"><expression stmt_handle="3345"><data_method_call method_name="decrYCoordinate" super="false" stmt_handle="3344"><receiver><variable name="f"/></receiver></data_method_call></expression><message_send message_name="Flit" stmt_handle="3346"><argument><variable name="f"/></argument><port>OYB</port></message_send></sequence_of_statements></then><else><message_send message_name="Flit" stmt_handle="3347"><argument><variable name="f"/></argument><port>Out</port></message_send></else></if></else></if><process_method_call method_name="TransferFlit" stmt_handle="3348"/></sequence_of_statements></body_statement></process_method></process_class><process_class name="MeshNetworkInterface"><interface><port name="Network"><message type="write" name="Flit"><argument type="Flit"/></message><message type="read" name="Flit"><argument type="Flit"/></message></port><port name="Node"><message type="write" name="Packet"><argument type="Packet"/></message><message type="read" name="Packet"><argument type="Packet"/></message></port></interface><super_class>NetworkInterface</super_class><instantiation_parameter name="NumberOfXNodes" type="Integer"/><instantiation_parameter name="NumberOfYNodes" type="Integer"/><instance_variable name="Locator" type="NodeMap"/><initial_method_call><process_method_call method_name="InitialiseMesh" stmt_handle="3205"/></initial_method_call><process_method name="ForwardToNetwork"><local_variable name="p" type="Packet"/><local_variable name="f" type="Flit"/><body_statement><sequence_of_statements stmt_handle="3184"><guard stmt_handle="3185"><expression><data_method_call method_name="not" super="false" stmt_handle="3188"><receiver><data_method_call method_name="isEmpty" super="false" stmt_handle="3189"><receiver><variable name="InputBuffer"/></receiver></data_method_call></receiver></data_method_call></expression><statement><expression stmt_handle="3187"><assignment variable_name="p"><data_method_call method_name="inspect" super="false" stmt_handle="3186"><receiver><variable name="InputBuffer"/></receiver></data_method_call></assignment></expression></statement></guard><expression stmt_handle="3196"><assignment variable_name="f"><data_method_call method_name="setDestinationCoordinates" super="false" stmt_handle="3190"><receiver><data_method_call method_name="setPacket" super="false" stmt_handle="3191"><receiver><new data_class="MeshFlit"/></receiver><argument><variable name="p"/></argument></data_method_call></receiver><argument><data_method_call method_name="minus" super="false" stmt_handle="3192"><receiver><data_method_call method_name="getCoordinatesOf" super="false" stmt_handle="3193"><receiver><variable name="Locator"/></receiver><argument><data_method_call method_name="getDestination" super="false" stmt_handle="3194"><receiver><variable name="p"/></receiver></data_method_call></argument></data_method_call></receiver><argument><data_method_call method_name="getCoordinatesOf" super="false" stmt_handle="3195"><receiver><variable name="Locator"/></receiver><argument><variable name="MyID"/></argument></data_method_call></argument></data_method_call></argument></data_method_call></assignment></expression><message_send message_name="Flit" stmt_handle="3197"><argument><variable name="f"/></argument><port>Network</port></message_send><expression stmt_handle="3199"><data_method_call method_name="remove" super="false" stmt_handle="3198"><receiver><variable name="InputBuffer"/></receiver></data_method_call></expression><process_method_call method_name="ForwardToNetwork" stmt_handle="3200"/></sequence_of_statements></body_statement></process_method><process_method name="InitialiseMesh"><body_statement><sequence_of_statements stmt_handle="3201"><expression stmt_handle="3203"><assignment variable_name="Locator"><data_method_call method_name="init" super="false" stmt_handle="3202"><receiver><new data_class="NodeMap"/></receiver><argument><variable name="NumberOfXNodes"/></argument><argument><variable name="NumberOfYNodes"/></argument></data_method_call></assignment></expression><process_method_call method_name="Initialise" stmt_handle="3204"/></sequence_of_statements></body_statement></process_method></process_class></process_classes><cluster_classes><cluster_class name="Router"><interface><port name="In"/><port name="IXL"/><port name="IXR"/><port name="IYB"/><port name="IYT"/><port name="Out"/><port name="OXL"/><port name="OXR"/><port name="OYB"/><port name="OYT"/></interface><instantiation_parameter name="FifoCapacity" type="Integer"/><instantiation_parameter name="FifoProcessingTime" type="Real"/><instantiation_parameter name="RouterProcessingTime" type="Real"/><channel name="0"/><channel name="1"/><channel output_port="In" name="2"/><channel output_port="IXL" name="3"/><channel output_port="IXR" name="4"/><channel output_port="IYB" name="5"/><channel output_port="IYT" name="6"/><channel output_port="Out" name="7"/><channel output_port="OXL" name="8"/><channel output_port="OXR" name="9"/><channel output_port="OYB" name="10"/><channel output_port="OYT" name="11"/><instance type="process" class="Fifo" name="FiFo"><instantiation_expression parameter_name="Capacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="ProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><connection port="In" channel="0"/><connection port="Out" channel="1"/></instance><instance type="process" class="NegativeRouter" name="NegativeRouter"><instantiation_expression parameter_name="ProcessingTime"><body_expression><variable name="RouterProcessingTime"/></body_expression></instantiation_expression><connection port="In" channel="1"/><connection port="IXR" channel="4"/><connection port="IYB" channel="5"/><connection port="Out" channel="7"/><connection port="OXL" channel="8"/><connection port="OYT" channel="11"/></instance><instance type="process" class="PositiveRouter" name="PositiveRouter"><instantiation_expression parameter_name="ProcessingTime"><body_expression><variable name="RouterProcessingTime"/></body_expression></instantiation_expression><connection port="Out" channel="0"/><connection port="In" channel="2"/><connection port="IXL" channel="3"/><connection port="IYT" channel="6"/><connection port="OXR" channel="9"/><connection port="OYB" channel="10"/></instance></cluster_class><cluster_class name="Mesh2x2"><interface><port name="In1"/><port name="In2"/><port name="In3"/><port name="In4"/><port name="IXL1"/><port name="IXL3"/><port name="IXR2"/><port name="IXR4"/><port name="IYB3"/><port name="IYB4"/><port name="IYT1"/><port name="IYT2"/><port name="Out1"/><port name="Out2"/><port name="Out3"/><port name="Out4"/><port name="OXL1"/><port name="OXL3"/><port name="OXR2"/><port name="OXR4"/><port name="OYB3"/><port name="OYB4"/><port name="OYT1"/><port name="OYT2"/></interface><instantiation_parameter name="FifoCapacity" type="Integer"/><instantiation_parameter name="FifoProcessingTime" type="Real"/><instantiation_parameter name="RouterProcessingTime" type="Real"/><channel output_port="In1" name="0"/><channel output_port="In2" name="1"/><channel output_port="In3" name="2"/><channel output_port="In4" name="3"/><channel output_port="IXL1" name="4"/><channel name="5"/><channel output_port="IXL3" name="6"/><channel name="7"/><channel name="8"/><channel output_port="IXR2" name="9"/><channel name="10"/><channel output_port="IXR4" name="11"/><channel name="12"/><channel name="13"/><channel output_port="IYB3" name="14"/><channel output_port="IYB4" name="15"/><channel output_port="IYT1" name="16"/><channel output_port="IYT2" name="17"/><channel name="18"/><channel name="19"/><channel output_port="Out1" name="20"/><channel output_port="Out2" name="21"/><channel output_port="Out3" name="22"/><channel output_port="Out4" name="23"/><channel output_port="OXL1" name="24"/><channel name="25"/><channel output_port="OXL3" name="26"/><channel name="27"/><channel name="28"/><channel output_port="OXR2" name="29"/><channel name="30"/><channel output_port="OXR4" name="31"/><channel name="32"/><channel name="33"/><channel output_port="OYB3" name="34"/><channel output_port="OYB4" name="35"/><channel output_port="OYT1" name="36"/><channel output_port="OYT2" name="37"/><channel name="38"/><channel name="39"/><instance type="process" class="Fifo" name="F12"><instantiation_expression parameter_name="Capacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="ProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><connection port="Out" channel="5"/><connection port="In" channel="28"/></instance><instance type="process" class="Fifo" name="F13"><instantiation_expression parameter_name="Capacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="ProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><connection port="Out" channel="18"/><connection port="In" channel="32"/></instance><instance type="process" class="Fifo" name="F21"><instantiation_expression parameter_name="Capacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="ProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><connection port="Out" channel="8"/><connection port="In" channel="25"/></instance><instance type="process" class="Fifo" name="F24"><instantiation_expression parameter_name="Capacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="ProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><connection port="Out" channel="19"/><connection port="In" channel="33"/></instance><instance type="process" class="Fifo" name="F31"><instantiation_expression parameter_name="Capacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="ProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><connection port="Out" channel="12"/><connection port="In" channel="38"/></instance><instance type="process" class="Fifo" name="F34"><instantiation_expression parameter_name="Capacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="ProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><connection port="Out" channel="7"/><connection port="In" channel="30"/></instance><instance type="process" class="Fifo" name="F42"><instantiation_expression parameter_name="Capacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="ProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><connection port="Out" channel="13"/><connection port="In" channel="39"/></instance><instance type="process" class="Fifo" name="F43"><instantiation_expression parameter_name="Capacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="ProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><connection port="Out" channel="10"/><connection port="In" channel="27"/></instance><instance type="cluster" class="Router" name="R1"><instantiation_expression parameter_name="FifoCapacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="FifoProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><instantiation_expression parameter_name="RouterProcessingTime"><body_expression><variable name="RouterProcessingTime"/></body_expression></instantiation_expression><connection port="In" channel="0"/><connection port="IXL" channel="4"/><connection port="IXR" channel="8"/><connection port="IYB" channel="12"/><connection port="IYT" channel="16"/><connection port="Out" channel="20"/><connection port="OXL" channel="24"/><connection port="OXR" channel="28"/><connection port="OYB" channel="32"/><connection port="OYT" channel="36"/></instance><instance type="cluster" class="Router" name="R2"><instantiation_expression parameter_name="FifoCapacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="FifoProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><instantiation_expression parameter_name="RouterProcessingTime"><body_expression><variable name="RouterProcessingTime"/></body_expression></instantiation_expression><connection port="In" channel="1"/><connection port="IXL" channel="5"/><connection port="IXR" channel="9"/><connection port="IYB" channel="13"/><connection port="IYT" channel="17"/><connection port="Out" channel="21"/><connection port="OXL" channel="25"/><connection port="OXR" channel="29"/><connection port="OYB" channel="33"/><connection port="OYT" channel="37"/></instance><instance type="cluster" class="Router" name="R3"><instantiation_expression parameter_name="FifoCapacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="FifoProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><instantiation_expression parameter_name="RouterProcessingTime"><body_expression><variable name="RouterProcessingTime"/></body_expression></instantiation_expression><connection port="In" channel="2"/><connection port="IXL" channel="6"/><connection port="IXR" channel="10"/><connection port="IYB" channel="14"/><connection port="IYT" channel="18"/><connection port="Out" channel="22"/><connection port="OXL" channel="26"/><connection port="OXR" channel="30"/><connection port="OYB" channel="34"/><connection port="OYT" channel="38"/></instance><instance type="cluster" class="Router" name="R4"><instantiation_expression parameter_name="FifoCapacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="FifoProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><instantiation_expression parameter_name="RouterProcessingTime"><body_expression><variable name="RouterProcessingTime"/></body_expression></instantiation_expression><connection port="In" channel="3"/><connection port="IXL" channel="7"/><connection port="IXR" channel="11"/><connection port="IYB" channel="15"/><connection port="IYT" channel="19"/><connection port="Out" channel="23"/><connection port="OXL" channel="27"/><connection port="OXR" channel="31"/><connection port="OYB" channel="35"/><connection port="OYT" channel="39"/></instance></cluster_class><cluster_class name="MeshBasedNetwork"><interface><port name="Node1"/><port name="Node2"/><port name="Node3"/><port name="Node4"/></interface><instantiation_parameter name="FifoCapacity" type="Integer"/><instantiation_parameter name="FifoProcessingTime" type="Real"/><instantiation_parameter name="NIBufferCapacity" type="Integer"/><instantiation_parameter name="NumberOfXNodes" type="Integer"/><instantiation_parameter name="NumberOfYNodes" type="Integer"/><instantiation_parameter name="RouterProcessingTime" type="Real"/><instantiation_parameter name="TransferDelay" type="Real"/><channel name="0"/><channel name="1"/><channel name="2"/><channel name="3"/><channel output_port="Node1" name="4"/><channel output_port="Node2" name="5"/><channel output_port="Node3" name="6"/><channel output_port="Node4" name="7"/><instance type="cluster" class="Mesh2x2" name="Mesh"><instantiation_expression parameter_name="FifoCapacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="FifoProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><instantiation_expression parameter_name="RouterProcessingTime"><body_expression><variable name="RouterProcessingTime"/></body_expression></instantiation_expression><connection port="Out1" channel="0"/><connection port="In1" channel="0"/><connection port="Out2" channel="1"/><connection port="In2" channel="1"/><connection port="Out3" channel="2"/><connection port="In3" channel="2"/><connection port="Out4" channel="3"/><connection port="In4" channel="3"/></instance><instance type="process" class="MeshNetworkInterface" name="NI1"><instantiation_expression parameter_name="BufferCapacity"><body_expression><variable name="NIBufferCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MyID"><body_expression><constant type="integer">1</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfXNodes"><body_expression><variable name="NumberOfXNodes"/></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfYNodes"><body_expression><variable name="NumberOfYNodes"/></body_expression></instantiation_expression><instantiation_expression parameter_name="TransferDelay"><body_expression><variable name="TransferDelay"/></body_expression></instantiation_expression><connection port="Network" channel="0"/><connection port="Node" channel="4"/></instance><instance type="process" class="MeshNetworkInterface" name="NI2"><instantiation_expression parameter_name="BufferCapacity"><body_expression><variable name="NIBufferCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MyID"><body_expression><constant type="integer">2</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfXNodes"><body_expression><variable name="NumberOfXNodes"/></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfYNodes"><body_expression><variable name="NumberOfYNodes"/></body_expression></instantiation_expression><instantiation_expression parameter_name="TransferDelay"><body_expression><variable name="TransferDelay"/></body_expression></instantiation_expression><connection port="Network" channel="1"/><connection port="Node" channel="5"/></instance><instance type="process" class="MeshNetworkInterface" name="NI3"><instantiation_expression parameter_name="BufferCapacity"><body_expression><variable name="NIBufferCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MyID"><body_expression><constant type="integer">3</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfXNodes"><body_expression><variable name="NumberOfXNodes"/></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfYNodes"><body_expression><variable name="NumberOfYNodes"/></body_expression></instantiation_expression><instantiation_expression parameter_name="TransferDelay"><body_expression><variable name="TransferDelay"/></body_expression></instantiation_expression><connection port="Network" channel="2"/><connection port="Node" channel="6"/></instance><instance type="process" class="MeshNetworkInterface" name="NI4"><instantiation_expression parameter_name="BufferCapacity"><body_expression><variable name="NIBufferCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MyID"><body_expression><constant type="integer">4</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfXNodes"><body_expression><variable name="NumberOfXNodes"/></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfYNodes"><body_expression><variable name="NumberOfYNodes"/></body_expression></instantiation_expression><instantiation_expression parameter_name="TransferDelay"><body_expression><variable name="TransferDelay"/></body_expression></instantiation_expression><connection port="Network" channel="3"/><connection port="Node" channel="7"/></instance></cluster_class><cluster_class name="SoC_Mesh"><interface/><instantiation_parameter name="AccuracyCheckInterval" type="Real"/><instantiation_parameter name="FifoCapacity" type="Integer"/><instantiation_parameter name="FifoProcessingTime" type="Real"/><instantiation_parameter name="LinkCapacity" type="Real"/><instantiation_parameter name="Load" type="Real"/><instantiation_parameter name="MeanBurstSize" type="Real"/><instantiation_parameter name="NIBufferCapacity" type="Integer"/><instantiation_parameter name="NumberOfXNodes" type="Integer"/><instantiation_parameter name="NumberOfYNodes" type="Integer"/><instantiation_parameter name="RouterProcessingTime" type="Real"/><instantiation_parameter name="NITransferDelay" type="Real"/><channel name="0"/><channel name="1"/><channel name="2"/><channel name="3"/><instance type="process" class="Node" name="N1"><instantiation_expression parameter_name="AccuracyCheckInterval"><body_expression><variable name="AccuracyCheckInterval"/></body_expression></instantiation_expression><instantiation_expression parameter_name="LinkCapacity"><body_expression><variable name="LinkCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="Load"><body_expression><variable name="Load"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MeanBurstSize"><body_expression><variable name="MeanBurstSize"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MyID"><body_expression><constant type="integer">1</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfNodes"><body_expression><binary_operation operator="*" stmt_handle="1"><left_operand><variable name="NumberOfXNodes"/></left_operand><right_operand><variable name="NumberOfYNodes"/></right_operand></binary_operation></body_expression></instantiation_expression><connection port="NI" channel="0"/></instance><instance type="process" class="Node" name="N2"><instantiation_expression parameter_name="AccuracyCheckInterval"><body_expression><variable name="AccuracyCheckInterval"/></body_expression></instantiation_expression><instantiation_expression parameter_name="LinkCapacity"><body_expression><variable name="LinkCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="Load"><body_expression><variable name="Load"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MeanBurstSize"><body_expression><variable name="MeanBurstSize"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MyID"><body_expression><constant type="integer">2</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfNodes"><body_expression><binary_operation operator="*" stmt_handle="2"><left_operand><variable name="NumberOfXNodes"/></left_operand><right_operand><variable name="NumberOfYNodes"/></right_operand></binary_operation></body_expression></instantiation_expression><connection port="NI" channel="1"/></instance><instance type="process" class="Node" name="N3"><instantiation_expression parameter_name="AccuracyCheckInterval"><body_expression><variable name="AccuracyCheckInterval"/></body_expression></instantiation_expression><instantiation_expression parameter_name="LinkCapacity"><body_expression><variable name="LinkCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="Load"><body_expression><variable name="Load"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MeanBurstSize"><body_expression><variable name="MeanBurstSize"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MyID"><body_expression><constant type="integer">3</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfNodes"><body_expression><binary_operation operator="*" stmt_handle="3"><left_operand><variable name="NumberOfXNodes"/></left_operand><right_operand><variable name="NumberOfYNodes"/></right_operand></binary_operation></body_expression></instantiation_expression><connection port="NI" channel="2"/></instance><instance type="process" class="Node" name="N4"><instantiation_expression parameter_name="AccuracyCheckInterval"><body_expression><variable name="AccuracyCheckInterval"/></body_expression></instantiation_expression><instantiation_expression parameter_name="LinkCapacity"><body_expression><variable name="LinkCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="Load"><body_expression><variable name="Load"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MeanBurstSize"><body_expression><variable name="MeanBurstSize"/></body_expression></instantiation_expression><instantiation_expression parameter_name="MyID"><body_expression><constant type="integer">4</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfNodes"><body_expression><binary_operation operator="*" stmt_handle="4"><left_operand><variable name="NumberOfXNodes"/></left_operand><right_operand><variable name="NumberOfYNodes"/></right_operand></binary_operation></body_expression></instantiation_expression><connection port="NI" channel="3"/></instance><instance type="cluster" class="MeshBasedNetwork" name="MeshNetwork"><instantiation_expression parameter_name="FifoCapacity"><body_expression><variable name="FifoCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="FifoProcessingTime"><body_expression><variable name="FifoProcessingTime"/></body_expression></instantiation_expression><instantiation_expression parameter_name="NIBufferCapacity"><body_expression><variable name="NIBufferCapacity"/></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfXNodes"><body_expression><variable name="NumberOfXNodes"/></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfYNodes"><body_expression><variable name="NumberOfYNodes"/></body_expression></instantiation_expression><instantiation_expression parameter_name="RouterProcessingTime"><body_expression><variable name="RouterProcessingTime"/></body_expression></instantiation_expression><instantiation_expression parameter_name="TransferDelay"><body_expression><variable name="NITransferDelay"/></body_expression></instantiation_expression><connection port="Node1" channel="0"/><connection port="Node2" channel="1"/><connection port="Node3" channel="2"/><connection port="Node4" channel="3"/></instance></cluster_class></cluster_classes><top_level_specification><instance type="cluster" class="SoC_Mesh" name="SoC_Mesh"><instantiation_expression parameter_name="AccuracyCheckInterval"><body_expression><constant type="real">1.0</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="FifoCapacity"><body_expression><constant type="integer">2</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="FifoProcessingTime"><body_expression><constant type="real">0.0005</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="LinkCapacity"><body_expression><constant type="real">225.0</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="Load"><body_expression><constant type="real">0.95</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="MeanBurstSize"><body_expression><constant type="real">7.0</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NIBufferCapacity"><body_expression><constant type="integer">2</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfXNodes"><body_expression><constant type="integer">2</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NumberOfYNodes"><body_expression><constant type="integer">2</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="RouterProcessingTime"><body_expression><constant type="real">0.00111</constant></body_expression></instantiation_expression><instantiation_expression parameter_name="NITransferDelay"><body_expression><constant type="real">0.0005</constant></body_expression></instantiation_expression></instance></top_level_specification></poosl_specification>