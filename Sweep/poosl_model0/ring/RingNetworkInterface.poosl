import "RingFlit.poosl"
import "../common/NetworkInterface.poosl"
import "nodecoordination.poosl"

process class RingNetworkInterface (NumberOfXNodes: Integer, NumberOfYNodes: Integer)
extends NetworkInterface

ports
	// no new ports compared to NetworkInterface
	
messages
	// no new messages compared to NetworkInterface

variables
	Locator: NodeMap
	rand : RandomGenerator
init
	InitialiseRing()()

methods

	ForwardToNetwork()() |p: Packet, f: Flit,dx:Integer,dy:Integer,coord: XYCoords,absdx : Integer,altdist : Integer,dyabs : Integer,dy2abs : Integer|
	// override the method to create MseshFlits with routing information 
	
		/* Forwards a packet in the buffer as a flit to the router using relative destination coordinates */
		
		[InputBuffer isEmpty not] p := InputBuffer inspect;
		// For a torus this should be different here destination should be 
		//argmin(abs(dx - x), abs(dimx - dx - x))
		
		//dy:= dy-NumberOfYNodes;
		coord := Locator getCoordinatesOf(p getDestination) minus(Locator getCoordinatesOf(MyID));
		dx := coord getX();
		dy := coord getY();
		absdx := dx;
		if absdx<0 then
		absdx := -absdx
		fi;
		altdist := NumberOfXNodes - absdx;
		if altdist < absdx then
			if dx < 0 then
				altdist := -altdist
			fi;
			dx := altdist			
		fi;
		
		coord := new(XYCoords) init(2, dy); 
	
		f := new(RingFlit) setPacket(p) setDestinationCoordinates(coord);
		Network!Flit(f);
		InputBuffer remove;
		ForwardToNetwork()()
		
	// additional initialisation compared to the super class
	InitialiseRing()()
		Locator := new(NodeMap) init(NumberOfXNodes, NumberOfYNodes);
		rand := new(RandomGenerator) randomiseSeed;
		Initialise()()
	
		