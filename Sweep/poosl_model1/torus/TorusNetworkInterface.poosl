import "TorusFlit.poosl"
import "../common/NetworkInterface.poosl"
import "nodecoordination.poosl"

process class TorusNetworkInterface (NumberOfXNodes: Integer, NumberOfYNodes: Integer)
extends NetworkInterface

ports
	// no new ports compared to NetworkInterface
	
messages
	// no new messages compared to NetworkInterface

variables
	Locator: NodeMap
init
	InitialiseTorus()()

methods

	ForwardToNetwork()() |p: Packet, f: Flit,dx:Integer,dy:Integer,coord: XYCoords,dxabs : Integer,dx2abs : Integer,dyabs : Integer,dy2abs : Integer|
	// override the method to create MseshFlits with routing information 
	
		/* Forwards a packet in the buffer as a flit to the router using relative destination coordinates */
		
		[InputBuffer isEmpty not] p := InputBuffer inspect;
		// For a torus this should be different here destination should be 
		//argmin(abs(dx - x), abs(dimx - dx - x))
		coord := Locator getCoordinatesOf(p getDestination) minus(Locator getCoordinatesOf(MyID));
		dx := coord getX();
		dy := coord getY();
		if dx < 0 then
			dxabs := -dx
		else
			dxabs := dx
		fi;
		if NumberOfXNodes-dx < 0 then
			dx2abs := -(NumberOfXNodes-dx)
		else
			dx2abs := (NumberOfXNodes-dx)
		fi;				
		if dx2abs < dxabs then
			dx:= NumberOfXNodes-dx
		fi;
		// Same for dy
		if dy < 0 then
			dyabs := -dx
		else
			dyabs := dx
		fi;
		if NumberOfYNodes-dy < 0 then
			dy2abs := -(NumberOfYNodes-dy)
		else
			dy2abs := (NumberOfYNodes-dy)
		fi;				
		if dy2abs < dyabs then
			dy:= NumberOfYNodes-dy
		fi;
		coord := new(XYCoords) init(dx, dy); 
					
		f := new(TorusFlit) setPacket(p) setDestinationCoordinates(coord);
		Network!Flit(f);
		InputBuffer remove;
		ForwardToNetwork()()
		
	// additional initialisation compared to the super class
	InitialiseTorus()()
		Locator := new(NodeMap) init(NumberOfXNodes, NumberOfYNodes);
		Initialise()()

		